Script started on Sun 20 Jul 2014 01:23:56 AM PDT
]0;steven@ansible: ~/Dropbox/school/cmpt300/ass3steven@ansible:~/Dropbox/school/cmpt300/ass3$ ./smaugProcess 
!!INIT!!INIT!!INIT!!  semaphores initiialized
!!INIT!!INIT!!INIT!!  mutexes initiialized
!!INIT!!INIT!!INIT!!  shm created for terminateFlag
!!INIT!!INIT!!INIT!!  shm created for cowMealFlag
!!INIT!!INIT!!INIT!!  shm created for cowCounter
!!INIT!!INIT!!INIT!!  shm created for cowsEatenCounter
!!INIT!!INIT!!INIT!!  shm created for sheepMealFlag
!!INIT!!INIT!!INIT!!  shm created for sheepCounter
!!INIT!!INIT!!INIT!!  shm created for sheepEatenCounter
!!INIT!!INIT!!INIT!!  shm created for hunterCounter
!!INIT!!INIT!!INIT!!  shm created for thiefCounter
!!INIT!!INIT!!INIT!!  shm attached for terminateFlag
!!INIT!!INIT!!INIT!!  shm attached for cowMealFlag
!!INIT!!INIT!!INIT!!  shm attached for cowCounter
!!INIT!!INIT!!INIT!!  shm attached for cowsEatenCounter
!!INIT!!INIT!!INIT!!  shm attached for sheepMealFlag
!!INIT!!INIT!!INIT!!  shm attached for sheepCounter
!!INIT!!INIT!!INIT!!  shm attached for sheepEatenCounter
!!INIT!!INIT!!INIT!!  shm attached for hunterCounter
!!INIT!!INIT!!INIT!!  shm attached for thiefCounter
!!INIT!!INIT!!INIT!!   initialize end
1s (1 second) is 1000000us (1e6 microseconds)
Enter the value for the seed: 0
Enter the value for maximumSheepInterval (us): 5000000
Enter the value for maximumCowInterval (us): 5000000
Enter the value for maximumHunterInterval (us): 5000000
Enter the value for maximumThiefInterval (us): 500000      5000000
Enter the value for smaugWinProb (0 to 100): 0
SHEEP CREATED! next sheep at: 4289.408000
COW CREATED! next cow at: 1930.911000
THIEF CREATED! next thief at: 1692.802000
SSSSSSS    18287 SSSSSSS   A sheep is born
HUNTER CREATED! next hunter at: 4636.940000
CCCCCCC    18288 CCCCCCC   A cow is born
TTTTTTT    18289 TTTTTTT   A thief arrived outside the valley
HHHHHHH    18290 HHHHHHH   A hunter arrived outside the valley
CCCCCCC    18288 CCCCCCC   cow grazes for 1692.776978 ms
SSSSSSS    18287 SSSSSSS   sheep grazes for 1930.885986 ms
CCCCCCC    18288 CCCCCCC   1  cow has been enchanted 
SSSSSSS    18287 SSSSSSS   1  sheeps have been enchanted 
CCCCCCC    18288 CCCCCCC   The last cow is waiting
CCCCCCC    18288 CCCCCCC   signal cow meal flag 1
SMAUGSMAUGSMAUGSMAUGSMAU   PID is 18286 
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has gone to sleep
HHHHHHH    18290 HHHHHHH   hunter has found the magical path in 2747.792969 ms
HHHHHHH    18290 HHHHHHH   hunter is under smaug's spell and is waiting to be interacted with
HHHHHHH    18290 HHHHHHH   hunter wakes smaug
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug sniffs his surroundings
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has woken up 
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug lifts the spell and allows a hunter to see his cave
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is fighting a treasure hunter
HHHHHHH    18290 HHHHHHH   hunter enters smaug's cave
HHHHHHH    18290 HHHHHHH   hunter fights smaug
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a treasure hunter
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (10 jewels). He now has 490 jewels.
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a battle (1 treasure hunter process has been terminated)
TTTTTTT    18290 TTTTTTT   hunter leaves cave and goes home
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
                           REAPED zombie process 18290 from main loop
TTTTTTT    18289 TTTTTTT   thief has found the magical path in 4636.915039 ms
TTTTTTT    18289 TTTTTTT   thief is under smaug's spell and is waiting to be interacted with
TTTTTTT    18289 TTTTTTT   thief wakes smaug
THIEF CREATED! next thief at: 4440.595000
TTTTTTT    18292 TTTTTTT   A thief arrived outside the valley
TTTTTTT    18292 TTTTTTT   thief has found the magical path in 4238.334961 ms
TTTTTTT    18292 TTTTTTT   thief is under smaug's spell and is waiting to be interacted with
TTTTTTT    18292 TTTTTTT   thief wakes smaug
COW CREATED! next cow at: 6169.246000
CCCCCCC    18293 CCCCCCC   A cow is born
CCCCCCC    18293 CCCCCCC   cow grazes for 4885.386230 ms
CCCCCCC    18293 CCCCCCC   1  cow has been enchanted 
CCCCCCC    18293 CCCCCCC   The last cow is waiting
CCCCCCC    18293 CCCCCCC   signal cow meal flag 2
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is playing with a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (8 jewels). He now has 482 jewels.
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a game (1 thief process has been terminated)
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
TTTTTTT    18289 TTTTTTT   thief enters smaug's cave
TTTTTTT    18289 TTTTTTT   thief plays with smaug
TTTTTTT    18289 TTTTTTT   thief leaves cave and goes home
                           REAPED zombie process 18289 from main loop
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is playing with a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (8 jewels). He now has 474 jewels.
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a game (1 thief process has been terminated)
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
TTTTTTT    18292 TTTTTTT   thief enters smaug's cave
TTTTTTT    18292 TTTTTTT   thief plays with smaug
TTTTTTT    18292 TTTTTTT   thief leaves cave and goes home
                           REAPED zombie process 18292 from main loop
SHEEP CREATED! next sheep at: 9174.794000
SSSSSSS    18294 SSSSSSS   A sheep is born
SSSSSSS    18294 SSSSSSS   sheep grazes for 4760.492188 ms
SSSSSSS    18294 SSSSSSS   2  sheeps have been enchanted 
THIEF CREATED! next thief at: 9201.087000
TTTTTTT    18295 TTTTTTT   A thief arrived outside the valley
TTTTTTT    18295 TTTTTTT   thief has found the magical path in 1516.649048 ms
TTTTTTT    18295 TTTTTTT   thief is under smaug's spell and is waiting to be interacted with
TTTTTTT    18295 TTTTTTT   thief wakes smaug
HUNTER CREATED! next hunter at: 6153.589000
HHHHHHH    18296 HHHHHHH   A hunter arrived outside the valley
HHHHHHH    18296 HHHHHHH   hunter has found the magical path in 4641.420898 ms
HHHHHHH    18296 HHHHHHH   hunter is under smaug's spell and is waiting to be interacted with
HHHHHHH    18296 HHHHHHH   hunter wakes smaug
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is playing with a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (8 jewels). He now has 466 jewels.
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a game (1 thief process has been terminated)
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
TTTTTTT    18295 TTTTTTT   thief enters smaug's cave
TTTTTTT    18295 TTTTTTT   thief plays with smaug
TTTTTTT    18295 TTTTTTT   thief leaves cave and goes home
                           REAPED zombie process 18295 from main loop
HUNTER CREATED! next hunter at: 10795.010000
HHHHHHH    18297 HHHHHHH   A hunter arrived outside the valley
HHHHHHH    18297 HHHHHHH   hunter has found the magical path in 202.362000 ms
HHHHHHH    18297 HHHHHHH   hunter is under smaug's spell and is waiting to be interacted with
HHHHHHH    18297 HHHHHHH   hunter wakes smaug
COW CREATED! next cow at: 6371.608000
CCCCCCC    18298 CCCCCCC   A cow is born
CCCCCCC    18298 CCCCCCC   cow grazes for 490.027008 ms
CCCCCCC    18298 CCCCCCC   1  cow has been enchanted 
CCCCCCC    18298 CCCCCCC   The last cow is waiting
CCCCCCC    18298 CCCCCCC   signal cow meal flag 3
COW CREATED! next cow at: 6861.635000
CCCCCCC    18299 CCCCCCC   A cow is born
CCCCCCC    18299 CCCCCCC   cow grazes for 3368.689941 ms
CCCCCCC    18299 CCCCCCC   1  cow has been enchanted 
CCCCCCC    18299 CCCCCCC   The last cow is waiting
CCCCCCC    18299 CCCCCCC   signal cow meal flag 4
COW CREATED! next cow at: 10230.325000
CCCCCCC    18300 CCCCCCC   A cow is born
CCCCCCC    18300 CCCCCCC   cow grazes for 2520.059082 ms
CCCCCCC    18300 CCCCCCC   1  cow has been enchanted 
CCCCCCC    18300 CCCCCCC   The last cow is waiting
CCCCCCC    18300 CCCCCCC   signal cow meal flag 5
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug lifts the spell and allows a hunter to see his cave
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is fighting a treasure hunter
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a treasure hunter
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (10 jewels). He now has 456 jewels.
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a battle (1 treasure hunter process has been terminated)
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
HHHHHHH    18296 HHHHHHH   hunter enters smaug's cave
HHHHHHH    18296 HHHHHHH   hunter fights smaug
TTTTTTT    18296 TTTTTTT   hunter leaves cave and goes home
                           REAPED zombie process 18296 from main loop
SHEEP CREATED! next sheep at: 11694.854000
SSSSSSS    18301 SSSSSSS   A sheep is born
SSSSSSS    18301 SSSSSSS   sheep grazes for 4897.763184 ms
SSSSSSS    18301 SSSSSSS   3  sheeps have been enchanted 
SSSSSSS    18301 SSSSSSS   The last sheep is waiting
SSSSSSS    18301 SSSSSSS   signal sheep meal flag 1
SSSSSSS    18301 SSSSSSS   last sheep  wakes the dragon 
THIEF CREATED! next thief at: 14098.850000
TTTTTTT    18302 TTTTTTT   A thief arrived outside the valley
TTTTTTT    18302 TTTTTTT   thief has found the magical path in 2513.926025 ms
TTTTTTT    18302 TTTTTTT   thief is under smaug's spell and is waiting to be interacted with
TTTTTTT    18302 TTTTTTT   thief wakes smaug
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is playing with a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (8 jewels). He now has 448 jewels.
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a game (1 thief process has been terminated)
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
TTTTTTT    18302 TTTTTTT   thief enters smaug's cave
TTTTTTT    18302 TTTTTTT   thief plays with smaug
TTTTTTT    18302 TTTTTTT   thief leaves cave and goes home
                           REAPED zombie process 18302 from main loop
COW CREATED! next cow at: 12744.251000
CCCCCCC    18303 CCCCCCC   A cow is born
CCCCCCC    18303 CCCCCCC   cow grazes for 180.539993 ms
CCCCCCC    18303 CCCCCCC   1  cow has been enchanted 
CCCCCCC    18303 CCCCCCC   The last cow is waiting
CCCCCCC    18303 CCCCCCC   signal cow meal flag 6
CCCCCCC    18303 CCCCCCC   last cow  wakes the dragon 
HUNTER CREATED! next hunter at: 10975.550000
HHHHHHH    18304 HHHHHHH   A hunter arrived outside the valley
HHHHHHH    18304 HHHHHHH   hunter has found the magical path in 383.425995 ms
HHHHHHH    18304 HHHHHHH   hunter is under smaug's spell and is waiting to be interacted with
HHHHHHH    18304 HHHHHHH   hunter wakes smaug
HUNTER CREATED! next hunter at: 11358.977000
HHHHHHH    18305 HHHHHHH   A hunter arrived outside the valley
HHHHHHH    18305 HHHHHHH   hunter has found the magical path in 4089.172119 ms
HHHHHHH    18305 HHHHHHH   hunter is under smaug's spell and is waiting to be interacted with
HHHHHHH    18305 HHHHHHH   hunter wakes smaug
HUNTER CREATED! next hunter at: 15448.149000
HHHHHHH    18306 HHHHHHH   A hunter arrived outside the valley
HHHHHHH    18306 HHHHHHH   hunter has found the magical path in 3455.736084 ms
HHHHHHH    18306 HHHHHHH   hunter is under smaug's spell and is waiting to be interacted with
HHHHHHH    18306 HHHHHHH   hunter wakes smaug
SHEEP CREATED! next sheep at: 15150.590000
SSSSSSS    18307 SSSSSSS   A sheep is born
SSSSSSS    18307 SSSSSSS   sheep grazes for 5.211000 ms
SSSSSSS    18307 SSSSSSS   1  sheeps have been enchanted 
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug lifts the spell and allows a hunter to see his cave
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is fighting a treasure hunter
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a treasure hunter
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (10 jewels). He now has 438 jewels.
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a battle (1 treasure hunter process has been terminated)
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
HHHHHHH    18297 HHHHHHH   hunter enters smaug's cave
HHHHHHH    18297 HHHHHHH   hunter fights smaug
TTTTTTT    18297 TTTTTTT   hunter leaves cave and goes home
                           REAPED zombie process 18297 from main loop
COW CREATED! next cow at: 12749.462000
CCCCCCC    18308 CCCCCCC   A cow is born
CCCCCCC    18308 CCCCCCC   cow grazes for 1595.368042 ms
CCCCCCC    18308 CCCCCCC   1  cow has been enchanted 
CCCCCCC    18308 CCCCCCC   The last cow is waiting
CCCCCCC    18308 CCCCCCC   signal cow meal flag 7
CCCCCCC    18308 CCCCCCC   last cow  wakes the dragon 
COW CREATED! next cow at: 14344.830000
CCCCCCC    18309 CCCCCCC   A cow is born
CCCCCCC    18309 CCCCCCC   cow grazes for 4702.566895 ms
CCCCCCC    18309 CCCCCCC   1  cow has been enchanted 
CCCCCCC    18309 CCCCCCC   The last cow is waiting
CCCCCCC    18309 CCCCCCC   signal cow meal flag 8
CCCCCCC    18309 CCCCCCC   last cow  wakes the dragon 
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug lifts the spell and allows a hunter to see his cave
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is fighting a treasure hunter
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a treasure hunter
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (10 jewels). He now has 428 jewels.
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a battle (1 treasure hunter process has been terminated)
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
HHHHHHH    18304 HHHHHHH   hunter enters smaug's cave
HHHHHHH    18304 HHHHHHH   hunter fights smaug
TTTTTTT    18304 TTTTTTT   hunter leaves cave and goes home
                           REAPED zombie process 18304 from main loop
THIEF CREATED! next thief at: 18801.417000
TTTTTTT    18310 TTTTTTT   A thief arrived outside the valley
TTTTTTT    18310 TTTTTTT   thief has found the magical path in 1956.428955 ms
TTTTTTT    18310 TTTTTTT   thief is under smaug's spell and is waiting to be interacted with
TTTTTTT    18310 TTTTTTT   thief wakes smaug
COW CREATED! next cow at: 16301.259000
CCCCCCC    18311 CCCCCCC   A cow is born
CCCCCCC    18311 CCCCCCC   cow grazes for 1465.781982 ms
CCCCCCC    18311 CCCCCCC   1  cow has been enchanted 
CCCCCCC    18311 CCCCCCC   The last cow is waiting
CCCCCCC    18311 CCCCCCC   signal cow meal flag 9
CCCCCCC    18311 CCCCCCC   last cow  wakes the dragon 
SHEEP CREATED! next sheep at: 16616.372000
SSSSSSS    18312 SSSSSSS   A sheep is born
SSSSSSS    18312 SSSSSSS   sheep grazes for 1021.530029 ms
SSSSSSS    18312 SSSSSSS   2  sheeps have been enchanted 
HUNTER CREATED! next hunter at: 16469.680000
HHHHHHH    18313 HHHHHHH   A hunter arrived outside the valley
HHHHHHH    18313 HHHHHHH   hunter has found the magical path in 3722.862061 ms
HHHHHHH    18313 HHHHHHH   hunter is under smaug's spell and is waiting to be interacted with
HHHHHHH    18313 HHHHHHH   hunter wakes smaug
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is playing with a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (8 jewels). He now has 420 jewels.
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a game (1 thief process has been terminated)
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
TTTTTTT    18310 TTTTTTT   thief enters smaug's cave
TTTTTTT    18310 TTTTTTT   thief plays with smaug
TTTTTTT    18310 TTTTTTT   thief leaves cave and goes home
                           REAPED zombie process 18310 from main loop
COW CREATED! next cow at: 20024.121000
CCCCCCC    18314 CCCCCCC   A cow is born
CCCCCCC    18314 CCCCCCC   cow grazes for 3665.123047 ms
CCCCCCC    18314 CCCCCCC   1  cow has been enchanted 
CCCCCCC    18314 CCCCCCC   The last cow is waiting
CCCCCCC    18314 CCCCCCC   signal cow meal flag 10
CCCCCCC    18314 CCCCCCC   last cow  wakes the dragon 
HUNTER CREATED! next hunter at: 20134.803000
HHHHHHH    18315 HHHHHHH   A hunter arrived outside the valley
HHHHHHH    18315 HHHHHHH   hunter has found the magical path in 174.067001 ms
HHHHHHH    18315 HHHHHHH   hunter is under smaug's spell and is waiting to be interacted with
HHHHHHH    18315 HHHHHHH   hunter wakes smaug
SHEEP CREATED! next sheep at: 16790.439000
SSSSSSS    18316 SSSSSSS   A sheep is born
SSSSSSS    18316 SSSSSSS   sheep grazes for 3703.135010 ms
SSSSSSS    18316 SSSSSSS   3  sheeps have been enchanted 
SSSSSSS    18316 SSSSSSS   The last sheep is waiting
SSSSSSS    18316 SSSSSSS   signal sheep meal flag 2
SSSSSSS    18316 SSSSSSS   last sheep  wakes the dragon 
SHEEP CREATED! next sheep at: 20493.574000
SSSSSSS    18317 SSSSSSS   A sheep is born
SSSSSSS    18317 SSSSSSS   sheep grazes for 1513.928955 ms
SSSSSSS    18317 SSSSSSS   1  sheeps have been enchanted 
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug lifts the spell and allows a hunter to see his cave
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is fighting a treasure hunter
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a treasure hunter
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (10 jewels). He now has 410 jewels.
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a battle (1 treasure hunter process has been terminated)
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
HHHHHHH    18305 HHHHHHH   hunter enters smaug's cave
HHHHHHH    18305 HHHHHHH   hunter fights smaug
TTTTTTT    18305 TTTTTTT   hunter leaves cave and goes home
                           REAPED zombie process 18305 from main loop
THIEF CREATED! next thief at: 20315.346000
TTTTTTT    18318 TTTTTTT   A thief arrived outside the valley
TTTTTTT    18318 TTTTTTT   thief has found the magical path in 1979.802002 ms
TTTTTTT    18318 TTTTTTT   thief is under smaug's spell and is waiting to be interacted with
TTTTTTT    18318 TTTTTTT   thief wakes smaug
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is playing with a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (8 jewels). He now has 402 jewels.
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a game (1 thief process has been terminated)
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
TTTTTTT    18318 TTTTTTT   thief enters smaug's cave
TTTTTTT    18318 TTTTTTT   thief plays with smaug
TTTTTTT    18318 TTTTTTT   thief leaves cave and goes home
                           REAPED zombie process 18318 from main loop
COW CREATED! next cow at: 22003.923000
CCCCCCC    18319 CCCCCCC   A cow is born
CCCCCCC    18319 CCCCCCC   cow grazes for 634.021973 ms
CCCCCCC    18319 CCCCCCC   1  cow has been enchanted 
CCCCCCC    18319 CCCCCCC   The last cow is waiting
CCCCCCC    18319 CCCCCCC   signal cow meal flag 11
CCCCCCC    18319 CCCCCCC   last cow  wakes the dragon 
HUNTER CREATED! next hunter at: 20768.825000
HHHHHHH    18320 HHHHHHH   A hunter arrived outside the valley
HHHHHHH    18320 HHHHHHH   hunter has found the magical path in 723.057983 ms
HHHHHHH    18320 HHHHHHH   hunter is under smaug's spell and is waiting to be interacted with
HHHHHHH    18320 HHHHHHH   hunter wakes smaug
THIEF CREATED! next thief at: 21038.404000
TTTTTTT    18321 TTTTTTT   A thief arrived outside the valley
TTTTTTT    18321 TTTTTTT   thief has found the magical path in 4133.068848 ms
TTTTTTT    18321 TTTTTTT   thief is under smaug's spell and is waiting to be interacted with
TTTTTTT    18321 TTTTTTT   thief wakes smaug
SHEEP CREATED! next sheep at: 24626.643000
SSSSSSS    18322 SSSSSSS   A sheep is born
SSSSSSS    18322 SSSSSSS   sheep grazes for 898.166992 ms
SSSSSSS    18322 SSSSSSS   2  sheeps have been enchanted 
HUNTER CREATED! next hunter at: 21666.992000
HHHHHHH    18323 HHHHHHH   A hunter arrived outside the valley
HHHHHHH    18323 HHHHHHH   hunter has found the magical path in 4961.393066 ms
HHHHHHH    18323 HHHHHHH   hunter is under smaug's spell and is waiting to be interacted with
HHHHHHH    18323 HHHHHHH   hunter wakes smaug
THIEF CREATED! next thief at: 25999.798000
TTTTTTT    18324 TTTTTTT   A thief arrived outside the valley
TTTTTTT    18324 TTTTTTT   thief has found the magical path in 4018.456055 ms
TTTTTTT    18324 TTTTTTT   thief is under smaug's spell and is waiting to be interacted with
TTTTTTT    18324 TTTTTTT   thief wakes smaug
HUNTER CREATED! next hunter at: 25685.449000
HHHHHHH    18325 HHHHHHH   A hunter arrived outside the valley
HHHHHHH    18325 HHHHHHH   hunter has found the magical path in 3175.010986 ms
HHHHHHH    18325 HHHHHHH   hunter is under smaug's spell and is waiting to be interacted with
HHHHHHH    18325 HHHHHHH   hunter wakes smaug
COW CREATED! next cow at: 25178.934000
CCCCCCC    18326 CCCCCCC   A cow is born
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is playing with a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (8 jewels). He now has 394 jewels.
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a game (1 thief process has been terminated)
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
TTTTTTT    18321 TTTTTTT   thief enters smaug's cave
TTTTTTT    18321 TTTTTTT   thief plays with smaug
TTTTTTT    18321 TTTTTTT   thief leaves cave and goes home
CCCCCCC    18326 CCCCCCC   cow grazes for 1478.041992 ms
CCCCCCC    18326 CCCCCCC   1  cow has been enchanted 
CCCCCCC    18326 CCCCCCC   The last cow is waiting
CCCCCCC    18326 CCCCCCC   signal cow meal flag 12
CCCCCCC    18326 CCCCCCC   last cow  wakes the dragon 
                           REAPED zombie process 18321 from main loop
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is playing with a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (8 jewels). He now has 386 jewels.
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a game (1 thief process has been terminated)
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
TTTTTTT    18324 TTTTTTT   thief enters smaug's cave
TTTTTTT    18324 TTTTTTT   thief plays with smaug
TTTTTTT    18324 TTTTTTT   thief leaves cave and goes home
                           REAPED zombie process 18324 from main loop
SHEEP CREATED! next sheep at: 26104.685000
SSSSSSS    18327 SSSSSSS   A sheep is born
SSSSSSS    18327 SSSSSSS   sheep grazes for 1176.229004 ms
SSSSSSS    18327 SSSSSSS   3  sheeps have been enchanted 
SSSSSSS    18327 SSSSSSS   The last sheep is waiting
SSSSSSS    18327 SSSSSSS   signal sheep meal flag 3
SSSSSSS    18327 SSSSSSS   last sheep  wakes the dragon 
COW CREATED! next cow at: 26355.163000
CCCCCCC    18328 CCCCCCC   A cow is born
CCCCCCC    18328 CCCCCCC   cow grazes for 3377.373047 ms
CCCCCCC    18328 CCCCCCC   1  cow has been enchanted 
CCCCCCC    18328 CCCCCCC   The last cow is waiting
CCCCCCC    18328 CCCCCCC   signal cow meal flag 13
CCCCCCC    18328 CCCCCCC   last cow  wakes the dragon 
HUNTER CREATED! next hunter at: 29062.822000
HHHHHHH    18329 HHHHHHH   A hunter arrived outside the valley
HHHHHHH    18329 HHHHHHH   hunter has found the magical path in 4484.420898 ms
HHHHHHH    18329 HHHHHHH   hunter is under smaug's spell and is waiting to be interacted with
HHHHHHH    18329 HHHHHHH   hunter wakes smaug
THIEF CREATED! next thief at: 30484.219000
TTTTTTT    18330 TTTTTTT   A thief arrived outside the valley
TTTTTTT    18330 TTTTTTT   thief has found the magical path in 4544.918945 ms
TTTTTTT    18330 TTTTTTT   thief is under smaug's spell and is waiting to be interacted with
TTTTTTT    18330 TTTTTTT   thief wakes smaug
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is playing with a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (8 jewels). He now has 378 jewels.
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a game (1 thief process has been terminated)
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
TTTTTTT    18330 TTTTTTT   thief enters smaug's cave
TTTTTTT    18330 TTTTTTT   thief plays with smaug
TTTTTTT    18330 TTTTTTT   thief leaves cave and goes home
                           REAPED zombie process 18330 from main loop
SHEEP CREATED! next sheep at: 30649.604000
SSSSSSS    18331 SSSSSSS   A sheep is born
SSSSSSS    18331 SSSSSSS   sheep grazes for 3413.783936 ms
SSSSSSS    18331 SSSSSSS   1  sheeps have been enchanted 
COW CREATED! next cow at: 29768.947000
CCCCCCC    18332 CCCCCCC   A cow is born
CCCCCCC    18332 CCCCCCC   cow grazes for 1898.536987 ms
CCCCCCC    18332 CCCCCCC   1  cow has been enchanted 
CCCCCCC    18332 CCCCCCC   The last cow is waiting
CCCCCCC    18332 CCCCCCC   signal cow meal flag 14
CCCCCCC    18332 CCCCCCC   last cow  wakes the dragon 
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug lifts the spell and allows a hunter to see his cave
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is fighting a treasure hunter
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a treasure hunter
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (10 jewels). He now has 368 jewels.
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a battle (1 treasure hunter process has been terminated)
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
HHHHHHH    18306 HHHHHHH   hunter enters smaug's cave
HHHHHHH    18306 HHHHHHH   hunter fights smaug
TTTTTTT    18306 TTTTTTT   hunter leaves cave and goes home
                           REAPED zombie process 18306 from main loop
HUNTER CREATED! next hunter at: 30961.359000
HHHHHHH    18333 HHHHHHH   A hunter arrived outside the valley
HHHHHHH    18333 HHHHHHH   hunter has found the magical path in 4575.198242 ms
HHHHHHH    18333 HHHHHHH   hunter is under smaug's spell and is waiting to be interacted with
HHHHHHH    18333 HHHHHHH   hunter wakes smaug
COW CREATED! next cow at: 34344.145000
CCCCCCC    18334 CCCCCCC   A cow is born
CCCCCCC    18334 CCCCCCC   cow grazes for 3594.323975 ms
CCCCCCC    18334 CCCCCCC   1  cow has been enchanted 
CCCCCCC    18334 CCCCCCC   The last cow is waiting
CCCCCCC    18334 CCCCCCC   signal cow meal flag 15
CCCCCCC    18334 CCCCCCC   last cow  wakes the dragon 
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug lifts the spell and allows a hunter to see his cave
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is fighting a treasure hunter
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a treasure hunter
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (10 jewels). He now has 358 jewels.
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a battle (1 treasure hunter process has been terminated)
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
HHHHHHH    18313 HHHHHHH   hunter enters smaug's cave
HHHHHHH    18313 HHHHHHH   hunter fights smaug
TTTTTTT    18313 TTTTTTT   hunter leaves cave and goes home
                           REAPED zombie process 18313 from main loop
THIEF CREATED! next thief at: 34078.543000
TTTTTTT    18335 TTTTTTT   A thief arrived outside the valley
TTTTTTT    18335 TTTTTTT   thief has found the magical path in 4798.314941 ms
TTTTTTT    18335 TTTTTTT   thief is under smaug's spell and is waiting to be interacted with
TTTTTTT    18335 TTTTTTT   thief wakes smaug
SHEEP CREATED! next sheep at: 35447.919000
SSSSSSS    18336 SSSSSSS   A sheep is born
SSSSSSS    18336 SSSSSSS   sheep grazes for 3664.370117 ms
SSSSSSS    18336 SSSSSSS   2  sheeps have been enchanted 
HUNTER CREATED! next hunter at: 34625.729000
HHHHHHH    18337 HHHHHHH   A hunter arrived outside the valley
HHHHHHH    18337 HHHHHHH   hunter has found the magical path in 4566.413086 ms
HHHHHHH    18337 HHHHHHH   hunter is under smaug's spell and is waiting to be interacted with
HHHHHHH    18337 HHHHHHH   hunter wakes smaug
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is playing with a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (8 jewels). He now has 350 jewels.
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a game (1 thief process has been terminated)
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
TTTTTTT    18335 TTTTTTT   thief enters smaug's cave
TTTTTTT    18335 TTTTTTT   thief plays with smaug
TTTTTTT    18335 TTTTTTT   thief leaves cave and goes home
                           REAPED zombie process 18335 from main loop
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug lifts the spell and allows a hunter to see his cave
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is fighting a treasure hunter
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a treasure hunter
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (10 jewels). He now has 340 jewels.
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a battle (1 treasure hunter process has been terminated)
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
HHHHHHH    18315 HHHHHHH   hunter enters smaug's cave
HHHHHHH    18315 HHHHHHH   hunter fights smaug
TTTTTTT    18315 TTTTTTT   hunter leaves cave and goes home
                           REAPED zombie process 18315 from main loop
THIEF CREATED! next thief at: 38644.956000
TTTTTTT    18338 TTTTTTT   A thief arrived outside the valley
TTTTTTT    18338 TTTTTTT   thief has found the magical path in 4803.525879 ms
TTTTTTT    18338 TTTTTTT   thief is under smaug's spell and is waiting to be interacted with
TTTTTTT    18338 TTTTTTT   thief wakes smaug
COW CREATED! next cow at: 39147.672000
CCCCCCC    18339 CCCCCCC   A cow is born
CCCCCCC    18339 CCCCCCC   cow grazes for 2776.091064 ms
CCCCCCC    18339 CCCCCCC   1  cow has been enchanted 
CCCCCCC    18339 CCCCCCC   The last cow is waiting
CCCCCCC    18339 CCCCCCC   signal cow meal flag 16
CCCCCCC    18339 CCCCCCC   last cow  wakes the dragon 
HUNTER CREATED! next hunter at: 37401.820000
HHHHHHH    18340 HHHHHHH   A hunter arrived outside the valley
HHHHHHH    18340 HHHHHHH   hunter has found the magical path in 4268.979980 ms
HHHHHHH    18340 HHHHHHH   hunter is under smaug's spell and is waiting to be interacted with
HHHHHHH    18340 HHHHHHH   hunter wakes smaug
SHEEP CREATED! next sheep at: 39716.899000
SSSSSSS    18341 SSSSSSS   A sheep is born
SSSSSSS    18341 SSSSSSS   sheep grazes for 1759.956055 ms
SSSSSSS    18341 SSSSSSS   3  sheeps have been enchanted 
SSSSSSS    18341 SSSSSSS   The last sheep is waiting
SSSSSSS    18341 SSSSSSS   signal sheep meal flag 4
SSSSSSS    18341 SSSSSSS   last sheep  wakes the dragon 
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is playing with a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (8 jewels). He now has 332 jewels.
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a game (1 thief process has been terminated)
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
TTTTTTT    18338 TTTTTTT   thief enters smaug's cave
TTTTTTT    18338 TTTTTTT   thief plays with smaug
TTTTTTT    18338 TTTTTTT   thief leaves cave and goes home
                           REAPED zombie process 18338 from main loop
HUNTER CREATED! next hunter at: 39161.776000
HHHHHHH    18342 HHHHHHH   A hunter arrived outside the valley
HHHHHHH    18342 HHHHHHH   hunter has found the magical path in 4241.873047 ms
HHHHHHH    18342 HHHHHHH   hunter is under smaug's spell and is waiting to be interacted with
HHHHHHH    18342 HHHHHHH   hunter wakes smaug
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug lifts the spell and allows a hunter to see his cave
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is fighting a treasure hunter
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a treasure hunter
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (10 jewels). He now has 322 jewels.
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a battle (1 treasure hunter process has been terminated)
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
HHHHHHH    18320 HHHHHHH   hunter enters smaug's cave
HHHHHHH    18320 HHHHHHH   hunter fights smaug
TTTTTTT    18320 TTTTTTT   hunter leaves cave and goes home
                           REAPED zombie process 18320 from main loop
THIEF CREATED! next thief at: 42886.829000
TTTTTTT    18343 TTTTTTT   A thief arrived outside the valley
TTTTTTT    18343 TTTTTTT   thief has found the magical path in 2806.862061 ms
TTTTTTT    18343 TTTTTTT   thief is under smaug's spell and is waiting to be interacted with
TTTTTTT    18343 TTTTTTT   thief wakes smaug
COW CREATED! next cow at: 41954.534000
CCCCCCC    18344 CCCCCCC   A cow is born
CCCCCCC    18344 CCCCCCC   cow grazes for 2999.169922 ms
CCCCCCC    18344 CCCCCCC   1  cow has been enchanted 
CCCCCCC    18344 CCCCCCC   The last cow is waiting
CCCCCCC    18344 CCCCCCC   signal cow meal flag 17
CCCCCCC    18344 CCCCCCC   last cow  wakes the dragon 
HUNTER CREATED! next hunter at: 42160.946000
HHHHHHH    18345 HHHHHHH   A hunter arrived outside the valley
HHHHHHH    18345 HHHHHHH   hunter has found the magical path in 2906.996094 ms
HHHHHHH    18345 HHHHHHH   hunter is under smaug's spell and is waiting to be interacted with
HHHHHHH    18345 HHHHHHH   hunter wakes smaug
SHEEP CREATED! next sheep at: 42623.896000
SSSSSSS    18346 SSSSSSS   A sheep is born
SSSSSSS    18346 SSSSSSS   sheep grazes for 497.281006 ms
SSSSSSS    18346 SSSSSSS   1  sheeps have been enchanted 
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is playing with a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (8 jewels). He now has 314 jewels.
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a game (1 thief process has been terminated)
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
TTTTTTT    18343 TTTTTTT   thief enters smaug's cave
TTTTTTT    18343 TTTTTTT   thief plays with smaug
TTTTTTT    18343 TTTTTTT   thief leaves cave and goes home
                           REAPED zombie process 18343 from main loop
COW CREATED! next cow at: 42451.815000
CCCCCCC    18348 CCCCCCC   A cow is born
CCCCCCC    18348 CCCCCCC   cow grazes for 1702.305054 ms
CCCCCCC    18348 CCCCCCC   1  cow has been enchanted 
CCCCCCC    18348 CCCCCCC   The last cow is waiting
CCCCCCC    18348 CCCCCCC   signal cow meal flag 18
CCCCCCC    18348 CCCCCCC   last cow  wakes the dragon 
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug lifts the spell and allows a hunter to see his cave
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is fighting a treasure hunter
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a treasure hunter
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (10 jewels). He now has 304 jewels.
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a battle (1 treasure hunter process has been terminated)
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
HHHHHHH    18323 HHHHHHH   hunter enters smaug's cave
HHHHHHH    18323 HHHHHHH   hunter fights smaug
TTTTTTT    18323 TTTTTTT   hunter leaves cave and goes home
                           REAPED zombie process 18323 from main loop
HUNTER CREATED! next hunter at: 43863.251000
HHHHHHH    18349 HHHHHHH   A hunter arrived outside the valley
HHHHHHH    18349 HHHHHHH   hunter has found the magical path in 4420.924805 ms
HHHHHHH    18349 HHHHHHH   hunter is under smaug's spell and is waiting to be interacted with
HHHHHHH    18349 HHHHHHH   hunter wakes smaug
COW CREATED! next cow at: 46872.740000
CCCCCCC    18350 CCCCCCC   A cow is born
CCCCCCC    18350 CCCCCCC   cow grazes for 2477.083984 ms
CCCCCCC    18350 CCCCCCC   1  cow has been enchanted 
CCCCCCC    18350 CCCCCCC   The last cow is waiting
CCCCCCC    18350 CCCCCCC   signal cow meal flag 19
CCCCCCC    18350 CCCCCCC   last cow  wakes the dragon 
SHEEP CREATED! next sheep at: 45100.981000
SSSSSSS    18351 SSSSSSS   A sheep is born
SSSSSSS    18351 SSSSSSS   sheep grazes for 2336.326904 ms
SSSSSSS    18351 SSSSSSS   2  sheeps have been enchanted 
THIEF CREATED! next thief at: 45223.157000
TTTTTTT    18352 TTTTTTT   A thief arrived outside the valley
TTTTTTT    18352 TTTTTTT   thief has found the magical path in 2660.335938 ms
TTTTTTT    18352 TTTTTTT   thief is under smaug's spell and is waiting to be interacted with
TTTTTTT    18352 TTTTTTT   thief wakes smaug
HUNTER CREATED! next hunter at: 46523.588000
HHHHHHH    18353 HHHHHHH   A hunter arrived outside the valley
HHHHHHH    18353 HHHHHHH   hunter has found the magical path in 4126.504883 ms
HHHHHHH    18353 HHHHHHH   hunter is under smaug's spell and is waiting to be interacted with
HHHHHHH    18353 HHHHHHH   hunter wakes smaug
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is playing with a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (8 jewels). He now has 296 jewels.
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a game (1 thief process has been terminated)
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
TTTTTTT    18352 TTTTTTT   thief enters smaug's cave
TTTTTTT    18352 TTTTTTT   thief plays with smaug
TTTTTTT    18352 TTTTTTT   thief leaves cave and goes home
                           REAPED zombie process 18352 from main loop
SHEEP CREATED! next sheep at: 49227.486000
SSSSSSS    18354 SSSSSSS   A sheep is born
SSSSSSS    18354 SSSSSSS   sheep grazes for 750.846008 ms
SSSSSSS    18354 SSSSSSS   3  sheeps have been enchanted 
SSSSSSS    18354 SSSSSSS   The last sheep is waiting
SSSSSSS    18354 SSSSSSS   signal sheep meal flag 5
SSSSSSS    18354 SSSSSSS   last sheep  wakes the dragon 
THIEF CREATED! next thief at: 45974.003000
TTTTTTT    18355 TTTTTTT   A thief arrived outside the valley
TTTTTTT    18355 TTTTTTT   thief has found the magical path in 2621.729004 ms
TTTTTTT    18355 TTTTTTT   thief is under smaug's spell and is waiting to be interacted with
TTTTTTT    18355 TTTTTTT   thief wakes smaug
THIEF CREATED! next thief at: 48595.732000
TTTTTTT    18356 TTTTTTT   A thief arrived outside the valley
TTTTTTT    18356 TTTTTTT   thief has found the magical path in 661.312988 ms
TTTTTTT    18356 TTTTTTT   thief is under smaug's spell and is waiting to be interacted with
TTTTTTT    18356 TTTTTTT   thief wakes smaug
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is playing with a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (8 jewels). He now has 288 jewels.
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a game (1 thief process has been terminated)
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
TTTTTTT    18355 TTTTTTT   thief enters smaug's cave
TTTTTTT    18355 TTTTTTT   thief plays with smaug
TTTTTTT    18355 TTTTTTT   thief leaves cave and goes home
                           REAPED zombie process 18355 from main loop
HUNTER CREATED! next hunter at: 47184.901000
HHHHHHH    18357 HHHHHHH   A hunter arrived outside the valley
HHHHHHH    18357 HHHHHHH   hunter has found the magical path in 3925.856934 ms
HHHHHHH    18357 HHHHHHH   hunter is under smaug's spell and is waiting to be interacted with
HHHHHHH    18357 HHHHHHH   hunter wakes smaug
COW CREATED! next cow at: 50798.598000
CCCCCCC    18358 CCCCCCC   A cow is born
CCCCCCC    18358 CCCCCCC   cow grazes for 1616.124023 ms
CCCCCCC    18358 CCCCCCC   1  cow has been enchanted 
CCCCCCC    18358 CCCCCCC   The last cow is waiting
CCCCCCC    18358 CCCCCCC   signal cow meal flag 20
CCCCCCC    18358 CCCCCCC   last cow  wakes the dragon 
HUNTER CREATED! next hunter at: 48801.026000
HHHHHHH    18359 HHHHHHH   A hunter arrived outside the valley
HHHHHHH    18359 HHHHHHH   hunter has found the magical path in 4353.895020 ms
HHHHHHH    18359 HHHHHHH   hunter is under smaug's spell and is waiting to be interacted with
HHHHHHH    18359 HHHHHHH   hunter wakes smaug
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
TTTTTTT    18356 TTTTTTT   thief enters smaug's cave
TTTTTTT    18356 TTTTTTT   thief plays with smaug
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is playing with a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (8 jewels). He now has 280 jewels.
TTTTTTT    18356 TTTTTTT   thief leaves cave and goes home
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a game (1 thief process has been terminated)
                           REAPED zombie process 18356 from main loop
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
THIEF CREATED! next thief at: 52949.628000
TTTTTTT    18360 TTTTTTT   A thief arrived outside the valley
TTTTTTT    18360 TTTTTTT   thief has found the magical path in 4819.582031 ms
TTTTTTT    18360 TTTTTTT   thief is under smaug's spell and is waiting to be interacted with
TTTTTTT    18360 TTTTTTT   thief wakes smaug
HUNTER CREATED! next hunter at: 53620.609000
HHHHHHH    18361 HHHHHHH   A hunter arrived outside the valley
HHHHHHH    18361 HHHHHHH   hunter has found the magical path in 1100.545044 ms
HHHHHHH    18361 HHHHHHH   hunter is under smaug's spell and is waiting to be interacted with
HHHHHHH    18361 HHHHHHH   hunter wakes smaug
SHEEP CREATED! next sheep at: 50328.031000
SSSSSSS    18362 SSSSSSS   A sheep is born
SSSSSSS    18362 SSSSSSS   sheep grazes for 3898.813965 ms
SSSSSSS    18362 SSSSSSS   1  sheeps have been enchanted 
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is playing with a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (8 jewels). He now has 272 jewels.
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a game (1 thief process has been terminated)
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
TTTTTTT    18360 TTTTTTT   thief enters smaug's cave
TTTTTTT    18360 TTTTTTT   thief plays with smaug
TTTTTTT    18360 TTTTTTT   thief leaves cave and goes home
                           REAPED zombie process 18360 from main loop
SHEEP CREATED! next sheep at: 54226.845000
SSSSSSS    18363 SSSSSSS   A sheep is born
SSSSSSS    18363 SSSSSSS   sheep grazes for 3233.366943 ms
SSSSSSS    18363 SSSSSSS   2  sheeps have been enchanted 
COW CREATED! next cow at: 54031.965000
CCCCCCC    18364 CCCCCCC   A cow is born
CCCCCCC    18364 CCCCCCC   cow grazes for 515.434021 ms
CCCCCCC    18364 CCCCCCC   1  cow has been enchanted 
CCCCCCC    18364 CCCCCCC   The last cow is waiting
CCCCCCC    18364 CCCCCCC   signal cow meal flag 21
CCCCCCC    18364 CCCCCCC   last cow  wakes the dragon 
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug lifts the spell and allows a hunter to see his cave
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is fighting a treasure hunter
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a treasure hunter
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (10 jewels). He now has 262 jewels.
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a battle (1 treasure hunter process has been terminated)
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
HHHHHHH    18325 HHHHHHH   hunter enters smaug's cave
HHHHHHH    18325 HHHHHHH   hunter fights smaug
TTTTTTT    18325 TTTTTTT   hunter leaves cave and goes home
                           REAPED zombie process 18325 from main loop
THIEF CREATED! next thief at: 53465.062000
TTTTTTT    18365 TTTTTTT   A thief arrived outside the valley
TTTTTTT    18365 TTTTTTT   thief has found the magical path in 990.364014 ms
TTTTTTT    18365 TTTTTTT   thief is under smaug's spell and is waiting to be interacted with
TTTTTTT    18365 TTTTTTT   thief wakes smaug
THIEF CREATED! next thief at: 54455.426000
TTTTTTT    18366 TTTTTTT   A thief arrived outside the valley
TTTTTTT    18366 TTTTTTT   thief has found the magical path in 4344.042969 ms
TTTTTTT    18366 TTTTTTT   thief is under smaug's spell and is waiting to be interacted with
TTTTTTT    18366 TTTTTTT   thief wakes smaug
HUNTER CREATED! next hunter at: 57964.653000
HHHHHHH    18367 HHHHHHH   A hunter arrived outside the valley
HHHHHHH    18367 HHHHHHH   hunter has found the magical path in 313.750000 ms
HHHHHHH    18367 HHHHHHH   hunter is under smaug's spell and is waiting to be interacted with
HHHHHHH    18367 HHHHHHH   hunter wakes smaug
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is playing with a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (8 jewels). He now has 254 jewels.
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a game (1 thief process has been terminated)
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
TTTTTTT    18365 TTTTTTT   thief enters smaug's cave
TTTTTTT    18365 TTTTTTT   thief plays with smaug
TTTTTTT    18365 TTTTTTT   thief leaves cave and goes home
                           REAPED zombie process 18365 from main loop
COW CREATED! next cow at: 54345.716000
CCCCCCC    18368 CCCCCCC   A cow is born
CCCCCCC    18368 CCCCCCC   cow grazes for 2171.086914 ms
CCCCCCC    18368 CCCCCCC   1  cow has been enchanted 
CCCCCCC    18368 CCCCCCC   The last cow is waiting
CCCCCCC    18368 CCCCCCC   signal cow meal flag 22
CCCCCCC    18368 CCCCCCC   last cow  wakes the dragon 
SHEEP CREATED! next sheep at: 56397.932000
SSSSSSS    18369 SSSSSSS   A sheep is born
SSSSSSS    18369 SSSSSSS   sheep grazes for 1426.807983 ms
SSSSSSS    18369 SSSSSSS   3  sheeps have been enchanted 
SSSSSSS    18369 SSSSSSS   The last sheep is waiting
SSSSSSS    18369 SSSSSSS   signal sheep meal flag 6
SSSSSSS    18369 SSSSSSS   last sheep  wakes the dragon 
COW CREATED! next cow at: 55772.524000
CCCCCCC    18370 CCCCCCC   A cow is born
CCCCCCC    18370 CCCCCCC   cow grazes for 117.276001 ms
CCCCCCC    18370 CCCCCCC   1  cow has been enchanted 
CCCCCCC    18370 CCCCCCC   The last cow is waiting
CCCCCCC    18370 CCCCCCC   signal cow meal flag 23
CCCCCCC    18370 CCCCCCC   last cow  wakes the dragon 
THIEF CREATED! next thief at: 54572.702000
TTTTTTT    18371 TTTTTTT   A thief arrived outside the valley
TTTTTTT    18371 TTTTTTT   thief has found the magical path in 4947.178223 ms
TTTTTTT    18371 TTTTTTT   thief is under smaug's spell and is waiting to be interacted with
TTTTTTT    18371 TTTTTTT   thief wakes smaug
THIEF CREATED! next thief at: 59519.881000
TTTTTTT    18372 TTTTTTT   A thief arrived outside the valley
TTTTTTT    18372 TTTTTTT   thief has found the magical path in 695.788025 ms
TTTTTTT    18372 TTTTTTT   thief is under smaug's spell and is waiting to be interacted with
TTTTTTT    18372 TTTTTTT   thief wakes smaug
COW CREATED! next cow at: 56468.313000
CCCCCCC    18373 CCCCCCC   A cow is born
CCCCCCC    18373 CCCCCCC   cow grazes for 4393.583984 ms
CCCCCCC    18373 CCCCCCC   1  cow has been enchanted 
CCCCCCC    18373 CCCCCCC   The last cow is waiting
CCCCCCC    18373 CCCCCCC   signal cow meal flag 24
CCCCCCC    18373 CCCCCCC   last cow  wakes the dragon 
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is playing with a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (8 jewels). He now has 246 jewels.
TTTTTTT    18366 TTTTTTT   thief enters smaug's cave
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a game (1 thief process has been terminated)
TTTTTTT    18366 TTTTTTT   thief plays with smaug
TTTTTTT    18366 TTTTTTT   thief leaves cave and goes home
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
                           REAPED zombie process 18366 from main loop
SHEEP CREATED! next sheep at: 60791.516000
SSSSSSS    18374 SSSSSSS   A sheep is born
SSSSSSS    18374 SSSSSSS   sheep grazes for 1705.402954 ms
SSSSSSS    18374 SSSSSSS   1  sheeps have been enchanted 
COW CREATED! next cow at: 58173.716000
CCCCCCC    18375 CCCCCCC   A cow is born
CCCCCCC    18375 CCCCCCC   cow grazes for 3502.650879 ms
CCCCCCC    18375 CCCCCCC   1  cow has been enchanted 
CCCCCCC    18375 CCCCCCC   The last cow is waiting
CCCCCCC    18375 CCCCCCC   signal cow meal flag 25
CCCCCCC    18375 CCCCCCC   last cow  wakes the dragon 
HUNTER CREATED! next hunter at: 61467.305000
HHHHHHH    18376 HHHHHHH   A hunter arrived outside the valley
HHHHHHH    18376 HHHHHHH   hunter has found the magical path in 2392.753906 ms
HHHHHHH    18376 HHHHHHH   hunter is under smaug's spell and is waiting to be interacted with
HHHHHHH    18376 HHHHHHH   hunter wakes smaug
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is playing with a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (8 jewels). He now has 238 jewels.
TTTTTTT    18371 TTTTTTT   thief enters smaug's cave
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a game (1 thief process has been terminated)
TTTTTTT    18371 TTTTTTT   thief plays with smaug
TTTTTTT    18371 TTTTTTT   thief leaves cave and goes home
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
                           REAPED zombie process 18371 from main loop
COW CREATED! next cow at: 60566.470000
CCCCCCC    18377 CCCCCCC   A cow is born
CCCCCCC    18377 CCCCCCC   cow grazes for 4612.398926 ms
CCCCCCC    18377 CCCCCCC   1  cow has been enchanted 
CCCCCCC    18377 CCCCCCC   The last cow is waiting
CCCCCCC    18377 CCCCCCC   signal cow meal flag 26
CCCCCCC    18377 CCCCCCC   last cow  wakes the dragon 
THIEF CREATED! next thief at: 64132.280000
TTTTTTT    18378 TTTTTTT   A thief arrived outside the valley
TTTTTTT    18378 TTTTTTT   thief has found the magical path in 3999.931885 ms
TTTTTTT    18378 TTTTTTT   thief is under smaug's spell and is waiting to be interacted with
TTTTTTT    18378 TTTTTTT   thief wakes smaug
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is playing with a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (8 jewels). He now has 230 jewels.
TTTTTTT    18372 TTTTTTT   thief enters smaug's cave
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a game (1 thief process has been terminated)
TTTTTTT    18372 TTTTTTT   thief plays with smaug
TTTTTTT    18372 TTTTTTT   thief leaves cave and goes home
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
                           REAPED zombie process 18372 from main loop
COW CREATED! next cow at: 64566.402000
CCCCCCC    18379 CCCCCCC   A cow is born
CCCCCCC    18379 CCCCCCC   cow grazes for 4095.060059 ms
CCCCCCC    18379 CCCCCCC   1  cow has been enchanted 
CCCCCCC    18379 CCCCCCC   The last cow is waiting
CCCCCCC    18379 CCCCCCC   signal cow meal flag 27
CCCCCCC    18379 CCCCCCC   last cow  wakes the dragon 
SHEEP CREATED! next sheep at: 64886.578000
SSSSSSS    18380 SSSSSSS   A sheep is born
SSSSSSS    18380 SSSSSSS   sheep grazes for 1549.676025 ms
SSSSSSS    18380 SSSSSSS   2  sheeps have been enchanted 
HUNTER CREATED! next hunter at: 63016.981000
HHHHHHH    18381 HHHHHHH   A hunter arrived outside the valley
HHHHHHH    18381 HHHHHHH   hunter has found the magical path in 3993.367920 ms
HHHHHHH    18381 HHHHHHH   hunter is under smaug's spell and is waiting to be interacted with
HHHHHHH    18381 HHHHHHH   hunter wakes smaug
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is playing with a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (8 jewels). He now has 222 jewels.
TTTTTTT    18378 TTTTTTT   thief enters smaug's cave
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a game (1 thief process has been terminated)
TTTTTTT    18378 TTTTTTT   thief plays with smaug
TTTTTTT    18378 TTTTTTT   thief leaves cave and goes home
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
                           REAPED zombie process 18378 from main loop
HUNTER CREATED! next hunter at: 67010.349000
HHHHHHH    18382 HHHHHHH   A hunter arrived outside the valley
HHHHHHH    18382 HHHHHHH   hunter has found the magical path in 3947.739014 ms
HHHHHHH    18382 HHHHHHH   hunter is under smaug's spell and is waiting to be interacted with
HHHHHHH    18382 HHHHHHH   hunter wakes smaug
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug lifts the spell and allows a hunter to see his cave
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is fighting a treasure hunter
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a treasure hunter
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (10 jewels). He now has 212 jewels.
HHHHHHH    18329 HHHHHHH   hunter enters smaug's cave
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a battle (1 treasure hunter process has been terminated)
HHHHHHH    18329 HHHHHHH   hunter fights smaug
TTTTTTT    18329 TTTTTTT   hunter leaves cave and goes home
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
                           REAPED zombie process 18329 from main loop
THIEF CREATED! next thief at: 68080.020000
TTTTTTT    18383 TTTTTTT   A thief arrived outside the valley
TTTTTTT    18383 TTTTTTT   thief has found the magical path in 4210.012207 ms
TTTTTTT    18383 TTTTTTT   thief is under smaug's spell and is waiting to be interacted with
TTTTTTT    18383 TTTTTTT   thief wakes smaug
COW CREATED! next cow at: 68776.414000
CCCCCCC    18384 CCCCCCC   A cow is born
CCCCCCC    18384 CCCCCCC   cow grazes for 636.226013 ms
CCCCCCC    18384 CCCCCCC   1  cow has been enchanted 
CCCCCCC    18384 CCCCCCC   The last cow is waiting
CCCCCCC    18384 CCCCCCC   signal cow meal flag 28
CCCCCCC    18384 CCCCCCC   last cow  wakes the dragon 
SHEEP CREATED! next sheep at: 65522.805000
SSSSSSS    18385 SSSSSSS   A sheep is born
SSSSSSS    18385 SSSSSSS   sheep grazes for 4698.585938 ms
SSSSSSS    18385 SSSSSSS   3  sheeps have been enchanted 
SSSSSSS    18385 SSSSSSS   The last sheep is waiting
SSSSSSS    18385 SSSSSSS   signal sheep meal flag 7
SSSSSSS    18385 SSSSSSS   last sheep  wakes the dragon 
SHEEP CREATED! next sheep at: 70221.391000
SSSSSSS    18386 SSSSSSS   A sheep is born
SSSSSSS    18386 SSSSSSS   sheep grazes for 4348.094238 ms
SSSSSSS    18386 SSSSSSS   1  sheeps have been enchanted 
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is playing with a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (8 jewels). He now has 204 jewels.
TTTTTTT    18383 TTTTTTT   thief enters smaug's cave
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a game (1 thief process has been terminated)
TTTTTTT    18383 TTTTTTT   thief plays with smaug
TTTTTTT    18383 TTTTTTT   thief leaves cave and goes home
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
                           REAPED zombie process 18383 from main loop
HUNTER CREATED! next hunter at: 71358.443000
HHHHHHH    18387 HHHHHHH   A hunter arrived outside the valley
HHHHHHH    18387 HHHHHHH   hunter has found the magical path in 1297.538940 ms
HHHHHHH    18387 HHHHHHH   hunter is under smaug's spell and is waiting to be interacted with
HHHHHHH    18387 HHHHHHH   hunter wakes smaug
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug lifts the spell and allows a hunter to see his cave
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is fighting a treasure hunter
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a treasure hunter
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (10 jewels). He now has 194 jewels.
HHHHHHH    18333 HHHHHHH   hunter enters smaug's cave
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a battle (1 treasure hunter process has been terminated)
HHHHHHH    18333 HHHHHHH   hunter fights smaug
TTTTTTT    18333 TTTTTTT   hunter leaves cave and goes home
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
                           REAPED zombie process 18333 from main loop
THIEF CREATED! next thief at: 69377.559000
TTTTTTT    18388 TTTTTTT   A thief arrived outside the valley
TTTTTTT    18388 TTTTTTT   thief has found the magical path in 1140.795044 ms
TTTTTTT    18388 TTTTTTT   thief is under smaug's spell and is waiting to be interacted with
TTTTTTT    18388 TTTTTTT   thief wakes smaug
COW CREATED! next cow at: 69917.209000
CCCCCCC    18389 CCCCCCC   A cow is born
CCCCCCC    18389 CCCCCCC   cow grazes for 3480.570068 ms
CCCCCCC    18389 CCCCCCC   1  cow has been enchanted 
CCCCCCC    18389 CCCCCCC   The last cow is waiting
CCCCCCC    18389 CCCCCCC   signal cow meal flag 29
CCCCCCC    18389 CCCCCCC   last cow  wakes the dragon 
THIEF CREATED! next thief at: 72858.131000
TTTTTTT    18390 TTTTTTT   A thief arrived outside the valley
TTTTTTT    18390 TTTTTTT   thief has found the magical path in 651.434021 ms
TTTTTTT    18390 TTTTTTT   thief is under smaug's spell and is waiting to be interacted with
TTTTTTT    18390 TTTTTTT   thief wakes smaug
COW CREATED! next cow at: 70568.643000
CCCCCCC    18391 CCCCCCC   A cow is born
CCCCCCC    18391 CCCCCCC   cow grazes for 960.377991 ms
CCCCCCC    18391 CCCCCCC   1  cow has been enchanted 
CCCCCCC    18391 CCCCCCC   The last cow is waiting
CCCCCCC    18391 CCCCCCC   signal cow meal flag 30
CCCCCCC    18391 CCCCCCC   last cow  wakes the dragon 
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is playing with a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (8 jewels). He now has 186 jewels.
TTTTTTT    18388 TTTTTTT   thief enters smaug's cave
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a game (1 thief process has been terminated)
TTTTTTT    18388 TTTTTTT   thief plays with smaug
TTTTTTT    18388 TTTTTTT   thief leaves cave and goes home
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
                           REAPED zombie process 18388 from main loop
SHEEP CREATED! next sheep at: 71181.769000
SSSSSSS    18392 SSSSSSS   A sheep is born
SSSSSSS    18392 SSSSSSS   sheep grazes for 2097.467041 ms
SSSSSSS    18392 SSSSSSS   2  sheeps have been enchanted 
COW CREATED! next cow at: 72666.110000
CCCCCCC    18393 CCCCCCC   A cow is born
CCCCCCC    18393 CCCCCCC   cow grazes for 2066.601074 ms
CCCCCCC    18393 CCCCCCC   1  cow has been enchanted 
CCCCCCC    18393 CCCCCCC   The last cow is waiting
CCCCCCC    18393 CCCCCCC   signal cow meal flag 31
CCCCCCC    18393 CCCCCCC   last cow  wakes the dragon 
SHEEP CREATED! next sheep at: 73248.371000
SSSSSSS    18394 SSSSSSS   A sheep is born
SSSSSSS    18394 SSSSSSS   sheep grazes for 1710.097046 ms
SSSSSSS    18394 SSSSSSS   3  sheeps have been enchanted 
SSSSSSS    18394 SSSSSSS   The last sheep is waiting
SSSSSSS    18394 SSSSSSS   signal sheep meal flag 8
SSSSSSS    18394 SSSSSSS   last sheep  wakes the dragon 
HUNTER CREATED! next hunter at: 73068.540000
HHHHHHH    18395 HHHHHHH   A hunter arrived outside the valley
HHHHHHH    18395 HHHHHHH   hunter has found the magical path in 2612.902100 ms
HHHHHHH    18395 HHHHHHH   hunter is under smaug's spell and is waiting to be interacted with
HHHHHHH    18395 HHHHHHH   hunter wakes smaug
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is playing with a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (8 jewels). He now has 178 jewels.
TTTTTTT    18390 TTTTTTT   thief enters smaug's cave
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a game (1 thief process has been terminated)
TTTTTTT    18390 TTTTTTT   thief plays with smaug
TTTTTTT    18390 TTTTTTT   thief leaves cave and goes home
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
                           REAPED zombie process 18390 from main loop
COW CREATED! next cow at: 75279.012000
CCCCCCC    18396 CCCCCCC   A cow is born
CCCCCCC    18396 CCCCCCC   cow grazes for 573.317017 ms
CCCCCCC    18396 CCCCCCC   1  cow has been enchanted 
CCCCCCC    18396 CCCCCCC   The last cow is waiting
CCCCCCC    18396 CCCCCCC   signal cow meal flag 32
CCCCCCC    18396 CCCCCCC   last cow  wakes the dragon 
THIEF CREATED! next thief at: 73431.449000
TTTTTTT    18397 TTTTTTT   A thief arrived outside the valley
TTTTTTT    18397 TTTTTTT   thief has found the magical path in 3570.491943 ms
TTTTTTT    18397 TTTTTTT   thief is under smaug's spell and is waiting to be interacted with
TTTTTTT    18397 TTTTTTT   thief wakes smaug
HUNTER CREATED! next hunter at: 76639.033000
HHHHHHH    18398 HHHHHHH   A hunter arrived outside the valley
HHHHHHH    18398 HHHHHHH   hunter has found the magical path in 2926.652100 ms
HHHHHHH    18398 HHHHHHH   hunter is under smaug's spell and is waiting to be interacted with
HHHHHHH    18398 HHHHHHH   hunter wakes smaug
SHEEP CREATED! next sheep at: 76175.024000
SSSSSSS    18399 SSSSSSS   A sheep is born
SSSSSSS    18399 SSSSSSS   sheep grazes for 260.756012 ms
SSSSSSS    18399 SSSSSSS   1  sheeps have been enchanted 
THIEF CREATED! next thief at: 73692.206000
TTTTTTT    18400 TTTTTTT   A thief arrived outside the valley
TTTTTTT    18400 TTTTTTT   thief has found the magical path in 4997.300781 ms
TTTTTTT    18400 TTTTTTT   thief is under smaug's spell and is waiting to be interacted with
TTTTTTT    18400 TTTTTTT   thief wakes smaug
THIEF CREATED! next thief at: 78689.508000
TTTTTTT    18401 TTTTTTT   A thief arrived outside the valley
TTTTTTT    18401 TTTTTTT   thief has found the magical path in 560.280029 ms
TTTTTTT    18401 TTTTTTT   thief is under smaug's spell and is waiting to be interacted with
TTTTTTT    18401 TTTTTTT   thief wakes smaug
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is playing with a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (8 jewels). He now has 170 jewels.
TTTTTTT    18397 TTTTTTT   thief enters smaug's cave
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a game (1 thief process has been terminated)
TTTTTTT    18397 TTTTTTT   thief plays with smaug
TTTTTTT    18397 TTTTTTT   thief leaves cave and goes home
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
                           REAPED zombie process 18397 from main loop
COW CREATED! next cow at: 75839.292000
CCCCCCC    18402 CCCCCCC   A cow is born
CCCCCCC    18402 CCCCCCC   cow grazes for 2724.285889 ms
CCCCCCC    18402 CCCCCCC   1  cow has been enchanted 
CCCCCCC    18402 CCCCCCC   The last cow is waiting
CCCCCCC    18402 CCCCCCC   signal cow meal flag 33
CCCCCCC    18402 CCCCCCC   last cow  wakes the dragon 
COW CREATED! next cow at: 78563.578000
CCCCCCC    18403 CCCCCCC   A cow is born
CCCCCCC    18403 CCCCCCC   cow grazes for 3209.440918 ms
CCCCCCC    18403 CCCCCCC   1  cow has been enchanted 
CCCCCCC    18403 CCCCCCC   The last cow is waiting
CCCCCCC    18403 CCCCCCC   signal cow meal flag 34
CCCCCCC    18403 CCCCCCC   last cow  wakes the dragon 
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is playing with a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (8 jewels). He now has 162 jewels.
TTTTTTT    18400 TTTTTTT   thief enters smaug's cave
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a game (1 thief process has been terminated)
TTTTTTT    18400 TTTTTTT   thief plays with smaug
TTTTTTT    18400 TTTTTTT   thief leaves cave and goes home
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
                           REAPED zombie process 18400 from main loop
SHEEP CREATED! next sheep at: 79384.465000
SSSSSSS    18404 SSSSSSS   A sheep is born
SSSSSSS    18404 SSSSSSS   sheep grazes for 4953.865234 ms
SSSSSSS    18404 SSSSSSS   2  sheeps have been enchanted 
HUNTER CREATED! next hunter at: 81592.898000
HHHHHHH    18405 HHHHHHH   A hunter arrived outside the valley
HHHHHHH    18405 HHHHHHH   hunter has found the magical path in 4429.688965 ms
HHHHHHH    18405 HHHHHHH   hunter is under smaug's spell and is waiting to be interacted with
HHHHHHH    18405 HHHHHHH   hunter wakes smaug
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is playing with a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (8 jewels). He now has 154 jewels.
TTTTTTT    18401 TTTTTTT   thief enters smaug's cave
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a game (1 thief process has been terminated)
TTTTTTT    18401 TTTTTTT   thief plays with smaug
TTTTTTT    18401 TTTTTTT   thief leaves cave and goes home
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
                           REAPED zombie process 18401 from main loop
COW CREATED! next cow at: 82993.269000
CCCCCCC    18406 CCCCCCC   A cow is born
CCCCCCC    18406 CCCCCCC   cow grazes for 4228.443848 ms
CCCCCCC    18406 CCCCCCC   1  cow has been enchanted 
CCCCCCC    18406 CCCCCCC   The last cow is waiting
CCCCCCC    18406 CCCCCCC   signal cow meal flag 35
CCCCCCC    18406 CCCCCCC   last cow  wakes the dragon 
THIEF CREATED! next thief at: 82917.953000
TTTTTTT    18407 TTTTTTT   A thief arrived outside the valley
TTTTTTT    18407 TTTTTTT   thief has found the magical path in 2346.618896 ms
TTTTTTT    18407 TTTTTTT   thief is under smaug's spell and is waiting to be interacted with
TTTTTTT    18407 TTTTTTT   thief wakes smaug
SHEEP CREATED! next sheep at: 81731.085000
SSSSSSS    18408 SSSSSSS   A sheep is born
SSSSSSS    18408 SSSSSSS   sheep grazes for 1558.439941 ms
SSSSSSS    18408 SSSSSSS   3  sheeps have been enchanted 
SSSSSSS    18408 SSSSSSS   The last sheep is waiting
SSSSSSS    18408 SSSSSSS   signal sheep meal flag 9
SSSSSSS    18408 SSSSSSS   last sheep  wakes the dragon 
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is playing with a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (8 jewels). He now has 146 jewels.
TTTTTTT    18407 TTTTTTT   thief enters smaug's cave
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a game (1 thief process has been terminated)
TTTTTTT    18407 TTTTTTT   thief plays with smaug
TTTTTTT    18407 TTTTTTT   thief leaves cave and goes home
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
                           REAPED zombie process 18407 from main loop
HUNTER CREATED! next hunter at: 83151.339000
HHHHHHH    18409 HHHHHHH   A hunter arrived outside the valley
HHHHHHH    18409 HHHHHHH   hunter has found the magical path in 744.729004 ms
HHHHHHH    18409 HHHHHHH   hunter is under smaug's spell and is waiting to be interacted with
HHHHHHH    18409 HHHHHHH   hunter wakes smaug
SHEEP CREATED! next sheep at: 82475.814000
SSSSSSS    18410 SSSSSSS   A sheep is born
SSSSSSS    18410 SSSSSSS   sheep grazes for 3958.031006 ms
SSSSSSS    18410 SSSSSSS   1  sheeps have been enchanted 
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug lifts the spell and allows a hunter to see his cave
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is fighting a treasure hunter
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a treasure hunter
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (10 jewels). He now has 136 jewels.
HHHHHHH    18337 HHHHHHH   hunter enters smaug's cave
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a battle (1 treasure hunter process has been terminated)
HHHHHHH    18337 HHHHHHH   hunter fights smaug
TTTTTTT    18337 TTTTTTT   hunter leaves cave and goes home
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
                           REAPED zombie process 18337 from main loop
SHEEP CREATED! next sheep at: 86433.847000
SSSSSSS    18411 SSSSSSS   A sheep is born
SSSSSSS    18411 SSSSSSS   sheep grazes for 3108.116943 ms
SSSSSSS    18411 SSSSSSS   2  sheeps have been enchanted 
THIEF CREATED! next thief at: 86026.072000
TTTTTTT    18412 TTTTTTT   A thief arrived outside the valley
TTTTTTT    18412 TTTTTTT   thief has found the magical path in 4738.097168 ms
TTTTTTT    18412 TTTTTTT   thief is under smaug's spell and is waiting to be interacted with
TTTTTTT    18412 TTTTTTT   thief wakes smaug
COW CREATED! next cow at: 87731.367000
CCCCCCC    18413 CCCCCCC   A cow is born
CCCCCCC    18413 CCCCCCC   cow grazes for 2905.770996 ms
CCCCCCC    18413 CCCCCCC   1  cow has been enchanted 
CCCCCCC    18413 CCCCCCC   The last cow is waiting
CCCCCCC    18413 CCCCCCC   signal cow meal flag 36
CCCCCCC    18413 CCCCCCC   last cow  wakes the dragon 
HUNTER CREATED! next hunter at: 86057.111000
HHHHHHH    18414 HHHHHHH   A hunter arrived outside the valley
HHHHHHH    18414 HHHHHHH   hunter has found the magical path in 4834.480957 ms
HHHHHHH    18414 HHHHHHH   hunter is under smaug's spell and is waiting to be interacted with
HHHHHHH    18414 HHHHHHH   hunter wakes smaug
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is playing with a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (8 jewels). He now has 128 jewels.
TTTTTTT    18412 TTTTTTT   thief enters smaug's cave
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a game (1 thief process has been terminated)
TTTTTTT    18412 TTTTTTT   thief plays with smaug
TTTTTTT    18412 TTTTTTT   thief leaves cave and goes home
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
                           REAPED zombie process 18412 from main loop
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug lifts the spell and allows a hunter to see his cave
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is fighting a treasure hunter
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a treasure hunter
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (10 jewels). He now has 118 jewels.
HHHHHHH    18340 HHHHHHH   hunter enters smaug's cave
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a battle (1 treasure hunter process has been terminated)
HHHHHHH    18340 HHHHHHH   hunter fights smaug
TTTTTTT    18340 TTTTTTT   hunter leaves cave and goes home
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
                           REAPED zombie process 18340 from main loop
THIEF CREATED! next thief at: 90860.554000
TTTTTTT    18415 TTTTTTT   A thief arrived outside the valley
TTTTTTT    18415 TTTTTTT   thief has found the magical path in 2890.675049 ms
TTTTTTT    18415 TTTTTTT   thief is under smaug's spell and is waiting to be interacted with
TTTTTTT    18415 TTTTTTT   thief wakes smaug
HUNTER CREATED! next hunter at: 88947.786000
HHHHHHH    18416 HHHHHHH   A hunter arrived outside the valley
HHHHHHH    18416 HHHHHHH   hunter has found the magical path in 120.709000 ms
HHHHHHH    18416 HHHHHHH   hunter is under smaug's spell and is waiting to be interacted with
HHHHHHH    18416 HHHHHHH   hunter wakes smaug
SHEEP CREATED! next sheep at: 86554.557000
SSSSSSS    18417 SSSSSSS   A sheep is born
SSSSSSS    18417 SSSSSSS   sheep grazes for 1698.927002 ms
SSSSSSS    18417 SSSSSSS   3  sheeps have been enchanted 
SSSSSSS    18417 SSSSSSS   The last sheep is waiting
SSSSSSS    18417 SSSSSSS   signal sheep meal flag 10
SSSSSSS    18417 SSSSSSS   last sheep  wakes the dragon 
SHEEP CREATED! next sheep at: 88253.484000
SSSSSSS    18418 SSSSSSS   A sheep is born
SSSSSSS    18418 SSSSSSS   sheep grazes for 1704.567017 ms
SSSSSSS    18418 SSSSSSS   1  sheeps have been enchanted 
COW CREATED! next cow at: 89435.934000
CCCCCCC    18419 CCCCCCC   A cow is born
CCCCCCC    18419 CCCCCCC   cow grazes for 3777.855957 ms
CCCCCCC    18419 CCCCCCC   1  cow has been enchanted 
CCCCCCC    18419 CCCCCCC   The last cow is waiting
CCCCCCC    18419 CCCCCCC   signal cow meal flag 37
CCCCCCC    18419 CCCCCCC   last cow  wakes the dragon 
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is playing with a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (8 jewels). He now has 110 jewels.
TTTTTTT    18415 TTTTTTT   thief enters smaug's cave
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a game (1 thief process has been terminated)
TTTTTTT    18415 TTTTTTT   thief plays with smaug
TTTTTTT    18415 TTTTTTT   thief leaves cave and goes home
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
                           REAPED zombie process 18415 from main loop
SHEEP CREATED! next sheep at: 92031.340000
SSSSSSS    18420 SSSSSSS   A sheep is born
SSSSSSS    18420 SSSSSSS   sheep grazes for 179.496994 ms
SSSSSSS    18420 SSSSSSS   2  sheeps have been enchanted 
HUNTER CREATED! next hunter at: 89127.285000
HHHHHHH    18421 HHHHHHH   A hunter arrived outside the valley
HHHHHHH    18421 HHHHHHH   hunter has found the magical path in 4872.353027 ms
HHHHHHH    18421 HHHHHHH   hunter is under smaug's spell and is waiting to be interacted with
HHHHHHH    18421 HHHHHHH   hunter wakes smaug
HUNTER CREATED! next hunter at: 93999.639000
HHHHHHH    18422 HHHHHHH   A hunter arrived outside the valley
HHHHHHH    18422 HHHHHHH   hunter has found the magical path in 2254.585938 ms
HHHHHHH    18422 HHHHHHH   hunter is under smaug's spell and is waiting to be interacted with
HHHHHHH    18422 HHHHHHH   hunter wakes smaug
COW CREATED! next cow at: 91690.521000
CCCCCCC    18423 CCCCCCC   A cow is born
CCCCCCC    18423 CCCCCCC   cow grazes for 2276.965088 ms
CCCCCCC    18423 CCCCCCC   1  cow has been enchanted 
CCCCCCC    18423 CCCCCCC   The last cow is waiting
CCCCCCC    18423 CCCCCCC   signal cow meal flag 38
CCCCCCC    18423 CCCCCCC   last cow  wakes the dragon 
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug lifts the spell and allows a hunter to see his cave
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is fighting a treasure hunter
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a treasure hunter
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (10 jewels). He now has 100 jewels.
HHHHHHH    18342 HHHHHHH   hunter enters smaug's cave
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a battle (1 treasure hunter process has been terminated)
HHHHHHH    18342 HHHHHHH   hunter fights smaug
TTTTTTT    18342 TTTTTTT   hunter leaves cave and goes home
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
                           REAPED zombie process 18342 from main loop
THIEF CREATED! next thief at: 93137.519000
TTTTTTT    18424 TTTTTTT   A thief arrived outside the valley
TTTTTTT    18424 TTTTTTT   thief has found the magical path in 4455.306152 ms
TTTTTTT    18424 TTTTTTT   thief is under smaug's spell and is waiting to be interacted with
TTTTTTT    18424 TTTTTTT   thief wakes smaug
COW CREATED! next cow at: 96145.827000
CCCCCCC    18425 CCCCCCC   A cow is born
CCCCCCC    18425 CCCCCCC   cow grazes for 3964.683105 ms
CCCCCCC    18425 CCCCCCC   1  cow has been enchanted 
CCCCCCC    18425 CCCCCCC   The last cow is waiting
CCCCCCC    18425 CCCCCCC   signal cow meal flag 39
CCCCCCC    18425 CCCCCCC   last cow  wakes the dragon 
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is playing with a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (8 jewels). He now has 92 jewels.
TTTTTTT    18424 TTTTTTT   thief enters smaug's cave
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a game (1 thief process has been terminated)
TTTTTTT    18424 TTTTTTT   thief plays with smaug
TTTTTTT    18424 TTTTTTT   thief leaves cave and goes home
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
                           REAPED zombie process 18424 from main loop
SHEEP CREATED! next sheep at: 95996.023000
SSSSSSS    18426 SSSSSSS   A sheep is born
SSSSSSS    18426 SSSSSSS   sheep grazes for 2406.218994 ms
SSSSSSS    18426 SSSSSSS   3  sheeps have been enchanted 
SSSSSSS    18426 SSSSSSS   The last sheep is waiting
SSSSSSS    18426 SSSSSSS   signal sheep meal flag 11
SSSSSSS    18426 SSSSSSS   last sheep  wakes the dragon 
THIEF CREATED! next thief at: 95543.738000
TTTTTTT    18427 TTTTTTT   A thief arrived outside the valley
TTTTTTT    18427 TTTTTTT   thief has found the magical path in 28.624001 ms
TTTTTTT    18427 TTTTTTT   thief is under smaug's spell and is waiting to be interacted with
TTTTTTT    18427 TTTTTTT   thief wakes smaug
HUNTER CREATED! next hunter at: 94028.264000
HHHHHHH    18428 HHHHHHH   A hunter arrived outside the valley
HHHHHHH    18428 HHHHHHH   hunter has found the magical path in 51.528000 ms
HHHHHHH    18428 HHHHHHH   hunter is under smaug's spell and is waiting to be interacted with
HHHHHHH    18428 HHHHHHH   hunter wakes smaug
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is playing with a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (8 jewels). He now has 84 jewels.
TTTTTTT    18427 TTTTTTT   thief enters smaug's cave
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a game (1 thief process has been terminated)
TTTTTTT    18427 TTTTTTT   thief plays with smaug
TTTTTTT    18427 TTTTTTT   thief leaves cave and goes home
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
                           REAPED zombie process 18427 from main loop
HUNTER CREATED! next hunter at: 94079.793000
HHHHHHH    18429 HHHHHHH   A hunter arrived outside the valley
HHHHHHH    18429 HHHHHHH   hunter has found the magical path in 332.871002 ms
HHHHHHH    18429 HHHHHHH   hunter is under smaug's spell and is waiting to be interacted with
HHHHHHH    18429 HHHHHHH   hunter wakes smaug
HUNTER CREATED! next hunter at: 94412.664000
HHHHHHH    18430 HHHHHHH   A hunter arrived outside the valley
HHHHHHH    18430 HHHHHHH   hunter has found the magical path in 2805.731934 ms
HHHHHHH    18430 HHHHHHH   hunter is under smaug's spell and is waiting to be interacted with
HHHHHHH    18430 HHHHHHH   hunter wakes smaug
HUNTER CREATED! next hunter at: 97218.397000
HHHHHHH    18431 HHHHHHH   A hunter arrived outside the valley
HHHHHHH    18431 HHHHHHH   hunter has found the magical path in 48.828999 ms
HHHHHHH    18431 HHHHHHH   hunter is under smaug's spell and is waiting to be interacted with
HHHHHHH    18431 HHHHHHH   hunter wakes smaug
THIEF CREATED! next thief at: 95592.568000
TTTTTTT    18432 TTTTTTT   A thief arrived outside the valley
TTTTTTT    18432 TTTTTTT   thief has found the magical path in 3409.502930 ms
TTTTTTT    18432 TTTTTTT   thief is under smaug's spell and is waiting to be interacted with
TTTTTTT    18432 TTTTTTT   thief wakes smaug
THIEF CREATED! next thief at: 99002.071000
TTTTTTT    18433 TTTTTTT   A thief arrived outside the valley
TTTTTTT    18433 TTTTTTT   thief has found the magical path in 530.018982 ms
TTTTTTT    18433 TTTTTTT   thief is under smaug's spell and is waiting to be interacted with
TTTTTTT    18433 TTTTTTT   thief wakes smaug
SHEEP CREATED! next sheep at: 96526.042000
SSSSSSS    18434 SSSSSSS   A sheep is born
SSSSSSS    18434 SSSSSSS   sheep grazes for 3258.270020 ms
SSSSSSS    18434 SSSSSSS   1  sheeps have been enchanted 
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is playing with a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (8 jewels). He now has 76 jewels.
TTTTTTT    18432 TTTTTTT   thief enters smaug's cave
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a game (1 thief process has been terminated)
TTTTTTT    18432 TTTTTTT   thief plays with smaug
TTTTTTT    18432 TTTTTTT   thief leaves cave and goes home
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
                           REAPED zombie process 18432 from main loop
COW CREATED! next cow at: 99404.097000
CCCCCCC    18435 CCCCCCC   A cow is born
CCCCCCC    18435 CCCCCCC   cow grazes for 3363.367920 ms
CCCCCCC    18435 CCCCCCC   1  cow has been enchanted 
CCCCCCC    18435 CCCCCCC   The last cow is waiting
CCCCCCC    18435 CCCCCCC   signal cow meal flag 40
CCCCCCC    18435 CCCCCCC   last cow  wakes the dragon 
SHEEP CREATED! next sheep at: 99889.410000
SSSSSSS    18436 SSSSSSS   A sheep is born
SSSSSSS    18436 SSSSSSS   sheep grazes for 4959.708008 ms
SSSSSSS    18436 SSSSSSS   2  sheeps have been enchanted 
HUNTER CREATED! next hunter at: 102178.105000
HHHHHHH    18437 HHHHHHH   A hunter arrived outside the valley
HHHHHHH    18437 HHHHHHH   hunter has found the magical path in 2486.715088 ms
HHHHHHH    18437 HHHHHHH   hunter is under smaug's spell and is waiting to be interacted with
HHHHHHH    18437 HHHHHHH   hunter wakes smaug
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is playing with a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (8 jewels). He now has 68 jewels.
TTTTTTT    18433 TTTTTTT   thief enters smaug's cave
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a game (1 thief process has been terminated)
TTTTTTT    18433 TTTTTTT   thief plays with smaug
TTTTTTT    18433 TTTTTTT   thief leaves cave and goes home
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
                           REAPED zombie process 18433 from main loop
THIEF CREATED! next thief at: 101488.786000
TTTTTTT    18440 TTTTTTT   A thief arrived outside the valley
TTTTTTT    18440 TTTTTTT   thief has found the magical path in 3226.340088 ms
TTTTTTT    18440 TTTTTTT   thief is under smaug's spell and is waiting to be interacted with
TTTTTTT    18440 TTTTTTT   thief wakes smaug
COW CREATED! next cow at: 102630.439000
CCCCCCC    18441 CCCCCCC   A cow is born
CCCCCCC    18441 CCCCCCC   cow grazes for 1518.149048 ms
CCCCCCC    18441 CCCCCCC   1  cow has been enchanted 
CCCCCCC    18441 CCCCCCC   The last cow is waiting
CCCCCCC    18441 CCCCCCC   signal cow meal flag 41
CCCCCCC    18441 CCCCCCC   last cow  wakes the dragon 
SHEEP CREATED! next sheep at: 101407.559000
SSSSSSS    18442 SSSSSSS   A sheep is born
SSSSSSS    18442 SSSSSSS   sheep grazes for 747.796021 ms
SSSSSSS    18442 SSSSSSS   3  sheeps have been enchanted 
SSSSSSS    18442 SSSSSSS   The last sheep is waiting
SSSSSSS    18442 SSSSSSS   signal sheep meal flag 12
SSSSSSS    18442 SSSSSSS   last sheep  wakes the dragon 
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is playing with a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (8 jewels). He now has 60 jewels.
TTTTTTT    18440 TTTTTTT   thief enters smaug's cave
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a game (1 thief process has been terminated)
TTTTTTT    18440 TTTTTTT   thief plays with smaug
TTTTTTT    18440 TTTTTTT   thief leaves cave and goes home
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
                           REAPED zombie process 18440 from main loop
SHEEP CREATED! next sheep at: 102155.356000
SSSSSSS    18451 SSSSSSS   A sheep is born
SSSSSSS    18451 SSSSSSS   sheep grazes for 4700.723145 ms
SSSSSSS    18451 SSSSSSS   1  sheeps have been enchanted 
THIEF CREATED! next thief at: 106189.510000
TTTTTTT    18454 TTTTTTT   A thief arrived outside the valley
TTTTTTT    18454 TTTTTTT   thief has found the magical path in 2142.617920 ms
TTTTTTT    18454 TTTTTTT   thief is under smaug's spell and is waiting to be interacted with
TTTTTTT    18454 TTTTTTT   thief wakes smaug
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is playing with a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (8 jewels). He now has 52 jewels.
TTTTTTT    18454 TTTTTTT   thief enters smaug's cave
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a game (1 thief process has been terminated)
TTTTTTT    18454 TTTTTTT   thief plays with smaug
TTTTTTT    18454 TTTTTTT   thief leaves cave and goes home
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
                           REAPED zombie process 18454 from main loop
SHEEP CREATED! next sheep at: 104297.975000
SSSSSSS    18461 SSSSSSS   A sheep is born
SSSSSSS    18461 SSSSSSS   sheep grazes for 3002.245117 ms
SSSSSSS    18461 SSSSSSS   2  sheeps have been enchanted 
HUNTER CREATED! next hunter at: 105180.350000
HHHHHHH    18462 HHHHHHH   A hunter arrived outside the valley
HHHHHHH    18462 HHHHHHH   hunter has found the magical path in 122.846001 ms
HHHHHHH    18462 HHHHHHH   hunter is under smaug's spell and is waiting to be interacted with
HHHHHHH    18462 HHHHHHH   hunter wakes smaug
COW CREATED! next cow at: 102753.286000
CCCCCCC    18463 CCCCCCC   A cow is born
CCCCCCC    18463 CCCCCCC   cow grazes for 4493.451172 ms
CCCCCCC    18463 CCCCCCC   1  cow has been enchanted 
CCCCCCC    18463 CCCCCCC   The last cow is waiting
CCCCCCC    18463 CCCCCCC   signal cow meal flag 42
CCCCCCC    18463 CCCCCCC   last cow  wakes the dragon 
COW CREATED! next cow at: 107246.738000
CCCCCCC    18464 CCCCCCC   A cow is born
CCCCCCC    18464 CCCCCCC   cow grazes for 892.921021 ms
CCCCCCC    18464 CCCCCCC   1  cow has been enchanted 
CCCCCCC    18464 CCCCCCC   The last cow is waiting
CCCCCCC    18464 CCCCCCC   signal cow meal flag 43
CCCCCCC    18464 CCCCCCC   last cow  wakes the dragon 
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug lifts the spell and allows a hunter to see his cave
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is fighting a treasure hunter
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a treasure hunter
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (10 jewels). He now has 42 jewels.
HHHHHHH    18345 HHHHHHH   hunter enters smaug's cave
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a battle (1 treasure hunter process has been terminated)
HHHHHHH    18345 HHHHHHH   hunter fights smaug
TTTTTTT    18345 TTTTTTT   hunter leaves cave and goes home
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
                           REAPED zombie process 18345 from main loop
SHEEP CREATED! next sheep at: 105190.896000
SSSSSSS    18479 SSSSSSS   A sheep is born
SSSSSSS    18479 SSSSSSS   sheep grazes for 243.554993 ms
SSSSSSS    18479 SSSSSSS   3  sheeps have been enchanted 
SSSSSSS    18479 SSSSSSS   The last sheep is waiting
SSSSSSS    18479 SSSSSSS   signal sheep meal flag 13
SSSSSSS    18479 SSSSSSS   last sheep  wakes the dragon 
HUNTER CREATED! next hunter at: 105423.905000
HHHHHHH    18480 HHHHHHH   A hunter arrived outside the valley
HHHHHHH    18480 HHHHHHH   hunter has found the magical path in 1192.379028 ms
HHHHHHH    18480 HHHHHHH   hunter is under smaug's spell and is waiting to be interacted with
HHHHHHH    18480 HHHHHHH   hunter wakes smaug
SHEEP CREATED! next sheep at: 106383.276000
SSSSSSS    18481 SSSSSSS   A sheep is born
SSSSSSS    18481 SSSSSSS   sheep grazes for 2597.488037 ms
SSSSSSS    18481 SSSSSSS   1  sheeps have been enchanted 
HUNTER CREATED! next hunter at: 108021.395000
HHHHHHH    18482 HHHHHHH   A hunter arrived outside the valley
HHHHHHH    18482 HHHHHHH   hunter has found the magical path in 1537.764038 ms
HHHHHHH    18482 HHHHHHH   hunter is under smaug's spell and is waiting to be interacted with
HHHHHHH    18482 HHHHHHH   hunter wakes smaug
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug lifts the spell and allows a hunter to see his cave
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is fighting a treasure hunter
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a treasure hunter
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (10 jewels). He now has 32 jewels.
HHHHHHH    18349 HHHHHHH   hunter enters smaug's cave
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a battle (1 treasure hunter process has been terminated)
HHHHHHH    18349 HHHHHHH   hunter fights smaug
TTTTTTT    18349 TTTTTTT   hunter leaves cave and goes home
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
                           REAPED zombie process 18349 from main loop
THIEF CREATED! next thief at: 107727.274000
TTTTTTT    18483 TTTTTTT   A thief arrived outside the valley
TTTTTTT    18483 TTTTTTT   thief has found the magical path in 3888.228027 ms
TTTTTTT    18483 TTTTTTT   thief is under smaug's spell and is waiting to be interacted with
TTTTTTT    18483 TTTTTTT   thief wakes smaug
SHEEP CREATED! next sheep at: 110271.504000
SSSSSSS    18484 SSSSSSS   A sheep is born
SSSSSSS    18484 SSSSSSS   sheep grazes for 2469.841064 ms
SSSSSSS    18484 SSSSSSS   2  sheeps have been enchanted 
COW CREATED! next cow at: 109716.579000
CCCCCCC    18485 CCCCCCC   A cow is born
CCCCCCC    18485 CCCCCCC   cow grazes for 3792.350098 ms
CCCCCCC    18485 CCCCCCC   1  cow has been enchanted 
CCCCCCC    18485 CCCCCCC   The last cow is waiting
CCCCCCC    18485 CCCCCCC   signal cow meal flag 44
CCCCCCC    18485 CCCCCCC   last cow  wakes the dragon 
THIEF CREATED! next thief at: 111519.625000
TTTTTTT    18486 TTTTTTT   A thief arrived outside the valley
TTTTTTT    18486 TTTTTTT   thief has found the magical path in 1165.192993 ms
TTTTTTT    18486 TTTTTTT   thief is under smaug's spell and is waiting to be interacted with
TTTTTTT    18486 TTTTTTT   thief wakes smaug
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is playing with a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (8 jewels). He now has 24 jewels.
TTTTTTT    18483 TTTTTTT   thief enters smaug's cave
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a game (1 thief process has been terminated)
TTTTTTT    18483 TTTTTTT   thief plays with smaug
TTTTTTT    18483 TTTTTTT   thief leaves cave and goes home
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
                           REAPED zombie process 18483 from main loop
HUNTER CREATED! next hunter at: 109186.589000
HHHHHHH    18487 HHHHHHH   A hunter arrived outside the valley
HHHHHHH    18487 HHHHHHH   hunter has found the magical path in 4441.500000 ms
HHHHHHH    18487 HHHHHHH   hunter is under smaug's spell and is waiting to be interacted with
HHHHHHH    18487 HHHHHHH   hunter wakes smaug
HUNTER CREATED! next hunter at: 113628.089000
HHHHHHH    18490 HHHHHHH   A hunter arrived outside the valley
HHHHHHH    18490 HHHHHHH   hunter has found the magical path in 2757.033936 ms
HHHHHHH    18490 HHHHHHH   hunter is under smaug's spell and is waiting to be interacted with
HHHHHHH    18490 HHHHHHH   hunter wakes smaug
COW CREATED! next cow at: 112473.615000
CCCCCCC    18491 CCCCCCC   A cow is born
CCCCCCC    18491 CCCCCCC   cow grazes for 1087.764038 ms
CCCCCCC    18491 CCCCCCC   1  cow has been enchanted 
CCCCCCC    18491 CCCCCCC   The last cow is waiting
CCCCCCC    18491 CCCCCCC   signal cow meal flag 45
CCCCCCC    18491 CCCCCCC   last cow  wakes the dragon 
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is playing with a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (8 jewels). He now has 16 jewels.
TTTTTTT    18486 TTTTTTT   thief enters smaug's cave
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a game (1 thief process has been terminated)
TTTTTTT    18486 TTTTTTT   thief plays with smaug
TTTTTTT    18486 TTTTTTT   thief leaves cave and goes home
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
                           REAPED zombie process 18486 from main loop
SHEEP CREATED! next sheep at: 111359.268000
SSSSSSS    18492 SSSSSSS   A sheep is born
SSSSSSS    18492 SSSSSSS   sheep grazes for 4470.124023 ms
SSSSSSS    18492 SSSSSSS   3  sheeps have been enchanted 
SSSSSSS    18492 SSSSSSS   The last sheep is waiting
SSSSSSS    18492 SSSSSSS   signal sheep meal flag 14
SSSSSSS    18492 SSSSSSS   last sheep  wakes the dragon 
SHEEP CREATED! next sheep at: 115829.392000
SSSSSSS    18494 SSSSSSS   A sheep is born
SSSSSSS    18494 SSSSSSS   sheep grazes for 324.914001 ms
SSSSSSS    18494 SSSSSSS   1  sheeps have been enchanted 
THIEF CREATED! next thief at: 111844.540000
TTTTTTT    18495 TTTTTTT   A thief arrived outside the valley
TTTTTTT    18495 TTTTTTT   thief has found the magical path in 3936.987061 ms
TTTTTTT    18495 TTTTTTT   thief is under smaug's spell and is waiting to be interacted with
TTTTTTT    18495 TTTTTTT   thief wakes smaug
THIEF CREATED! next thief at: 115781.529000
TTTTTTT    18496 TTTTTTT   A thief arrived outside the valley
TTTTTTT    18496 TTTTTTT   thief has found the magical path in 2275.855957 ms
TTTTTTT    18496 TTTTTTT   thief is under smaug's spell and is waiting to be interacted with
TTTTTTT    18496 TTTTTTT   thief wakes smaug
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is playing with a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (8 jewels). He now has 8 jewels.
TTTTTTT    18495 TTTTTTT   thief enters smaug's cave
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a game (1 thief process has been terminated)
TTTTTTT    18495 TTTTTTT   thief plays with smaug
TTTTTTT    18495 TTTTTTT   thief leaves cave and goes home
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
                           REAPED zombie process 18495 from main loop
COW CREATED! next cow at: 114749.473000
CCCCCCC    18497 CCCCCCC   A cow is born
CCCCCCC    18497 CCCCCCC   cow grazes for 373.743011 ms
CCCCCCC    18497 CCCCCCC   1  cow has been enchanted 
CCCCCCC    18497 CCCCCCC   The last cow is waiting
CCCCCCC    18497 CCCCCCC   signal cow meal flag 46
CCCCCCC    18497 CCCCCCC   last cow  wakes the dragon 
HUNTER CREATED! next hunter at: 114001.832000
HHHHHHH    18498 HHHHHHH   A hunter arrived outside the valley
HHHHHHH    18498 HHHHHHH   hunter has found the magical path in 2346.490967 ms
HHHHHHH    18498 HHHHHHH   hunter is under smaug's spell and is waiting to be interacted with
HHHHHHH    18498 HHHHHHH   hunter wakes smaug
HUNTER CREATED! next hunter at: 116348.326000
HHHHHHH    18499 HHHHHHH   A hunter arrived outside the valley
HHHHHHH    18499 HHHHHHH   hunter has found the magical path in 322.226990 ms
HHHHHHH    18499 HHHHHHH   hunter is under smaug's spell and is waiting to be interacted with
HHHHHHH    18499 HHHHHHH   hunter wakes smaug
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is playing with a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (8 jewels). He now has 0 jewels.
TTTTTTT    18496 TTTTTTT   thief enters smaug's cave
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a game (1 thief process has been terminated)
TTTTTTT    18496 TTTTTTT   thief plays with smaug
TTTTTTT    18496 TTTTTTT   thief leaves cave and goes home
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a nap for 2000.000000 ms
                           REAPED zombie process 18496 from main loop
COW CREATED! next cow at: 115071.700000
CCCCCCC    18500 CCCCCCC   A cow is born
CCCCCCC    18500 CCCCCCC   cow grazes for 1148.364990 ms
CCCCCCC    18500 CCCCCCC   1  cow has been enchanted 
CCCCCCC    18500 CCCCCCC   The last cow is waiting
CCCCCCC    18500 CCCCCCC   signal cow meal flag 47
CCCCCCC    18500 CCCCCCC   last cow  wakes the dragon 
COW CREATED! next cow at: 116220.066000
CCCCCCC    18501 CCCCCCC   A cow is born
CCCCCCC    18501 CCCCCCC   cow grazes for 709.859009 ms
CCCCCCC    18501 CCCCCCC   1  cow has been enchanted 
CCCCCCC    18501 CCCCCCC   The last cow is waiting
CCCCCCC    18501 CCCCCCC   signal cow meal flag 48
CCCCCCC    18501 CCCCCCC   last cow  wakes the dragon 
THIEF CREATED! next thief at: 116491.390000
TTTTTTT    18502 TTTTTTT   A thief arrived outside the valley
TTTTTTT    18502 TTTTTTT   thief has found the magical path in 281.936005 ms
TTTTTTT    18502 TTTTTTT   thief is under smaug's spell and is waiting to be interacted with
TTTTTTT    18502 TTTTTTT   thief wakes smaug
SHEEP CREATED! next sheep at: 116111.328000
SSSSSSS    18503 SSSSSSS   A sheep is born
SSSSSSS    18503 SSSSSSS   sheep grazes for 1151.432007 ms
SSSSSSS    18503 SSSSSSS   2  sheeps have been enchanted 
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug takes a deep breath
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is playing with a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has been defeated by a thief
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has lost some treasure (8 jewels). He now has -8 jewels.
TTTTTTT    18502 TTTTTTT   thief enters smaug's cave
TTTTTTT    18502 TTTTTTT   thief plays with smaug
SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has too less treasure, so the simulation will terminate.
RELEASESEMAPHORES   Terminating Simulation from process    18274
XXTERMINATETERMINATE   killed sheeps 
XXTERMINATETERMINATE   killed cows 
XXTERMINATETERMINATE   killed hunters 
XXTERMINATETERMINATE   killed thieves 
XXTERMINATETERMINATE   killed smaug
                           REAPED process in terminate 18286
                           REAPED process in terminate 18287
                           REAPED process in terminate 18288
                           REAPED process in terminate 18293
                           REAPED process in terminate 18294
                           REAPED process in terminate 18298
                           REAPED process in terminate 18299
                           REAPED process in terminate 18300
                           REAPED process in terminate 18301
                           REAPED process in terminate 18303
                           REAPED process in terminate 18307
                           REAPED process in terminate 18308
                           REAPED process in terminate 18309
                           REAPED process in terminate 18311
                           REAPED process in terminate 18312
                           REAPED process in terminate 18314
                           REAPED process in terminate 18316
                           REAPED process in terminate 18317
                           REAPED process in terminate 18319
                           REAPED process in terminate 18322
                           REAPED process in terminate 18326
                           REAPED process in terminate 18327
                           REAPED process in terminate 18328
                           REAPED process in terminate 18331
                           REAPED process in terminate 18332
                           REAPED process in terminate 18334
                           REAPED process in terminate 18336
                           REAPED process in terminate 18339
                           REAPED process in terminate 18341
                           REAPED process in terminate 18344
                           REAPED process in terminate 18346
                           REAPED process in terminate 18348
                           REAPED process in terminate 18350
                           REAPED process in terminate 18351
                           REAPED process in terminate 18353
                           REAPED process in terminate 18354
                           REAPED process in terminate 18357
                           REAPED process in terminate 18358
                           REAPED process in terminate 18359
                           REAPED process in terminate 18361
                           REAPED process in terminate 18362
                           REAPED process in terminate 18363
                           REAPED process in terminate 18364
                           REAPED process in terminate 18367
                           REAPED process in terminate 18368
                           REAPED process in terminate 18369
                           REAPED process in terminate 18370
                           REAPED process in terminate 18373
                           REAPED process in terminate 18374
                           REAPED process in terminate 18375
                           REAPED process in terminate 18376
                           REAPED process in terminate 18377
                           REAPED process in terminate 18379
                           REAPED process in terminate 18380
                           REAPED process in terminate 18381
                           REAPED process in terminate 18382
                           REAPED process in terminate 18384
                           REAPED process in terminate 18385
                           REAPED process in terminate 18386
                           REAPED process in terminate 18387
                           REAPED process in terminate 18389
                           REAPED process in terminate 18391
                           REAPED process in terminate 18392
                           REAPED process in terminate 18393
                           REAPED process in terminate 18394
                           REAPED process in terminate 18395
                           REAPED process in terminate 18396
                           REAPED process in terminate 18398
                           REAPED process in terminate 18399
                           REAPED process in terminate 18402
                           REAPED process in terminate 18403
                           REAPED process in terminate 18404
                           REAPED process in terminate 18405
                           REAPED process in terminate 18406
                           REAPED process in terminate 18408
                           REAPED process in terminate 18409
                           REAPED process in terminate 18410
                           REAPED process in terminate 18411
                           REAPED process in terminate 18413
                           REAPED process in terminate 18414
                           REAPED process in terminate 18416
                           REAPED process in terminate 18417
                           REAPED process in terminate 18418
                           REAPED process in terminate 18419
                           REAPED process in terminate 18420
                           REAPED process in terminate 18421
                           REAPED process in terminate 18422
                           REAPED process in terminate 18423
                           REAPED process in terminate 18425
                           REAPED process in terminate 18426
                           REAPED process in terminate 18428
                           REAPED process in terminate 18429
                           REAPED process in terminate 18430
                           REAPED process in terminate 18431
                           REAPED process in terminate 18434
                           REAPED process in terminate 18435
                           REAPED process in terminate 18436
                           REAPED process in terminate 18437
                           REAPED process in terminate 18441
                           REAPED process in terminate 18442
                           REAPED process in terminate 18451
                           REAPED process in terminate 18461
                           REAPED process in terminate 18462
                           REAPED process in terminate 18463
                           REAPED process in terminate 18464
                           REAPED process in terminate 18479
                           REAPED process in terminate 18480
                           REAPED process in terminate 18481
                           REAPED process in terminate 18482
                           REAPED process in terminate 18484
                           REAPED process in terminate 18485
                           REAPED process in terminate 18487
                           REAPED process in terminate 18490
                           REAPED process in terminate 18491
                           REAPED process in terminate 18492
                           REAPED process in terminate 18494
                           REAPED process in terminate 18497
                           REAPED process in terminate 18498
                           REAPED process in terminate 18499
                           REAPED process in terminate 18500
                           REAPED process in terminate 18501
                           REAPED process in terminate 18502
                           REAPED process in terminate 18503

RELEASERELEASERELEAS   terminateFlagp shared memory detached
RELEASERELEASERELEAS   terminateFlag shared memory deleted
RELEASERELEASERELEAS   sheepMealFlagp memory detached
RELEASERELEASERELEAS   sheepMealFlag shared memory deleted
RELEASERELEASERELEAS   sheepCounterp memory detached
RELEASERELEASERELEAS   sheepCounter memory deleted
RELEASERELEASERELEAS   sheepEatenCounterp memory detached
RELEASERELEASERELEAS   sheepEatenCounter memory deleted
RELEASERELEASERELEAS   cowMealFlagP memory detached
RELEASERELEASERELEAS   cowMealFlag shared memory deleted
RELEASERELEASERELEAS   cowCounterp memory detached
RELEASERELEASERELEAS   cowCounter memory deleted
RELEASERELEASERELEAS   cowsEatenCounterp memory detached
RELEASERELEASERELEAS   cowsEatenCounter memory deleted
RELEASERELEASERELEAS   hunterCounterp memory detached
RELEASERELEASERELEAS   hunterCounter memory deleted
RELEASERELEASERELEAS   thiefCounterp memory detached
RELEASERELEASERELEAS   thiefCounter memory deleted
GOODBYE from terminate
]0;steven@ansible: ~/Dropbox/school/cmpt300/ass3steven@ansible:~/Dropbox/school/cmpt300/ass3$ ipcs

------ Shared Memory Segments --------
key        shmid      owner      perms      bytes      nattch     status      
0x00000000 7438336    steven     600        393216     2          dest         
0x00000000 7536641    steven     600        393216     2          dest         
0x00000000 7569410    steven     600        393216     2          dest         
0x00000000 7897109    steven     600        393216     2          dest         

------ Semaphore Arrays --------
key        semid      owner      perms      nsems     

------ Message Queues --------
key        msqid      owner      perms      used-bytes   messages    

]0;steven@ansible: ~/Dropbox/school/cmpt300/ass3steven@ansible:~/Dropbox/school/cmpt300/ass3$ diff
diff: missing operand after 'diff'
diff: Try 'diff --help' for more information.
]0;steven@ansible: ~/Dropbox/school/cmpt300/ass3steven@ansible:~/Dropbox/school/cmpt300/ass3$ diff smaugProcess.c smaugThread.c
59a60,61
> // This should be 10 minutes, but that will make the simulation too long. 
> // Smaug will nap for 2 seconds, but change to 10*60 = 600 seconds if 10 minutes is actually wanted
105c107
< /* Group IDs for managing/removing processes */
---
> /* Main processID for output purposes */
107,112d108
< int smaugProcessID = -1;
< int sheepProcessGID = -1;
< int cowProcessGID = -1;
< int hunterProcessGID = -1;
< int thiefProcessGID = -1;
< 
197c193
< void smaug(const int smaugWinProb)
---
> void *smaug(void *smaugWinProbP)
198a195
> 	const int smaugWinProb = *(int*)smaugWinProbP;
200c197
< 	int localpid;
---
> 	unsigned long localThreadID = (unsigned long)pthread_self();
212,214c209,211
< 	smaugProcessID = getpid();
< 	printf("SMAUGSMAUGSMAUGSMAUGSMAU   PID is %d \n", smaugProcessID );
< 	localpid = smaugProcessID;
---
> 
> 	printf("SMAUGSMAUGSMAUGSMAUGSMAU   PTHREADID is %lu \n", localThreadID );
> 
247a245
> 							// Shared variable terminateFlagp is only ever SET to 1, not 0 or otherwise, so a mutex lock is unnecessary
264c262
< 					printf("SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a game (1 thief process has been terminated)\n");
---
> 					printf("SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a game (1 thief thread has been terminated)\n");
303c301
< 						printf("SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a battle (1 treasure hunter process has been terminated)\n");
---
> 						printf("SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a battle (1 treasure hunter thread has been terminated)\n");
357c355
< 				printf("SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a meal (%d sheep and %d cow process has been terminated)\n", SHEEP_IN_GROUP, COWS_IN_GROUP);
---
> 				printf("SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has finished a meal (%d sheep and %d cow threads have been terminated)\n", SHEEP_IN_GROUP, COWS_IN_GROUP);
387,388c385,386
< 							semopChecked(semID, &SignalProtectCowMealFlag, 1);
< 							semopChecked(semID, &SignalProtectSheepMealFlag, 1);
---
> 						//	semopChecked(semID, &SignalProtectCowMealFlag, 1);
> 						//	semopChecked(semID, &SignalProtectSheepMealFlag, 1);
400,401c398,400
< 						semopChecked(semID, &SignalProtectCowMealFlag, 1);
< 						semopChecked(semID, &SignalProtectSheepMealFlag, 1);
---
> 						// Cow and sheep semaphores released after while loop exits
> 						//semopChecked(semID, &SignalProtectCowMealFlag, 1);
> 						//semopChecked(semID, &SignalProtectSheepMealFlag, 1);
406,415d404
< 				else {
< 					semopChecked(semID, &SignalProtectCowMealFlag, 1);
< 					printf("SMAUGSMAUGSMAUGSMAUGSMAU   Smaug sleeps again\n");
< 					semopChecked(semID, &WaitDragonSleeping, 1);
< 					printf("SMAUGSMAUGSMAUGSMAUGSMAU   Smaug is awake again\n");
< 					break;
< 				}
< 			} /*else {
< 				// Resume execution at beginning of loop and sleep
< 				semopChecked(semID, &SignalProtectSheepMealFlag, 1);
417,418c406
< 				continue;
< 			}*/
---
> 			} 
423a412
> 	return NULL;
603c592
< void sheep(float startTimeN)
---
> void *sheep(void *startTimeNp)
605c594,597
< 	int localpid;
---
> 	// Cast void* to float*, then dereference float* to get to the actual float value pointed to by the pointer
> 	float startTimeN = *(float *)startTimeNp;
> 	// Cast thread id to unsigned long since sometimes the thread id can be very large
> 	unsigned long localThreadID = (unsigned long)pthread_self();
607,609d598
< 	localpid = getpid();
< 
< 	setpgid(localpid, sheepProcessGID);
612c601
< 	printf("SSSSSSS %8d SSSSSSS   A sheep is born\n", localpid);
---
> 	printf("SSSSSSS %8lu SSSSSSS   A sheep is born\n", localThreadID);
619c608
< 	printf("SSSSSSS %8d SSSSSSS   sheep grazes for %f ms\n", localpid, startTimeN);
---
> 	printf("SSSSSSS %8lu SSSSSSS   sheep grazes for %f ms\n", localThreadID, startTimeN);
627c616
< 	printf("SSSSSSS %8d SSSSSSS   %d  sheeps have been enchanted \n", localpid, *sheepCounterp );
---
> 	printf("SSSSSSS %8lu SSSSSSS   %d  sheeps have been enchanted \n", localThreadID, *sheepCounterp );
634c623
< 		printf("SSSSSSS %8d SSSSSSS   The last sheep is waiting\n", localpid);
---
> 		printf("SSSSSSS %8lu SSSSSSS   The last sheep is waiting\n", localThreadID);
637c626
< 		printf("SSSSSSS %8d SSSSSSS   signal sheep meal flag %d\n", localpid, *sheepMealFlagp);
---
> 		printf("SSSSSSS %8lu SSSSSSS   signal sheep meal flag %d\n", localThreadID, *sheepMealFlagp);
643c632
< 			printf("SSSSSSS %8d SSSSSSS   last sheep  wakes the dragon \n", localpid);
---
> 			printf("SSSSSSS %8lu SSSSSSS   last sheep  wakes the dragon \n", localThreadID);
657c646
< 		printf("SSSSSSS %8d SSSSSSS   A sheep has been woken up to be eaten after we've been told to terminate\n", localpid);
---
> 		printf("SSSSSSS %8lu SSSSSSS   A sheep has been woken up to be eaten after we've been told to terminate\n", localThreadID);
659d647
< 		kill(localpid, SIGKILL);
663c651
< 		printf("SSSSSSS %8d SSSSSSS   A sheep has been woken up to be eaten\n", localpid);
---
> 		printf("SSSSSSS %8lu SSSSSSS   A sheep has been woken up to be eaten\n", localThreadID);
676c664
< 		printf("SSSSSSS %8d SSSSSSS   The last sheep has been eaten\n", localpid);
---
> 		printf("SSSSSSS %8lu SSSSSSS   The last sheep has been eaten\n", localThreadID);
683c671
< 		printf("SSSSSSS %8d SSSSSSS   A sheep is waiting to be eaten\n", localpid);
---
> 		printf("SSSSSSS %8lu SSSSSSS   A sheep is waiting to be eaten\n", localThreadID);
688,689c676,677
< 	printf("SSSSSSS %8d SSSSSSS   sheep  dies\n", localpid);
< 	kill(localpid, SIGKILL);
---
> 	printf("SSSSSSS %8lu SSSSSSS   sheep  dies\n", localThreadID);
> 	return NULL;
692c680
< void cow(float startTimeN)
---
> void *cow(void *startTimeNp)
694c682,683
< 	int localpid;
---
> 	float startTimeN = *(float *)startTimeNp;
> 	unsigned long localThreadID = (unsigned long)pthread_self();
696,698d684
< 	localpid = getpid();
< 
< 	setpgid(localpid, cowProcessGID);
701c687
< 	printf("CCCCCCC %8d CCCCCCC   A cow is born\n", localpid);
---
> 	printf("CCCCCCC %8lu CCCCCCC   A cow is born\n", localThreadID);
708c694
< 	printf("CCCCCCC %8d CCCCCCC   cow grazes for %f ms\n", localpid, startTimeN);
---
> 	printf("CCCCCCC %8lu CCCCCCC   cow grazes for %f ms\n", localThreadID, startTimeN);
715c701
< 	printf("CCCCCCC %8d CCCCCCC   %d  cow has been enchanted \n", localpid, *cowCounterp );
---
> 	printf("CCCCCCC %8lu CCCCCCC   %d  cow has been enchanted \n", localThreadID, *cowCounterp );
722c708
< 		printf("CCCCCCC %8d CCCCCCC   The last cow is waiting\n", localpid);
---
> 		printf("CCCCCCC %8lu CCCCCCC   The last cow is waiting\n", localThreadID);
725c711
< 		printf("CCCCCCC %8d CCCCCCC   signal cow meal flag %d\n", localpid, *cowMealFlagP);
---
> 		printf("CCCCCCC %8lu CCCCCCC   signal cow meal flag %d\n", localThreadID, *cowMealFlagP);
731c717
< 			printf("CCCCCCC %8d CCCCCCC   last cow  wakes the dragon \n", localpid);
---
> 			printf("CCCCCCC %8lu CCCCCCC   last cow  wakes the dragon \n", localThreadID);
745c731
< 		printf("CCCCCCC %8d CCCCCCC   A cow has been woken up to be eaten after we've been told to terminate\n", localpid);
---
> 		printf("CCCCCCC %8lu CCCCCCC   A cow has been woken up to be eaten after we've been told to terminate\n", localThreadID);
747d732
< 		kill(localpid, SIGKILL);
751c736
< 		printf("CCCCCCC %8d CCCCCCC   A cow has been woken up to be eaten\n", localpid);
---
> 		printf("CCCCCCC %8lu CCCCCCC   A cow has been woken up to be eaten\n", localThreadID);
764c749
< 		printf("CCCCCCC %8d CCCCCCC   The last cow has been eaten\n", localpid);
---
> 		printf("CCCCCCC %8lu CCCCCCC   The last cow has been eaten\n", localThreadID);
771c756
< 		printf("CCCCCCC %8d CCCCCCC   A cow is waiting to be eaten\n", localpid);
---
> 		printf("CCCCCCC %8lu CCCCCCC   A cow is waiting to be eaten\n", localThreadID);
775,776c760,762
< 	printf("CCCCCCC %8d CCCCCCC   cow  dies\n", localpid);
< 	kill(localpid, SIGKILL);
---
> 	printf("CCCCCCC %8lu CCCCCCC   cow  dies\n", localThreadID);
> 
> 	return NULL;
779c765
< void thief(float startTimeN)
---
> void *thief(void *startTimeNp)
781,782c767,768
<     int localpid = getpid();
<     setpgid(localpid, thiefProcessGID);
---
> 	float startTimeN = *(float *)startTimeNp;
> 	unsigned long localThreadID = (unsigned long)pthread_self();
784c770
<     printf("TTTTTTT %8d TTTTTTT   A thief arrived outside the valley\n", localpid);
---
>     printf("TTTTTTT %8lu TTTTTTT   A thief arrived outside the valley\n", localThreadID);
795c781
< 		printf("TTTTTTT %8d TTTTTTT   thief has found the magical path after we've been told to terminate\n", localpid);
---
> 		printf("TTTTTTT %8lu TTTTTTT   thief has found the magical path after we've been told to terminate\n", localThreadID);
797,798c783
< 		kill(localpid, SIGKILL);
< 		return;
---
> 		return NULL;
800c785
< 		printf("TTTTTTT %8d TTTTTTT   thief has found the magical path in %f ms\n", localpid, startTimeN);
---
> 		printf("TTTTTTT %8lu TTTTTTT   thief has found the magical path in %f ms\n", localThreadID, startTimeN);
807,808c792,793
< 	printf("TTTTTTT %8d TTTTTTT   thief is under smaug's spell and is waiting to be interacted with\n", localpid);
< 	printf("TTTTTTT %8d TTTTTTT   thief wakes smaug\n", localpid);
---
> 	printf("TTTTTTT %8lu TTTTTTT   thief is under smaug's spell and is waiting to be interacted with\n", localThreadID);
> 	printf("TTTTTTT %8lu TTTTTTT   thief wakes smaug\n", localThreadID);
811,812c796,806
< 	printf("TTTTTTT %8d TTTTTTT   thief enters smaug's cave\n", localpid);
< 	printf("TTTTTTT %8d TTTTTTT   thief plays with smaug\n", localpid);
---
> 	// Another terminate check incase this thief ends the simulation and the semaphores are cleaned up
> 	semopChecked(semID, &WaitProtectTerminate, 1);
> 	if( *terminateFlagp == 1 ) {
> 		printf("TTTTTTT %8lu TTTTTTT   thief enters smaug's cave after we've been told to terminate\n", localThreadID);
> 		semopChecked(semID, &SignalProtectTerminate, 1);
> 		return NULL;
> 	} else {
> 		printf("TTTTTTT %8lu TTTTTTT   thief enters smaug's cave\n", localThreadID);
> 		printf("TTTTTTT %8lu TTTTTTT   thief plays with smaug\n", localThreadID);
> 		semopChecked(semID, &SignalProtectTerminate, 1);
> 	}
814,815c808,810
< 	printf("TTTTTTT %8d TTTTTTT   thief leaves cave and goes home\n", localpid);
< 	kill(localpid, SIGKILL);
---
> 	printf("TTTTTTT %8lu TTTTTTT   thief leaves cave and goes home\n", localThreadID);
> 
> 	return NULL;
818c813
< void hunter(float startTimeN)
---
> void *hunter(void *startTimeNp)
820,821c815,816
<     int localpid = getpid();
<     setpgid(localpid, hunterProcessGID);
---
> 	float startTimeN = *(float *)startTimeNp;
> 	unsigned long localThreadID = (unsigned long)pthread_self();
823c818
<     printf("HHHHHHH %8d HHHHHHH   A hunter arrived outside the valley\n", localpid);
---
>     printf("HHHHHHH %8lu HHHHHHH   A hunter arrived outside the valley\n", localThreadID);
834c829
< 		printf("HHHHHHH %8d HHHHHHH   hunter has found the magical path after we've been told to terminate\n", localpid);
---
> 		printf("HHHHHHH %8lu HHHHHHH   hunter has found the magical path after we've been told to terminate\n", localThreadID);
836,837c831
< 		kill(localpid, SIGKILL);
< 		return;
---
> 		return NULL;
839c833
< 		printf("HHHHHHH %8d HHHHHHH   hunter has found the magical path in %f ms\n", localpid, startTimeN);
---
> 		printf("HHHHHHH %8lu HHHHHHH   hunter has found the magical path in %f ms\n", localThreadID, startTimeN);
846,847c840,841
< 	printf("HHHHHHH %8d HHHHHHH   hunter is under smaug's spell and is waiting to be interacted with\n", localpid);
< 	printf("HHHHHHH %8d HHHHHHH   hunter wakes smaug\n", localpid);
---
> 	printf("HHHHHHH %8lu HHHHHHH   hunter is under smaug's spell and is waiting to be interacted with\n", localThreadID);
> 	printf("HHHHHHH %8lu HHHHHHH   hunter wakes smaug\n", localThreadID);
850,851c844,854
< 	printf("HHHHHHH %8d HHHHHHH   hunter enters smaug's cave\n", localpid);
< 	printf("HHHHHHH %8d HHHHHHH   hunter fights smaug\n", localpid);
---
> 	// Another terminate check incase this hunter ends the simulation and the semaphores are cleaned up
> 	semopChecked(semID, &WaitProtectTerminate, 1);
> 	if( *terminateFlagp == 1 ) {
> 		printf("HHHHHHH %8lu HHHHHHH   hunter enters smaug's cave after we've been told to terminate\n", localThreadID);
> 		semopChecked(semID, &SignalProtectTerminate, 1);
> 		return NULL;
> 	} else {
> 		printf("HHHHHHH %8lu HHHHHHH   hunter enters smaug's cave\n", localThreadID);
> 		printf("HHHHHHH %8lu HHHHHHH   hunter fights smaug\n", localThreadID);
> 		semopChecked(semID, &SignalProtectTerminate, 1);
> 	}
853,854c856,858
< 	printf("TTTTTTT %8d TTTTTTT   hunter leaves cave and goes home\n", localpid);
< 	kill(localpid, SIGKILL);
---
> 	printf("TTTTTTT %8lu TTTTTTT   hunter leaves cave and goes home\n", localThreadID);
> 
> 	return NULL;
859d862
< 	pid_t localpgid;
861,862d863
< 	int w = 0;
< 	int status;
865,889c866
< 	printf("RELEASESEMAPHORES   Terminating Simulation from process %8d\n", localpid);
< 	if(sheepProcessGID != (int)localpgid ){
< 		if(killpg(sheepProcessGID, SIGKILL) == -1 && errno == EPERM) {
< 			printf("XXTERMINATETERMINATE   SHEEPS NOT KILLED\n");
< 		}
< 		printf("XXTERMINATETERMINATE   killed sheeps \n");
< 	}
< 	if(cowProcessGID != (int)localpgid ){
< 		if(killpg(cowProcessGID, SIGKILL) == -1 && errno == EPERM) {
< 			printf("XXTERMINATETERMINATE   COWS NOT KILLED\n");
< 		}
< 		printf("XXTERMINATETERMINATE   killed cows \n");
< 	}
< 	if(hunterProcessGID != (int)localpgid ){
< 		if(killpg(hunterProcessGID, SIGKILL) == -1 && errno == EPERM) {
< 			printf("XXTERMINATETERMINATE   HUNTERS NOT KILLED\n");
< 		}
< 		printf("XXTERMINATETERMINATE   killed hunters \n");
< 	}
< 	if(thiefProcessGID != (int)localpgid ){
< 		if(killpg(thiefProcessGID, SIGKILL) == -1 && errno == EPERM) {
< 			printf("XXTERMINATETERMINATE   THIEVES NOT KILLED\n");
< 		}
< 		printf("XXTERMINATETERMINATE   killed thieves \n");
< 	}
---
> 	printf("RELEASESEMAPHORES   Terminating Simulation from process: %8d threadid: %8lu\n", localpid, (unsigned long)pthread_self());
891c868,876
< 	//printf("smaugProcessID: %d  localpgid: %d\n", smaugProcessID, localpgid);
---
> 	// Child threads spawned by the main thread will terminate automatically when main thread terminates
> 	// so not much cleanup to do here
> 	printf("XXTERMINATETERMINATE   sheep threads terminating\n");
> 	printf("XXTERMINATETERMINATE   cow threads terminating\n");
> 	printf("XXTERMINATETERMINATE   hunter threads terminating\n");
> 	printf("XXTERMINATETERMINATE   thief threads terminating\n");
> 	printf("XXTERMINATETERMINATE   smaug thread terminating\n");
> 
> 	// No child processes are created in this threaded version, so no need to waitpid -1 them
893,899d877
< 	if(smaugProcessID != (int)localpid ) {
< 		kill(smaugProcessID, SIGKILL);
< 		printf("XXTERMINATETERMINATE   killed smaug\n");
< 	}
< 	while( (w = waitpid( -1, &status, WNOHANG)) > 1){
< 			printf("                           REAPED process in terminate %d\n", w);
< 	}
900a879
> 
906,910c885,903
< 	pid_t localpid;
< 	int w = 0;
< 	int status;
< 
< 	localpid = getpid();
---
> 	// Semaphore set cannot be freed when there are sleeping threads waiting on the semaphores
> 	// We set all semaphores to be nonzero and allow the sleeping threads to resume and terminate
> 	// The maxiumum semaphore value is 32767, so set the following semaphore values less than that
> 	seminfo.val = 30000;
> 	semctlChecked(semID, SEM_SHEEPINGROUP, SETVAL, seminfo);
> 	semctlChecked(semID, SEM_SHEEPWAITING, SETVAL, seminfo);
> 	semctlChecked(semID, SEM_SHEEPEATEN, SETVAL, seminfo);
> 	semctlChecked(semID, SEM_SHEEPDEAD, SETVAL, seminfo);
> 	semctlChecked(semID, SEM_COWSINGROUP, SETVAL, seminfo);
> 	semctlChecked(semID, SEM_COWSWAITING, SETVAL, seminfo);
> 	semctlChecked(semID, SEM_COWSEATEN, SETVAL, seminfo);
> 	semctlChecked(semID, SEM_COWSDEAD, SETVAL, seminfo);
> 	semctlChecked(semID, SEM_HUNTERSWAITING, SETVAL, seminfo);
> 	semctlChecked(semID, SEM_HUNTERFINISH, SETVAL, seminfo);
> 	semctlChecked(semID, SEM_THIEVESWAITING, SETVAL, seminfo);
> 	semctlChecked(semID, SEM_THIEFFINISH, SETVAL, seminfo);
> 	semctlChecked(semID, SEM_DRAGONFIGHTING, SETVAL, seminfo);
> 	semctlChecked(semID, SEM_DRAGONSLEEPING, SETVAL, seminfo);
> 	semctlChecked(semID, SEM_DRAGONEATING, SETVAL, seminfo);
912,913c905,915
< 	//should check return values for clean termination
< 	semctl(semID, 0, IPC_RMID, seminfo);
---
> 	// Wait for the semaphores, especially for the terminate semaphore to allow the threads to 
> 	// terminate gracefully and not exit(3) from an invalid semaphore operation
> 	printf("RELEASERELEASERELEAS   Sleeping for one second to allow threads to terminate gracefully\n");
> 	sleep(1);
> 
> 	int semaphoreDeletionRet = semctl(semID, 0, IPC_RMID, seminfo);
> 	if(semaphoreDeletionRet != 0) {
> 		printf("RELEASERELEASERELEAS   Catastrophic error encountered trying to release semaphore set!\n");
> 	} else {
> 		printf("RELEASERELEASERELEAS   Semaphore set successfully released\n");
> 	}
916,922d917
< 	// wait for the semaphores 
< 	usleep(4000);
< 	// arg1 is -1 to wait for all child processes
< 	while( (w = waitpid( -1, &status, WNOHANG)) > 1){
< 		printf("                           REAPED process in terminate %d\n", w);
< 	}
< 	printf("\n");
1076a1072,1079
> 	
> 	// If we have been told to terminate, then just return since the semaphore 
> 	// operation below would likely cause an error; releaseSemandMem() would have already been in
> 	// execution elsewhere and the semaphore set would soon be freed. 
> 	// Same reasoning on why we will not use a mutex here.
> 	if(*terminateFlagp == 1)
> 		return;
> 
1107c1110
< 
---
> 	printf("Main threadid: %lu\n", (unsigned long)pthread_self());
1123,1128d1125
< 	// we do not know smaugpid yet
< 	smaugProcessID = -1; 
< 	sheepProcessGID = parentProcessID - 1;
< 	cowProcessGID = parentProcessID - 2;
< 	hunterProcessGID = parentProcessID - 3;
< 	thiefProcessGID = parentProcessID - 4;
1130,1133c1127,1130
< 	pid_t childPID = fork();
< 
< 	if(childPID < 0) {
< 		printf("FORK FAILED\n");
---
> 	pthread_t smaugThread;
> 	if(pthread_create(&smaugThread, NULL, smaug, &smaugWinProb)) {
> 		printf("error creating thread!\n");
> 		terminateSimulation();
1135,1141c1132,1133
< 	} else if(childPID == 0) {
< 		smaug(smaugWinProb);
< 		return 0;
< 	} 
< 
< 	// smaugpid is now known to callee from the above fork; assign it now
< 	smaugProcessID = childPID;
---
> 	}
> 	pthread_detach(smaugThread);
1144d1135
< 	int zombieTick = 0;
1146d1136
< 		zombieTick++;
1152,1155c1142,1149
< 			int childPID = fork();
< 			if(childPID == 0) {
< 				sheep((rand() % maximumSheepInterval) / 1000.0);
< 				return 0;
---
> 			float sleepTime = (rand() % maximumSheepInterval) / 1000.0;
> 			pthread_t sheepThread;
> 			if(pthread_create(&sheepThread, NULL, sheep, &sleepTime)) {
> 				// We have ran out of memory/hit max number of avail threads/got hit by cosmic rays, so
> 				// abort and terminate.
> 				printf("Error creating sheep thread!\n"); 
> 				terminateSimulation();
> 				return 1;
1156a1151,1153
> 			// To free up resources, we would need to join our threads upon completion
> 			// However, we would not be returning anything important anyways, so just detach our threads
> 			pthread_detach(sheepThread);
1162,1165c1159,1164
< 			int childPID = fork();
< 			if(childPID == 0) {
< 				cow((rand() % maximumCowInterval) / 1000.0);
< 				return 0;
---
> 			float cowTime = (rand() % maximumCowInterval) / 1000.0;
> 			pthread_t cowThread;
> 			if(pthread_create(&cowThread, NULL, cow, &cowTime)) {
> 				printf("Error creating cow thread!\n"); 
> 				terminateSimulation();
> 				return 1;
1166a1166
> 			pthread_detach(cowThread);
1172,1175c1172,1177
< 			int childPID = fork();
< 			if(childPID == 0) {
< 				thief((rand() % maximumThiefInterval) / 1000.0);
< 				return 0;
---
> 			float thiefTime = (rand() % maximumThiefInterval) / 1000.0;
> 			pthread_t thiefThread;
> 			if(pthread_create(&thiefThread, NULL, thief, &thiefTime)) { 
> 				printf("Error creating thief thread!\n"); 
> 				terminateSimulation();
> 				return 1;
1176a1179
> 			pthread_detach(thiefThread);
1182,1195c1185,1190
< 			int childPID = fork();
< 			if(childPID == 0) {
< 				hunter((rand() % maximumHunterInterval) / 1000.0);
< 				return 0;
< 			}
< 		}
< 
< 		// Purge all zombies every 10 iteratinos
< 		if(zombieTick % 10 == 0) {
< 			zombieTick -= 10;
< 			// arg1 is -1 to wait for all child processes
< 			int w = 0; int status = 0;
< 			while( (w = waitpid( -1, &status, WNOHANG)) > 1){
< 				printf("                           REAPED zombie process %d from main loop\n", w);
---
> 			float hunterTime = (rand() % maximumHunterInterval) / 1000.0;
> 			pthread_t hunterThread;
> 			if(pthread_create(&hunterThread, NULL, hunter, &hunterTime)) {
> 				printf("Error creating hunter thread!\n"); 
> 				terminateSimulation();
> 				return 1;
1197c1192,1193
< 		}
---
> 			pthread_detach(hunterThread);
> 		} 
1200,1201d1195
< 	//	printf("testing values: %d\n", maximumsheepinterval);
< 
]0;steven@ansible: ~/Dropbox/school/cmpt300/ass3steven@ansible:~/Dropbox/school/cmpt300/ass3$ git diff smaugThread.c smaugProcess.c
[?1h=[1mdiff --git a/smaugProcess.c b/smaugProcess.c[m[m
[1mindex d916406..6cafa3d 100644[m[m
[1m--- a/smaugProcess.c[m[m
[1m+++ b/smaugProcess.c[m[m
[36m@@ -20,30 +20,30 @@[m[m
 #define SEM_PCOWSINGROUP 1[m[m
 #define SEM_SHEEPINGROUP 2[m[m
 #define SEM_PSHEEPINGROUP 3[m[m
[31m-#define SEM_SHEEPWAITING 7[m[m
[31m-#define SEM_COWSWAITING 8[m[m
[31m-#define SEM_PSHEEPEATEN 10[m[m
[31m-#define SEM_PCOWSEATEN 11[m[m
[31m-#define SEM_SHEEPEATEN 12[m[m
[31m-#define SEM_COWSEATEN 13[m[m
[31m-#define SEM_SHEEPDEAD 15[m[m
[31m-#define SEM_COWSDEAD 16[m[m
[31m-#define SEM_PTERMINATE 17[m[m
[31m-#define SEM_DRAGONEATING 19[m[m
[31m-#define SEM_DRAGONFIGHTING 20[m[m
[31m-#define SEM_DRAGONSLEEPING 21[m[m
[31m-#define SEM_PCOWMEALFLAG 23[m[m
[31m-#define SEM_PSHEEPMEALFLAG 24[m[m
[31m-[m[m
[31m-#define SEM_PHUNTERCOUNT 26[m[m
[31m-#define SEM_HUNTERSWAITING 27[m[m
[31m-#define SEM_HUNTERFINISH 28[m[m
[31m-[m[m
[31m-#define SEM_PTHIEFCOUNT 29[m[m
[31m-#define SEM_THIEVESWAITING 30[m[m
[31m-#define SEM_THIEFFINISH 31[m[m
[31m-[m[m
[31m-#define MAX_SEMAPHORES 32[m[m
[32m+[m[32m#define SEM_SHEEPWAITING 4[m[m
[32m+[m[32m#define SEM_COWSWAITING 5[m[m
[32m+[m[32m#define SEM_PSHEEPEATEN 6[m[m
[32m+[m[32m#define SEM_PCOWSEATEN 7[m[m
[32m+[m[32m#define SEM_SHEEPEATEN 8[m[m
[32m+[m[32m#define SEM_COWSEATEN 9[m[m
[32m+[m[32m#define SEM_SHEEPDEAD 10[m[m
[32m+[m[32m#define SEM_COWSDEAD 11[m[m
[32m+[m[32m#define SEM_PTERMINATE 12[m[m
[32m+[m[32m#define SEM_DRAGONEATING 13[m[m
[32m+[m[32m#define SEM_DRAGONFIGHTING 14[m[m
[32m+[m[32m#define SEM_DRAGONSLEEPING 15[m[m
[32m+[m[32m#define SEM_PCOWMEALFLAG 16[m[m
[32m+[m[32m#define SEM_PSHEEPMEALFLAG 17[m[m
[32m+[m[m
[32m+[m[32m#define SEM_PHUNTERCOUNT 18[m[m
[32m+[m[32m#define SEM_HUNTERSWAITING 19[m[m
[32m+[m[32m#define SEM_HUNTERFINISH 20[m[m
[32m+[m[m
[32m+[m[32m#define SEM_PTHIEFCOUNT 21[m[m
[32m+[m[32m#define SEM_THIEVESWAITING 22[m[m
[32m+[m[32m#define SEM_THIEFFINISH 23[m[m
[32m+[m[m
[32m+[m[32m#define MAX_SEMAPHORES 24[m[m
 [m[m
 /* System constants used to control simulation termination */[m[m
:[K[K #define MAX_SHEEP_EATEN 36 [m[m
:[K[K[36m@@ -216,6 +216,9 @@[m [mvoid smaug(const int smaugWinProb)[m[m
:[K[K                // Smaug goes to sleep if nothing happens and sleepThisIteration is 1[m[m
:[K[K                if(sleepThisIteration == 1) {[m[m
:[K[K                        printf("SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has gone to sleep\n" );[m[m
:[K[K[32m+[m                       [32m// We must reset the semaphore to prevent smaug waking up when there's no need to[m[m
:[K[K[32m+[m                       [32mseminfo.val = 0;[m[m
:[K[K[32m+[m                       [32msemctlChecked(semID, SEM_DRAGONSLEEPING, SETVAL, seminfo);[m[m
:[K[K                        semopChecked(semID, &WaitDragonSleeping, 1);[m[m
:[K[K                        printf("SMAUGSMAUGSMAUGSMAUGSMAU   Smaug sniffs his surroundings\n" );[m[m
:[K[K                        printf("SMAUGSMAUGSMAUGSMAUGSMAU   Smaug has woken up \n" );[m[m
:[K[K[36m@@ -1103,17 +1106,19 @@[m [mint main() {[m[m
:[K[K        initialize();[m[m
:[K[K [m[m
:[K[K        printf("1s (1 second) is 1000000us (1e6 microseconds)\n");[m[m
:[K[K[32m+[m       [32mconst int seed = getInputFor("the seed");[m[m
:[K[K        const int maximumSheepInterval = getInputFor("maximumSheepInterval (us)");[m[m
:[K[K        const int maximumCowInterval = getInputFor("maximumCowInterval (us)");[m[m
:[K[K        const int maximumHunterInterval = getInputFor("maximumHunterInterval (us)");[m[m
        const int maximumThiefInterval = getInputFor("maximumThiefInterval (us)");[m[m
[31m-       const int winProb = getInputFor("smaugWinProb (0 to 100)");[m[m
[32m+[m       [32mconst int smaugWinProb = getInputFor("smaugWinProb (0 to 100)");[m[m
 [m[m
        double sheepTimer = 0;[m[m
        double cowTimer = 0;[m[m
        double hunterTimer = 0;[m[m
        double thiefTimer = 0;[m[m
 [m[m
[32m+[m       [32msrand(seed);[m[m
        parentProcessID = getpid();[m[m
        // we do not know smaugpid yet[m[m
        smaugProcessID = -1; [m[m
[36m@@ -1128,7 +1133,7 @@[m [mint main() {[m[m
                printf("FORK FAILED\n");[m[m
                return 1;[m[m
        } else if(childPID == 0) {[m[m
[31m-               smaug(winProb);[m[m
[32m+[m               [32msmaug(smaugWinProb);[m[m
                return 0;[m[m
        } [m[m
 [m[m
[7m(END)[27m[K[K[K[7m(END)[27m[K[K[?1l>]0;steven@ansible: ~/Dropbox/school/cmpt300/ass3steven@ansible:~/Dropbox/school/cmpt300/ass3$ git diff smaugThread.c smaugProcess.c[4Pdiff smaugProcess.c smaugThread.cgit diff smaugThread.c smaugProcess.c[Ksdiff smaugThread.c smaugProcess.c 
#include <errno.h> 						#include <errno.h> 
#include <wait.h> 						#include <wait.h> 
#include <stdlib.h> 						#include <stdlib.h> 
#include <stdio.h>						#include <stdio.h>
#include <unistd.h>						#include <unistd.h>
#include <curses.h>						#include <curses.h>
#include <time.h>						#include <time.h>
#include <signal.h>						#include <signal.h>
#include <sys/types.h>						#include <sys/types.h>
#include <sys/ipc.h>						#include <sys/ipc.h>
#include <sys/sem.h>						#include <sys/sem.h>
#include <sys/shm.h>						#include <sys/shm.h>
#include <sys/time.h>						#include <sys/time.h>
#include <sys/resource.h> 					#include <sys/resource.h> 


/* Define semaphores to be placed in a single semaphore set *	/* Define semaphores to be placed in a single semaphore set *
/* Numbers indicate index in semaphore set for named semaphor	/* Numbers indicate index in semaphore set for named semaphor
#define SEM_COWSINGROUP 0					#define SEM_COWSINGROUP 0
#define SEM_PCOWSINGROUP 1					#define SEM_PCOWSINGROUP 1
#define SEM_SHEEPINGROUP 2					#define SEM_SHEEPINGROUP 2
#define SEM_PSHEEPINGROUP 3					#define SEM_PSHEEPINGROUP 3
#define SEM_SHEEPWAITING 4					#define SEM_SHEEPWAITING 4
#define SEM_COWSWAITING 5					#define SEM_COWSWAITING 5
#define SEM_PSHEEPEATEN 6					#define SEM_PSHEEPEATEN 6
#define SEM_PCOWSEATEN 7					#define SEM_PCOWSEATEN 7
#define SEM_SHEEPEATEN 8					#define SEM_SHEEPEATEN 8
#define SEM_COWSEATEN 9						#define SEM_COWSEATEN 9
#define SEM_SHEEPDEAD 10					#define SEM_SHEEPDEAD 10
#define SEM_COWSDEAD 11						#define SEM_COWSDEAD 11
#define SEM_PTERMINATE 12					#define SEM_PTERMINATE 12
#define SEM_DRAGONEATING 13					#define SEM_DRAGONEATING 13
#define SEM_DRAGONFIGHTING 14					#define SEM_DRAGONFIGHTING 14
#define SEM_DRAGONSLEEPING 15					#define SEM_DRAGONSLEEPING 15
#define SEM_PCOWMEALFLAG 16					#define SEM_PCOWMEALFLAG 16
#define SEM_PSHEEPMEALFLAG 17					#define SEM_PSHEEPMEALFLAG 17

#define SEM_PHUNTERCOUNT 18					#define SEM_PHUNTERCOUNT 18
#define SEM_HUNTERSWAITING 19					#define SEM_HUNTERSWAITING 19
#define SEM_HUNTERFINISH 20					#define SEM_HUNTERFINISH 20

#define SEM_PTHIEFCOUNT 21					#define SEM_PTHIEFCOUNT 21
#define SEM_THIEVESWAITING 22					#define SEM_THIEVESWAITING 22
#define SEM_THIEFFINISH 23					#define SEM_THIEFFINISH 23

#define MAX_SEMAPHORES 24					#define MAX_SEMAPHORES 24

/* System constants used to control simulation termination */	/* System constants used to control simulation termination */
#define MAX_SHEEP_EATEN 36 					#define MAX_SHEEP_EATEN 36 
#define MAX_COWS_EATEN 12					#define MAX_COWS_EATEN 12
#define MAX_DEFEATED_HUNTERS 48					#define MAX_DEFEATED_HUNTERS 48
#define MAX_DEFEATED_THIEVES 36					#define MAX_DEFEATED_THIEVES 36
#define MAX_COWS_CREATED 80					#define MAX_COWS_CREATED 80
#define MIN_TREASURE_IN_HOARD 0					#define MIN_TREASURE_IN_HOARD 0
#define MAX_TREASURE_IN_HOARD 1000				#define MAX_TREASURE_IN_HOARD 1000
#define INITIAL_TREASURE_IN_HOARD 500				#define INITIAL_TREASURE_IN_HOARD 500

/* Simulation variables */					/* Simulation variables */
#define SECONDS_TO_MICROSECONDS 1000000				#define SECONDS_TO_MICROSECONDS 1000000
// This should be 10 minutes, but that will make the simulati <
// Smaug will nap for 2 seconds, but change to 10*60 = 600 se <
#define SMAUG_NAP_LENGTH_US 2*SECONDS_TO_MICROSECONDS		#define SMAUG_NAP_LENGTH_US 2*SECONDS_TO_MICROSECONDS
#define JEWELS_FROM_HUNTER_WIN 10				#define JEWELS_FROM_HUNTER_WIN 10
#define JEWELS_FROM_HUNTER_LOSE 5				#define JEWELS_FROM_HUNTER_LOSE 5
#define JEWELS_FROM_THIEF_WIN 8					#define JEWELS_FROM_THIEF_WIN 8
#define JEWELS_FROM_THIEF_LOSE 20				#define JEWELS_FROM_THIEF_LOSE 20

/* System constants to specify size of groups of cows*/		/* System constants to specify size of groups of cows*/
#define SHEEP_IN_GROUP 3					#define SHEEP_IN_GROUP 3
#define COWS_IN_GROUP 1						#define COWS_IN_GROUP 1

/* CREATING YOUR SEMAPHORES */					/* CREATING YOUR SEMAPHORES */
int semID; 							int semID; 

union semun {							union semun {
	int val;							int val;
	struct semid_ds *buf;						struct semid_ds *buf;
	ushort *array;							ushort *array;
} seminfo;							} seminfo;

struct timeval startTime;					struct timeval startTime;


/*  Pointers and ids for shared memory segments */		/*  Pointers and ids for shared memory segments */
int *terminateFlagp = NULL;					int *terminateFlagp = NULL;
int terminateFlag = 0;						int terminateFlag = 0;

int *sheepMealFlagp = NULL;					int *sheepMealFlagp = NULL;
int *sheepCounterp = NULL;					int *sheepCounterp = NULL;
int *sheepEatenCounterp = NULL;					int *sheepEatenCounterp = NULL;
int sheepMealFlag = 0;						int sheepMealFlag = 0;
int sheepCounter = 0;						int sheepCounter = 0;
int sheepEatenCounter = 0;					int sheepEatenCounter = 0;

int *cowMealFlagP = NULL;					int *cowMealFlagP = NULL;
int *cowCounterp = NULL;					int *cowCounterp = NULL;
int *cowsEatenCounterp = NULL;					int *cowsEatenCounterp = NULL;
int cowMealFlag = 0;						int cowMealFlag = 0;
int cowCounter = 0;						int cowCounter = 0;
int cowsEatenCounter = 0;					int cowsEatenCounter = 0;

int *hunterCounterp = NULL;					int *hunterCounterp = NULL;
int hunterCounter = 0;						int hunterCounter = 0;
int *thiefCounterp = NULL;					int *thiefCounterp = NULL;
int thiefCounter = 0;						int thiefCounter = 0;

/* Main processID for output purposes */		      |	/* Group IDs for managing/removing processes */
int parentProcessID = -1;					int parentProcessID = -1;
							      >	int smaugProcessID = -1;
							      >	int sheepProcessGID = -1;
							      >	int cowProcessGID = -1;
							      >	int hunterProcessGID = -1;
							      >	int thiefProcessGID = -1;
							      >

/* Define the semaphore operations for each semaphore */	/* Define the semaphore operations for each semaphore */
/* Arguments of each definition are: */				/* Arguments of each definition are: */
/* Name of semaphore on which the operation is done */		/* Name of semaphore on which the operation is done */
/* Increment (amount added to the semaphore when operation ex	/* Increment (amount added to the semaphore when operation ex
/* Flag values (block when semaphore <0, enable undo ...)*/	/* Flag values (block when semaphore <0, enable undo ...)*/

/*Number in group semaphores*/					/*Number in group semaphores*/
struct sembuf WaitSheepInGroup={SEM_SHEEPINGROUP, -1, 0};	struct sembuf WaitSheepInGroup={SEM_SHEEPINGROUP, -1, 0};
struct sembuf SignalSheepInGroup={SEM_SHEEPINGROUP, 1, 0};	struct sembuf SignalSheepInGroup={SEM_SHEEPINGROUP, 1, 0};
struct sembuf WaitCowsInGroup={SEM_COWSINGROUP, -1, 0};		struct sembuf WaitCowsInGroup={SEM_COWSINGROUP, -1, 0};
struct sembuf SignalCowsInGroup={SEM_COWSINGROUP, 1, 0};	struct sembuf SignalCowsInGroup={SEM_COWSINGROUP, 1, 0};

/*Number in group mutexes*/					/*Number in group mutexes*/
struct sembuf WaitProtectSheepMealFlag={SEM_PSHEEPMEALFLAG, -	struct sembuf WaitProtectSheepMealFlag={SEM_PSHEEPMEALFLAG, -
struct sembuf SignalProtectSheepMealFlag={SEM_PSHEEPMEALFLAG,	struct sembuf SignalProtectSheepMealFlag={SEM_PSHEEPMEALFLAG,
struct sembuf WaitProtectSheepInGroup={SEM_PSHEEPINGROUP, -1,	struct sembuf WaitProtectSheepInGroup={SEM_PSHEEPINGROUP, -1,
struct sembuf SignalProtectSheepInGroup={SEM_PSHEEPINGROUP, 1	struct sembuf SignalProtectSheepInGroup={SEM_PSHEEPINGROUP, 1

struct sembuf WaitProtectCowMealFlag={SEM_PCOWMEALFLAG, -1, 0	struct sembuf WaitProtectCowMealFlag={SEM_PCOWMEALFLAG, -1, 0
struct sembuf SignalProtectCowMealFlag={SEM_PCOWMEALFLAG, 1, 	struct sembuf SignalProtectCowMealFlag={SEM_PCOWMEALFLAG, 1, 
struct sembuf WaitProtectCowsInGroup={SEM_PCOWSINGROUP, -1, 0	struct sembuf WaitProtectCowsInGroup={SEM_PCOWSINGROUP, -1, 0
struct sembuf SignalProtectCowsInGroup={SEM_PCOWSINGROUP, 1, 	struct sembuf SignalProtectCowsInGroup={SEM_PCOWSINGROUP, 1, 

struct sembuf WaitProtectThiefCount={SEM_PTHIEFCOUNT, -1, 0};	struct sembuf WaitProtectThiefCount={SEM_PTHIEFCOUNT, -1, 0};
struct sembuf SignalProtectThiefCount={SEM_PTHIEFCOUNT, 1, 0}	struct sembuf SignalProtectThiefCount={SEM_PTHIEFCOUNT, 1, 0}
struct sembuf WaitProtectHunterCount={SEM_PHUNTERCOUNT, -1, 0	struct sembuf WaitProtectHunterCount={SEM_PHUNTERCOUNT, -1, 0
struct sembuf SignalProtectHunterCount={SEM_PHUNTERCOUNT, 1, 	struct sembuf SignalProtectHunterCount={SEM_PHUNTERCOUNT, 1, 

/*Number waiting sempahores*/					/*Number waiting sempahores*/
struct sembuf WaitSheepWaiting={SEM_SHEEPWAITING, -1, 0};	struct sembuf WaitSheepWaiting={SEM_SHEEPWAITING, -1, 0};
struct sembuf SignalSheepWaiting={SEM_SHEEPWAITING, 1, 0};	struct sembuf SignalSheepWaiting={SEM_SHEEPWAITING, 1, 0};
struct sembuf WaitCowsWaiting={SEM_COWSWAITING, -1, 0};		struct sembuf WaitCowsWaiting={SEM_COWSWAITING, -1, 0};
struct sembuf SignalCowsWaiting={SEM_COWSWAITING, 1, 0};	struct sembuf SignalCowsWaiting={SEM_COWSWAITING, 1, 0};

struct sembuf WaitHuntersWaiting={SEM_HUNTERSWAITING, -1, 0};	struct sembuf WaitHuntersWaiting={SEM_HUNTERSWAITING, -1, 0};
struct sembuf SignalHuntersWaiting={SEM_HUNTERSWAITING, 1, 0}	struct sembuf SignalHuntersWaiting={SEM_HUNTERSWAITING, 1, 0}
struct sembuf WaitHunterFinish={SEM_HUNTERFINISH, -1, 0};	struct sembuf WaitHunterFinish={SEM_HUNTERFINISH, -1, 0};
struct sembuf SignalHunterFinish={SEM_HUNTERFINISH, 1, 0};	struct sembuf SignalHunterFinish={SEM_HUNTERFINISH, 1, 0};

struct sembuf WaitThievesWaiting={SEM_THIEVESWAITING, -1, 0};	struct sembuf WaitThievesWaiting={SEM_THIEVESWAITING, -1, 0};
struct sembuf SignalThievesWaiting={SEM_THIEVESWAITING, 1, 0}	struct sembuf SignalThievesWaiting={SEM_THIEVESWAITING, 1, 0}
struct sembuf WaitThiefFinish={SEM_THIEFFINISH, -1, 0};		struct sembuf WaitThiefFinish={SEM_THIEFFINISH, -1, 0};
struct sembuf SignalThiefFinish={SEM_THIEFFINISH, 1, 0};	struct sembuf SignalThiefFinish={SEM_THIEFFINISH, 1, 0};

/*Number eaten or fought semaphores*/				/*Number eaten or fought semaphores*/
struct sembuf WaitSheepEaten={SEM_SHEEPEATEN, -1, 0};		struct sembuf WaitSheepEaten={SEM_SHEEPEATEN, -1, 0};
struct sembuf SignalSheepEaten={SEM_SHEEPEATEN, 1, 0};		struct sembuf SignalSheepEaten={SEM_SHEEPEATEN, 1, 0};
struct sembuf WaitCowsEaten={SEM_COWSEATEN, -1, 0};		struct sembuf WaitCowsEaten={SEM_COWSEATEN, -1, 0};
struct sembuf SignalCowsEaten={SEM_COWSEATEN, 1, 0};		struct sembuf SignalCowsEaten={SEM_COWSEATEN, 1, 0};

/*Number eaten or fought mutexes*/				/*Number eaten or fought mutexes*/
struct sembuf WaitProtectSheepEaten={SEM_PSHEEPEATEN, -1, 0};	struct sembuf WaitProtectSheepEaten={SEM_PSHEEPEATEN, -1, 0};
struct sembuf SignalProtectSheepEaten={SEM_PSHEEPEATEN, 1, 0}	struct sembuf SignalProtectSheepEaten={SEM_PSHEEPEATEN, 1, 0}
struct sembuf WaitProtectCowsEaten={SEM_PCOWSEATEN, -1, 0};	struct sembuf WaitProtectCowsEaten={SEM_PCOWSEATEN, -1, 0};
struct sembuf SignalProtectCowsEaten={SEM_PCOWSEATEN, 1, 0};	struct sembuf SignalProtectCowsEaten={SEM_PCOWSEATEN, 1, 0};

/*Number Dead semaphores*/					/*Number Dead semaphores*/
struct sembuf WaitSheepDead={SEM_SHEEPDEAD, -1, 0};		struct sembuf WaitSheepDead={SEM_SHEEPDEAD, -1, 0};
struct sembuf SignalSheepDead={SEM_SHEEPDEAD, 1, 0};		struct sembuf SignalSheepDead={SEM_SHEEPDEAD, 1, 0};
struct sembuf WaitCowsDead={SEM_COWSDEAD, -1, 0};		struct sembuf WaitCowsDead={SEM_COWSDEAD, -1, 0};
struct sembuf SignalCowsDead={SEM_COWSDEAD, 1, 0};		struct sembuf SignalCowsDead={SEM_COWSDEAD, 1, 0};

/*Dragon Semaphores*/						/*Dragon Semaphores*/
struct sembuf WaitDragonEating={SEM_DRAGONEATING, -1, 0};	struct sembuf WaitDragonEating={SEM_DRAGONEATING, -1, 0};
struct sembuf SignalDragonEating={SEM_DRAGONEATING, 1, 0};	struct sembuf SignalDragonEating={SEM_DRAGONEATING, 1, 0};
struct sembuf WaitDragonFighting={SEM_DRAGONFIGHTING, -1, 0};	struct sembuf WaitDragonFighting={SEM_DRAGONFIGHTING, -1, 0};
struct sembuf SignalDragonFighting={SEM_DRAGONFIGHTING, 1, 0}	struct sembuf SignalDragonFighting={SEM_DRAGONFIGHTING, 1, 0}
struct sembuf WaitDragonSleeping={SEM_DRAGONSLEEPING, -1, 0};	struct sembuf WaitDragonSleeping={SEM_DRAGONSLEEPING, -1, 0};
struct sembuf SignalDragonSleeping={SEM_DRAGONSLEEPING, 1, 0}	struct sembuf SignalDragonSleeping={SEM_DRAGONSLEEPING, 1, 0}

/*Termination Mutex*/						/*Termination Mutex*/
struct sembuf WaitProtectTerminate={SEM_PTERMINATE, -1, 0};	struct sembuf WaitProtectTerminate={SEM_PTERMINATE, -1, 0};
struct sembuf SignalProtectTerminate={SEM_PTERMINATE, 1, 0};	struct sembuf SignalProtectTerminate={SEM_PTERMINATE, 1, 0};


double timeChange( struct timeval starttime );			double timeChange( struct timeval starttime );
void initialize();						void initialize();
void terminateSimulation();					void terminateSimulation();
void releaseSemandMem();					void releaseSemandMem();
void semopChecked(int semaphoreID, struct sembuf *operation, 	void semopChecked(int semaphoreID, struct sembuf *operation, 
void semctlChecked(int semaphoreID, int semNum, int flag, uni	void semctlChecked(int semaphoreID, int semNum, int flag, uni


void *smaug(void *smaugWinProbP)			      |	void smaug(const int smaugWinProb)
{								{
	const int smaugWinProb = *(int*)smaugWinProbP;	      <
	int k;								int k;
	unsigned long localThreadID = (unsigned long)pthread_ |		int localpid;

	/* local counters used only for smaug routine */		/* local counters used only for smaug routine */
	int numJewels = INITIAL_TREASURE_IN_HOARD;			int numJewels = INITIAL_TREASURE_IN_HOARD;
	int sheepEatenTotal = 0;					int sheepEatenTotal = 0;
	int cowsEatenTotal = 0;						int cowsEatenTotal = 0;
	int thievesDefeatedTotal = 0;					int thievesDefeatedTotal = 0;
	int huntersDefeatedTotal = 0;					int huntersDefeatedTotal = 0;
	int sleepThisIteration = 1;					int sleepThisIteration = 1;
	int terminateNow = 0;						int terminateNow = 0;
	/* Initialize random number generator*/				/* Initialize random number generator*/
	/* Random numbers are used to determine the time betw		/* Random numbers are used to determine the time betw
							      |		smaugProcessID = getpid();
	printf("SMAUGSMAUGSMAUGSMAUGSMAU   PTHREADID is %lu \ |		printf("SMAUGSMAUGSMAUGSMAUGSMAU   PID is %d \n", sma
							      |		localpid = smaugProcessID;
	while (terminateNow == 0) {					while (terminateNow == 0) {		
		// Smaug goes to sleep if nothing happens and			// Smaug goes to sleep if nothing happens and
		if(sleepThisIteration == 1) {					if(sleepThisIteration == 1) {
			printf("SMAUGSMAUGSMAUGSMAUGSMAU   Sm				printf("SMAUGSMAUGSMAUGSMAUGSMAU   Sm
			// We must reset the semaphore to pre				// We must reset the semaphore to pre
			seminfo.val = 0;						seminfo.val = 0;
			semctlChecked(semID, SEM_DRAGONSLEEPI				semctlChecked(semID, SEM_DRAGONSLEEPI
			semopChecked(semID, &WaitDragonSleepi				semopChecked(semID, &WaitDragonSleepi
			printf("SMAUGSMAUGSMAUGSMAUGSMAU   Sm				printf("SMAUGSMAUGSMAUGSMAUGSMAU   Sm
			printf("SMAUGSMAUGSMAUGSMAUGSMAU   Sm				printf("SMAUGSMAUGSMAUGSMAUGSMAU   Sm
		} else {							} else {
			sleepThisIteration = 1;						sleepThisIteration = 1;
		}								}

		semopChecked(semID, &WaitProtectThiefCount, 1			semopChecked(semID, &WaitProtectThiefCount, 1
		semopChecked(semID, &WaitProtectHunterCount, 			semopChecked(semID, &WaitProtectHunterCount, 
		if( *hunterCounterp + *thiefCounterp > 0) {			if( *hunterCounterp + *thiefCounterp > 0) {
			while( *hunterCounterp + *thiefCounte				while( *hunterCounterp + *thiefCounte
				semopChecked(semID, &SignalPr					semopChecked(semID, &SignalPr
				if(*thiefCounterp > 0) {					if(*thiefCounterp > 0) {
					*thiefCounterp = *thi						*thiefCounterp = *thi
					semopChecked(semID, &						semopChecked(semID, &
					// Wake thief from wa						// Wake thief from wa
					semopChecked(semID, &						semopChecked(semID, &
					printf("SMAUGSMAUGSMA						printf("SMAUGSMAUGSMA
					if( rand() % 100 <= s						if( rand() % 100 <= s
						thievesDefeat							thievesDefeat
						numJewels += 							numJewels += 
						printf("SMAUG							printf("SMAUG
						printf("SMAUG							printf("SMAUG
						if(thievesDef							if(thievesDef
							print								print
							termi								termi
							// Sh <
							*term								*term
							break								break
						}								}
					} else {							} else {
						numJewels -= 							numJewels -= 
						printf("SMAUG							printf("SMAUG
						printf("SMAUG							printf("SMAUG
					}								}
					if( numJewels < MIN_T						if( numJewels < MIN_T
						char* conditi							char* conditi
						printf("SMAUG							printf("SMAUG
						terminateNow 							terminateNow 
						*terminateFla							*terminateFla
						break;								break;
					}								}
					semopChecked(semID, &						semopChecked(semID, &
					printf("SMAUGSMAUGSMA |						printf("SMAUGSMAUGSMA
					// Nap and breath						// Nap and breath
					printf("SMAUGSMAUGSMA						printf("SMAUGSMAUGSMA
					usleep(SMAUG_NAP_LENG						usleep(SMAUG_NAP_LENG
					printf("SMAUGSMAUGSMA						printf("SMAUGSMAUGSMA
				} else {							} else {
					semopChecked(semID, &						semopChecked(semID, &
					semopChecked(semID, &						semopChecked(semID, &
					if(*hunterCounterp > 						if(*hunterCounterp > 
						*hunterCounte							*hunterCounte
						printf("SMAUG							printf("SMAUG
						semopChecked(							semopChecked(
						// Wake hunte							// Wake hunte
						semopChecked(							semopChecked(
						printf("SMAUG							printf("SMAUG
						if( rand() % 							if( rand() % 
							hunte								hunte
							numJe								numJe
							print								print
							print								print
							if(hu								if(hu
															
															
															
															
							}								}
						} else {							} else {
							numJe								numJe
							print								print
							print								print
						}								}
						if( numJewels							if( numJewels
							char*								char*
							print								print
							termi								termi
							*term								*term
							break								break
						}								}
						semopChecked(							semopChecked(
						printf("SMAUG |							printf("SMAUG
						// Nap and br							// Nap and br
						printf("SMAUG							printf("SMAUG
						usleep(SMAUG_							usleep(SMAUG_
						printf("SMAUG							printf("SMAUG
					} else {							} else {
						semopChecked(							semopChecked(
					}								}
				}								}
				// Apply protection for next 					// Apply protection for next 
				semopChecked(semID, &WaitProt					semopChecked(semID, &WaitProt
				semopChecked(semID, &WaitProt					semopChecked(semID, &WaitProt
			}								}
			// Release protection						// Release protection
			semopChecked(semID, &SignalProtectHun				semopChecked(semID, &SignalProtectHun
			semopChecked(semID, &SignalProtectThi				semopChecked(semID, &SignalProtectThi
		} else {							} else {
			// Release protection						// Release protection
			semopChecked(semID, &SignalProtectHun				semopChecked(semID, &SignalProtectHun
			semopChecked(semID, &SignalProtectThi				semopChecked(semID, &SignalProtectThi

			// Check animals						// Check animals
			semopChecked(semID, &WaitProtectCowMe				semopChecked(semID, &WaitProtectCowMe
			semopChecked(semID, &WaitProtectSheep				semopChecked(semID, &WaitProtectSheep
			// If there's a meal of x cows and y 				// If there's a meal of x cows and y 
			while( *cowMealFlagP >= 1 && *sheepMe				while( *cowMealFlagP >= 1 && *sheepMe
				*sheepMealFlagp = *sheepMealF					*sheepMealFlagp = *sheepMealF
				*cowMealFlagP = *cowMealFlagP					*cowMealFlagP = *cowMealFlagP
				int mealsLeft = *cowMealFlagP					int mealsLeft = *cowMealFlagP
				printf("SMAUGSMAUGSMAUGSMAUGS					printf("SMAUGSMAUGSMAUGSMAUGS
				semopChecked(semID, &SignalPr					semopChecked(semID, &SignalPr
				semopChecked(semID, &SignalPr					semopChecked(semID, &SignalPr
				printf("SMAUGSMAUGSMAUGSMAUGS					printf("SMAUGSMAUGSMAUGSMAUGS
				for( k = 0; k < SHEEP_IN_GROU					for( k = 0; k < SHEEP_IN_GROU
					semopChecked(semID, &						semopChecked(semID, &
					printf("SMAUGSMAUGSMA						printf("SMAUGSMAUGSMA
				}								}
				for( k = 0; k < COWS_IN_GROUP					for( k = 0; k < COWS_IN_GROUP
					semopChecked(semID, &						semopChecked(semID, &
					printf("SMAUGSMAUGSMA						printf("SMAUGSMAUGSMA
				}								}

				/*Smaug waits to eat*/						/*Smaug waits to eat*/
				semopChecked(semID, &WaitDrag					semopChecked(semID, &WaitDrag
				for( k = 0; k < SHEEP_IN_GROU					for( k = 0; k < SHEEP_IN_GROU
					semopChecked(semID, &						semopChecked(semID, &
					sheepEatenTotal++;						sheepEatenTotal++;
					printf("SMAUGSMAUGSMA						printf("SMAUGSMAUGSMA
				}								}
				for( k = 0; k < COWS_IN_GROUP					for( k = 0; k < COWS_IN_GROUP
					semopChecked(semID, &						semopChecked(semID, &
					cowsEatenTotal++;						cowsEatenTotal++;
					printf("SMAUGSMAUGSMA						printf("SMAUGSMAUGSMA
				}								}
				printf("SMAUGSMAUGSMAUGSMAUGS |					printf("SMAUGSMAUGSMAUGSMAUGS

				// Terminate if terminate con					// Terminate if terminate con
				if(sheepEatenTotal >= MAX_SHE					if(sheepEatenTotal >= MAX_SHE
					printf("SMAUGSMAUGSMA						printf("SMAUGSMAUGSMA
					terminateNow = 1;						terminateNow = 1;
					*terminateFlagp= 1;						*terminateFlagp= 1;
					break; 								break; 
				}								}
				if(cowsEatenTotal >= MAX_COWS					if(cowsEatenTotal >= MAX_COWS
					printf("SMAUGSMAUGSMA						printf("SMAUGSMAUGSMA
					terminateNow = 1;						terminateNow = 1;
					*terminateFlagp= 1;						*terminateFlagp= 1;
					break; 								break; 
				}								}


				/* Smaug checks to see if ano					/* Smaug checks to see if ano
				printf("SMAUGSMAUGSMAUGSMAUGS					printf("SMAUGSMAUGSMAUGSMAUGS
				semopChecked(semID, &WaitProt					semopChecked(semID, &WaitProt
				if( *cowMealFlagP > 0  ) {					if( *cowMealFlagP > 0  ) {
					// Mutex check for sh						// Mutex check for sh
					semopChecked(semID, &						semopChecked(semID, &
					if(*sheepMealFlagp > 						if(*sheepMealFlagp > 
						semopChecked(							semopChecked(
						semopChecked(							semopChecked(
						// Check if t							// Check if t
						if( *thiefCou							if( *thiefCou
							semop								semop
							semop								semop
						//	semop |								semop
						//	semop |								semop
							// Th								// Th
							sleep								sleep
							break								break
						} else {							} else {
							semop								semop
							semop								semop
							// No								// No
							print								print
							conti								conti
						}								}
					} else {							} else {
						// Cow and sh |							semopChecked(
						//semopChecke |							semopChecked(
						//semopChecke <
						// Break out 							// Break out 
						break;								break;
					}								}
				}								}
							      >					else {
							      >						semopChecked(semID, &
							      >						printf("SMAUGSMAUGSMA
							      >						semopChecked(semID, &
							      >						printf("SMAUGSMAUGSMA
							      >						break;
							      >					}
							      >				} /*else {
							      >					// Resume execution at beginn
							      >					semopChecked(semID, &SignalPr
				semopChecked(semID, &SignalPr					semopChecked(semID, &SignalPr
			} 				      |					continue;
							      >				}*/
			semopChecked(semID, &SignalProtectShe				semopChecked(semID, &SignalProtectShe
			semopChecked(semID, &SignalProtectCow				semopChecked(semID, &SignalProtectCow
		}								}

	}								}
	return NULL;					      <
}								}


void initialize()						void initialize()
{								{
	/* Init semaphores */						/* Init semaphores */
	semID=semget(IPC_PRIVATE, MAX_SEMAPHORES, 0666 | IPC_		semID=semget(IPC_PRIVATE, MAX_SEMAPHORES, 0666 | IPC_


	/* Init to zero, no elements are produced yet */		/* Init to zero, no elements are produced yet */
	seminfo.val=0;							seminfo.val=0;
	semctlChecked(semID, SEM_SHEEPINGROUP, SETVAL, seminf		semctlChecked(semID, SEM_SHEEPINGROUP, SETVAL, seminf
	semctlChecked(semID, SEM_SHEEPWAITING, SETVAL, seminf		semctlChecked(semID, SEM_SHEEPWAITING, SETVAL, seminf
	semctlChecked(semID, SEM_SHEEPEATEN, SETVAL, seminfo)		semctlChecked(semID, SEM_SHEEPEATEN, SETVAL, seminfo)
	semctlChecked(semID, SEM_SHEEPDEAD, SETVAL, seminfo);		semctlChecked(semID, SEM_SHEEPDEAD, SETVAL, seminfo);

	semctlChecked(semID, SEM_COWSINGROUP, SETVAL, seminfo		semctlChecked(semID, SEM_COWSINGROUP, SETVAL, seminfo
	semctlChecked(semID, SEM_COWSWAITING, SETVAL, seminfo		semctlChecked(semID, SEM_COWSWAITING, SETVAL, seminfo
	semctlChecked(semID, SEM_COWSEATEN, SETVAL, seminfo);		semctlChecked(semID, SEM_COWSEATEN, SETVAL, seminfo);
	semctlChecked(semID, SEM_COWSDEAD, SETVAL, seminfo);		semctlChecked(semID, SEM_COWSDEAD, SETVAL, seminfo);

	semctlChecked(semID, SEM_HUNTERSWAITING, SETVAL, semi		semctlChecked(semID, SEM_HUNTERSWAITING, SETVAL, semi
	semctlChecked(semID, SEM_HUNTERFINISH, SETVAL, seminf		semctlChecked(semID, SEM_HUNTERFINISH, SETVAL, seminf
	semctlChecked(semID, SEM_THIEVESWAITING, SETVAL, semi		semctlChecked(semID, SEM_THIEVESWAITING, SETVAL, semi
	semctlChecked(semID, SEM_THIEFFINISH, SETVAL, seminfo		semctlChecked(semID, SEM_THIEFFINISH, SETVAL, seminfo

	semctlChecked(semID, SEM_DRAGONFIGHTING, SETVAL, semi		semctlChecked(semID, SEM_DRAGONFIGHTING, SETVAL, semi
	semctlChecked(semID, SEM_DRAGONSLEEPING, SETVAL, semi		semctlChecked(semID, SEM_DRAGONSLEEPING, SETVAL, semi
	semctlChecked(semID, SEM_DRAGONEATING, SETVAL, seminf		semctlChecked(semID, SEM_DRAGONEATING, SETVAL, seminf
	printf("!!INIT!!INIT!!INIT!!  semaphores initiialized		printf("!!INIT!!INIT!!INIT!!  semaphores initiialized
									
	/* Init Mutex to one */						/* Init Mutex to one */
	seminfo.val=1;							seminfo.val=1;
	semctlChecked(semID, SEM_PTERMINATE, SETVAL, seminfo)		semctlChecked(semID, SEM_PTERMINATE, SETVAL, seminfo)

	semctlChecked(semID, SEM_PSHEEPMEALFLAG, SETVAL, semi		semctlChecked(semID, SEM_PSHEEPMEALFLAG, SETVAL, semi
	semctlChecked(semID, SEM_PSHEEPINGROUP, SETVAL, semin		semctlChecked(semID, SEM_PSHEEPINGROUP, SETVAL, semin
	semctlChecked(semID, SEM_PSHEEPEATEN, SETVAL, seminfo		semctlChecked(semID, SEM_PSHEEPEATEN, SETVAL, seminfo

	semctlChecked(semID, SEM_PCOWMEALFLAG, SETVAL, seminf		semctlChecked(semID, SEM_PCOWMEALFLAG, SETVAL, seminf
	semctlChecked(semID, SEM_PCOWSINGROUP, SETVAL, seminf		semctlChecked(semID, SEM_PCOWSINGROUP, SETVAL, seminf
	semctlChecked(semID, SEM_PCOWSEATEN, SETVAL, seminfo)		semctlChecked(semID, SEM_PCOWSEATEN, SETVAL, seminfo)

	semctlChecked(semID, SEM_PTHIEFCOUNT, SETVAL, seminfo		semctlChecked(semID, SEM_PTHIEFCOUNT, SETVAL, seminfo
	semctlChecked(semID, SEM_PHUNTERCOUNT, SETVAL, seminf		semctlChecked(semID, SEM_PHUNTERCOUNT, SETVAL, seminf
	printf("!!INIT!!INIT!!INIT!!  mutexes initiialized\n"		printf("!!INIT!!INIT!!INIT!!  mutexes initiialized\n"


	/* Now we create and attach  the segments of shared m		/* Now we create and attach  the segments of shared m
	if ((terminateFlag = shmget(IPC_PRIVATE, sizeof(int),		if ((terminateFlag = shmget(IPC_PRIVATE, sizeof(int),
		printf("!!INIT!!INIT!!INIT!!  shm not created			printf("!!INIT!!INIT!!INIT!!  shm not created
		exit(1);							exit(1);
	}								}
	else {								else {
		printf("!!INIT!!INIT!!INIT!!  shm created for			printf("!!INIT!!INIT!!INIT!!  shm created for
	}								}
	if ((cowMealFlag = shmget(IPC_PRIVATE, sizeof(int), I		if ((cowMealFlag = shmget(IPC_PRIVATE, sizeof(int), I
		printf("!!INIT!!INIT!!INIT!!  shm not created			printf("!!INIT!!INIT!!INIT!!  shm not created
		exit(1);							exit(1);
	}								}
	else {								else {
		printf("!!INIT!!INIT!!INIT!!  shm created for			printf("!!INIT!!INIT!!INIT!!  shm created for
	}								}
	if ((cowCounter = shmget(IPC_PRIVATE, sizeof(int), IP		if ((cowCounter = shmget(IPC_PRIVATE, sizeof(int), IP
		printf("!!INIT!!INIT!!INIT!!  shm not created			printf("!!INIT!!INIT!!INIT!!  shm not created
		exit(1);							exit(1);
	}								}
	else {								else {
		printf("!!INIT!!INIT!!INIT!!  shm created for			printf("!!INIT!!INIT!!INIT!!  shm created for
	}								}
	if ((cowsEatenCounter = shmget(IPC_PRIVATE, sizeof(in		if ((cowsEatenCounter = shmget(IPC_PRIVATE, sizeof(in
		printf("!!INIT!!INIT!!INIT!!  shm not created			printf("!!INIT!!INIT!!INIT!!  shm not created
		exit(1);							exit(1);
	}								}
	else {								else {
		printf("!!INIT!!INIT!!INIT!!  shm created for			printf("!!INIT!!INIT!!INIT!!  shm created for
	}								}
	if ((sheepMealFlag = shmget(IPC_PRIVATE, sizeof(int),		if ((sheepMealFlag = shmget(IPC_PRIVATE, sizeof(int),
		printf("!!INIT!!INIT!!INIT!!  shm not created			printf("!!INIT!!INIT!!INIT!!  shm not created
		exit(1);							exit(1);
	}								}
	else {								else {
		printf("!!INIT!!INIT!!INIT!!  shm created for			printf("!!INIT!!INIT!!INIT!!  shm created for
	}								}
	if ((sheepCounter = shmget(IPC_PRIVATE, sizeof(int), 		if ((sheepCounter = shmget(IPC_PRIVATE, sizeof(int), 
		printf("!!INIT!!INIT!!INIT!!  shm not created			printf("!!INIT!!INIT!!INIT!!  shm not created
		exit(1);							exit(1);
	}								}
	else {								else {
		printf("!!INIT!!INIT!!INIT!!  shm created for			printf("!!INIT!!INIT!!INIT!!  shm created for
	}								}
	if ((sheepEatenCounter = shmget(IPC_PRIVATE, sizeof(i		if ((sheepEatenCounter = shmget(IPC_PRIVATE, sizeof(i
		printf("!!INIT!!INIT!!INIT!!  shm not created			printf("!!INIT!!INIT!!INIT!!  shm not created
		exit(1);							exit(1);
	}								}
	else {								else {
		printf("!!INIT!!INIT!!INIT!!  shm created for			printf("!!INIT!!INIT!!INIT!!  shm created for
	}								}
	// hunter							// hunter
	if ((hunterCounter = shmget(IPC_PRIVATE, sizeof(int),		if ((hunterCounter = shmget(IPC_PRIVATE, sizeof(int),
		printf("!!INIT!!INIT!!INIT!!  shm not created			printf("!!INIT!!INIT!!INIT!!  shm not created
		exit(1);							exit(1);
	}								}
	else {								else {
		printf("!!INIT!!INIT!!INIT!!  shm created for			printf("!!INIT!!INIT!!INIT!!  shm created for
	}								}
	if ((thiefCounter = shmget(IPC_PRIVATE, sizeof(int), 		if ((thiefCounter = shmget(IPC_PRIVATE, sizeof(int), 
		printf("!!INIT!!INIT!!INIT!!  shm not created			printf("!!INIT!!INIT!!INIT!!  shm not created
		exit(1);							exit(1);
	}								}
	else {								else {
		printf("!!INIT!!INIT!!INIT!!  shm created for			printf("!!INIT!!INIT!!INIT!!  shm created for
	}								}

	/* Now we attach the segment to our data space.  */		/* Now we attach the segment to our data space.  */
	if ((terminateFlagp = shmat(terminateFlag, NULL, 0)) 		if ((terminateFlagp = shmat(terminateFlag, NULL, 0)) 
		printf("!!INIT!!INIT!!INIT!!  shm not attache			printf("!!INIT!!INIT!!INIT!!  shm not attache
		exit(1);							exit(1);
	}								}
	else {								else {
		printf("!!INIT!!INIT!!INIT!!  shm attached fo			printf("!!INIT!!INIT!!INIT!!  shm attached fo
	}								}
	if ((cowMealFlagP = shmat(cowMealFlag, NULL, 0)) == (		if ((cowMealFlagP = shmat(cowMealFlag, NULL, 0)) == (
		printf("!!INIT!!INIT!!INIT!!  shm not attache			printf("!!INIT!!INIT!!INIT!!  shm not attache
		exit(1);							exit(1);
	}								}
	else {								else {
		printf("!!INIT!!INIT!!INIT!!  shm attached fo			printf("!!INIT!!INIT!!INIT!!  shm attached fo
	}								}
	if ((cowCounterp = shmat(cowCounter, NULL, 0)) == (in		if ((cowCounterp = shmat(cowCounter, NULL, 0)) == (in
		printf("!!INIT!!INIT!!INIT!!  shm not attache			printf("!!INIT!!INIT!!INIT!!  shm not attache
		exit(1);							exit(1);
	} else {							} else {
		printf("!!INIT!!INIT!!INIT!!  shm attached fo			printf("!!INIT!!INIT!!INIT!!  shm attached fo
	}								}
	if ((cowsEatenCounterp = shmat(cowsEatenCounter, NULL		if ((cowsEatenCounterp = shmat(cowsEatenCounter, NULL
		printf("!!INIT!!INIT!!INIT!!  shm not attache			printf("!!INIT!!INIT!!INIT!!  shm not attache
		exit(1);							exit(1);
	} else {							} else {
		printf("!!INIT!!INIT!!INIT!!  shm attached fo			printf("!!INIT!!INIT!!INIT!!  shm attached fo
	}								}
	if ((sheepMealFlagp = shmat(sheepMealFlag, NULL, 0)) 		if ((sheepMealFlagp = shmat(sheepMealFlag, NULL, 0)) 
		printf("!!INIT!!INIT!!INIT!!  shm not attache			printf("!!INIT!!INIT!!INIT!!  shm not attache
		exit(1);							exit(1);
	}								}
	else {								else {
		printf("!!INIT!!INIT!!INIT!!  shm attached fo			printf("!!INIT!!INIT!!INIT!!  shm attached fo
	}								}
	if ((sheepCounterp = shmat(sheepCounter, NULL, 0)) ==		if ((sheepCounterp = shmat(sheepCounter, NULL, 0)) ==
		printf("!!INIT!!INIT!!INIT!!  shm not attache			printf("!!INIT!!INIT!!INIT!!  shm not attache
		exit(1);							exit(1);
	}								}
	else {								else {
		printf("!!INIT!!INIT!!INIT!!  shm attached fo			printf("!!INIT!!INIT!!INIT!!  shm attached fo
	}								}
	if ((sheepEatenCounterp = shmat(sheepEatenCounter, NU		if ((sheepEatenCounterp = shmat(sheepEatenCounter, NU
		printf("!!INIT!!INIT!!INIT!!  shm not attache			printf("!!INIT!!INIT!!INIT!!  shm not attache
		exit(1);							exit(1);
	} else {							} else {
		printf("!!INIT!!INIT!!INIT!!  shm attached fo			printf("!!INIT!!INIT!!INIT!!  shm attached fo
	}								}
	// hunter							// hunter
	if ((hunterCounterp = shmat(hunterCounter, NULL, 0)) 		if ((hunterCounterp = shmat(hunterCounter, NULL, 0)) 
		printf("!!INIT!!INIT!!INIT!!  shm not attache			printf("!!INIT!!INIT!!INIT!!  shm not attache
		exit(1);							exit(1);
	} else {							} else {
		printf("!!INIT!!INIT!!INIT!!  shm attached fo			printf("!!INIT!!INIT!!INIT!!  shm attached fo
	}								}
	if ((thiefCounterp = shmat(thiefCounter, NULL, 0)) ==		if ((thiefCounterp = shmat(thiefCounter, NULL, 0)) ==
		printf("!!INIT!!INIT!!INIT!!  shm not attache			printf("!!INIT!!INIT!!INIT!!  shm not attache
		exit(1);							exit(1);
	} else {							} else {
		printf("!!INIT!!INIT!!INIT!!  shm attached fo			printf("!!INIT!!INIT!!INIT!!  shm attached fo
	}								}

	printf("!!INIT!!INIT!!INIT!!   initialize end\n");		printf("!!INIT!!INIT!!INIT!!   initialize end\n");
}								}


void *sheep(void *startTimeNp)				      |	void sheep(float startTimeN)
{								{
	// Cast void* to float*, then dereference float* to g |		int localpid;
	float startTimeN = *(float *)startTimeNp;	      <
	// Cast thread id to unsigned long since sometimes th <
	unsigned long localThreadID = (unsigned long)pthread_ <
	int k;								int k;
							      >		localpid = getpid();
							      >
							      >		setpgid(localpid, sheepProcessGID);

	/* graze */							/* graze */
	printf("SSSSSSS %8lu SSSSSSS   A sheep is born\n", lo |		printf("SSSSSSS %8d SSSSSSS   A sheep is born\n", loc
	if( startTimeN > 0) {						if( startTimeN > 0) {
		if( usleep( startTimeN) == -1){					if( usleep( startTimeN) == -1){
			/* exit when usleep interrupted by ki				/* exit when usleep interrupted by ki
			if(errno==EINTR)exit(4);					if(errno==EINTR)exit(4);
		}								}	
	}								}
	printf("SSSSSSS %8lu SSSSSSS   sheep grazes for %f ms |		printf("SSSSSSS %8d SSSSSSS   sheep grazes for %f ms\


	/* does this sheep complete a group of SHEEP_IN_GROUP		/* does this sheep complete a group of SHEEP_IN_GROUP
	/* if so wake up the dragon */					/* if so wake up the dragon */
	semopChecked(semID, &WaitProtectSheepInGroup, 1);		semopChecked(semID, &WaitProtectSheepInGroup, 1);
	semopChecked(semID, &SignalSheepInGroup, 1);			semopChecked(semID, &SignalSheepInGroup, 1);
	*sheepCounterp = *sheepCounterp + 1;				*sheepCounterp = *sheepCounterp + 1;
	printf("SSSSSSS %8lu SSSSSSS   %d  sheeps have been e |		printf("SSSSSSS %8d SSSSSSS   %d  sheeps have been en
	if( ( *sheepCounterp  >= SHEEP_IN_GROUP )) {			if( ( *sheepCounterp  >= SHEEP_IN_GROUP )) {
		*sheepCounterp = *sheepCounterp - SHEEP_IN_GR			*sheepCounterp = *sheepCounterp - SHEEP_IN_GR
		semopChecked(semID, &SignalProtectSheepInGrou			semopChecked(semID, &SignalProtectSheepInGrou
		for (k=0; k<SHEEP_IN_GROUP; k++){				for (k=0; k<SHEEP_IN_GROUP; k++){
			semopChecked(semID, &WaitSheepInGroup				semopChecked(semID, &WaitSheepInGroup
		}								}
		printf("SSSSSSS %8lu SSSSSSS   The last sheep |			printf("SSSSSSS %8d SSSSSSS   The last sheep 
		semopChecked(semID, &WaitProtectSheepMealFlag			semopChecked(semID, &WaitProtectSheepMealFlag
		*sheepMealFlagp = *sheepMealFlagp + 1;				*sheepMealFlagp = *sheepMealFlagp + 1;
		printf("SSSSSSS %8lu SSSSSSS   signal sheep m |			printf("SSSSSSS %8d SSSSSSS   signal sheep me
		semopChecked(semID, &SignalProtectSheepMealFl			semopChecked(semID, &SignalProtectSheepMealFl

		semopChecked(semID, &WaitProtectCowMealFlag, 			semopChecked(semID, &WaitProtectCowMealFlag, 
		if( *cowMealFlagP >= 1 ) {					if( *cowMealFlagP >= 1 ) {
			semopChecked(semID, &SignalDragonSlee				semopChecked(semID, &SignalDragonSlee
			printf("SSSSSSS %8lu SSSSSSS   last s |				printf("SSSSSSS %8d SSSSSSS   last sh
		}								}
		semopChecked(semID, &SignalProtectCowMealFlag			semopChecked(semID, &SignalProtectCowMealFlag
	}								}
	else								else
	{								{
		semopChecked(semID, &SignalProtectSheepInGrou			semopChecked(semID, &SignalProtectSheepInGrou
	}								}

	semopChecked(semID, &WaitSheepWaiting, 1);			semopChecked(semID, &WaitSheepWaiting, 1);

	// Terminate check						// Terminate check
	semopChecked(semID, &WaitProtectTerminate, 1);			semopChecked(semID, &WaitProtectTerminate, 1);
	if( *terminateFlagp == 1 ) {					if( *terminateFlagp == 1 ) {
		printf("SSSSSSS %8lu SSSSSSS   A sheep has be |			printf("SSSSSSS %8d SSSSSSS   A sheep has bee
		semopChecked(semID, &SignalProtectTerminate, 			semopChecked(semID, &SignalProtectTerminate, 
							      >			kill(localpid, SIGKILL);
		return;								return;
	} else {							} else {
		semopChecked(semID, &SignalProtectTerminate, 			semopChecked(semID, &SignalProtectTerminate, 
		printf("SSSSSSS %8lu SSSSSSS   A sheep has be |			printf("SSSSSSS %8d SSSSSSS   A sheep has bee
	}								}

	/* have all the sheeps in group been eaten? */			/* have all the sheeps in group been eaten? */
	/* if so wake up the dragon */					/* if so wake up the dragon */
	semopChecked(semID, &WaitProtectSheepEaten, 1);			semopChecked(semID, &WaitProtectSheepEaten, 1);
	semopChecked(semID, &SignalSheepEaten, 1);			semopChecked(semID, &SignalSheepEaten, 1);
	*sheepEatenCounterp = *sheepEatenCounterp + 1;			*sheepEatenCounterp = *sheepEatenCounterp + 1;
	if( ( *sheepEatenCounterp >= SHEEP_IN_GROUP )) {		if( ( *sheepEatenCounterp >= SHEEP_IN_GROUP )) {
		*sheepEatenCounterp = *sheepEatenCounterp - S			*sheepEatenCounterp = *sheepEatenCounterp - S
		for (k=0; k<SHEEP_IN_GROUP; k++){				for (k=0; k<SHEEP_IN_GROUP; k++){
			semopChecked(semID, &WaitSheepEaten, 				semopChecked(semID, &WaitSheepEaten, 
		}								}
		printf("SSSSSSS %8lu SSSSSSS   The last sheep |			printf("SSSSSSS %8d SSSSSSS   The last sheep 
		semopChecked(semID, &SignalProtectSheepEaten,			semopChecked(semID, &SignalProtectSheepEaten,
		semopChecked(semID, &SignalDragonEating, 1);			semopChecked(semID, &SignalDragonEating, 1);
	}								}
	else								else
	{								{
		semopChecked(semID, &SignalProtectSheepEaten,			semopChecked(semID, &SignalProtectSheepEaten,
		printf("SSSSSSS %8lu SSSSSSS   A sheep is wai |			printf("SSSSSSS %8d SSSSSSS   A sheep is wait
	}								}

	semopChecked(semID, &WaitSheepDead, 1);				semopChecked(semID, &WaitSheepDead, 1);

	printf("SSSSSSS %8lu SSSSSSS   sheep  dies\n", localT |		printf("SSSSSSS %8d SSSSSSS   sheep  dies\n", localpi
	return NULL;					      |		kill(localpid, SIGKILL);
}								}

void *cow(void *startTimeNp)				      |	void cow(float startTimeN)
{								{
	float startTimeN = *(float *)startTimeNp;	      |		int localpid;
	unsigned long localThreadID = (unsigned long)pthread_ <
	int k;								int k;
							      >		localpid = getpid();
							      >
							      >		setpgid(localpid, cowProcessGID);

	/* graze */							/* graze */
	printf("CCCCCCC %8lu CCCCCCC   A cow is born\n", loca |		printf("CCCCCCC %8d CCCCCCC   A cow is born\n", local
	if( startTimeN > 0) {						if( startTimeN > 0) {
		if( usleep( startTimeN) == -1){					if( usleep( startTimeN) == -1){
			/* exit when usleep interrupted by ki				/* exit when usleep interrupted by ki
			if(errno==EINTR)exit(4);					if(errno==EINTR)exit(4);
		}								}	
	}								}
	printf("CCCCCCC %8lu CCCCCCC   cow grazes for %f ms\n |		printf("CCCCCCC %8d CCCCCCC   cow grazes for %f ms\n"

	/* does this cow complete a group of COWS_IN_GROUP? *		/* does this cow complete a group of COWS_IN_GROUP? *
	/* if so wake up the dragon */					/* if so wake up the dragon */
	semopChecked(semID, &WaitProtectCowsInGroup, 1);		semopChecked(semID, &WaitProtectCowsInGroup, 1);
	semopChecked(semID, &SignalCowsInGroup, 1);			semopChecked(semID, &SignalCowsInGroup, 1);
	*cowCounterp = *cowCounterp + 1;				*cowCounterp = *cowCounterp + 1;
	printf("CCCCCCC %8lu CCCCCCC   %d  cow has been encha |		printf("CCCCCCC %8d CCCCCCC   %d  cow has been enchan
	if( ( *cowCounterp  >= COWS_IN_GROUP )) {			if( ( *cowCounterp  >= COWS_IN_GROUP )) {
		*cowCounterp = *cowCounterp - COWS_IN_GROUP;			*cowCounterp = *cowCounterp - COWS_IN_GROUP;
		semopChecked(semID, &SignalProtectCowsInGroup			semopChecked(semID, &SignalProtectCowsInGroup
		for (k=0; k<COWS_IN_GROUP; k++){				for (k=0; k<COWS_IN_GROUP; k++){
			semopChecked(semID, &WaitCowsInGroup,				semopChecked(semID, &WaitCowsInGroup,
		}								}
		printf("CCCCCCC %8lu CCCCCCC   The last cow i |			printf("CCCCCCC %8d CCCCCCC   The last cow is
		semopChecked(semID, &WaitProtectCowMealFlag, 			semopChecked(semID, &WaitProtectCowMealFlag, 
		*cowMealFlagP = *cowMealFlagP + 1;				*cowMealFlagP = *cowMealFlagP + 1;
		printf("CCCCCCC %8lu CCCCCCC   signal cow mea |			printf("CCCCCCC %8d CCCCCCC   signal cow meal
		semopChecked(semID, &SignalProtectCowMealFlag			semopChecked(semID, &SignalProtectCowMealFlag

		semopChecked(semID, &WaitProtectSheepMealFlag			semopChecked(semID, &WaitProtectSheepMealFlag
		if( *sheepMealFlagp >= 1 ) {					if( *sheepMealFlagp >= 1 ) {
			semopChecked(semID, &SignalDragonSlee				semopChecked(semID, &SignalDragonSlee
			printf("CCCCCCC %8lu CCCCCCC   last c |				printf("CCCCCCC %8d CCCCCCC   last co
		}								}	
		semopChecked(semID, &SignalProtectSheepMealFl			semopChecked(semID, &SignalProtectSheepMealFl
	}								}
	else								else
	{								{
		semopChecked(semID, &SignalProtectCowsInGroup			semopChecked(semID, &SignalProtectCowsInGroup
	}								}

	semopChecked(semID, &WaitCowsWaiting, 1);			semopChecked(semID, &WaitCowsWaiting, 1);

	// Terminate check						// Terminate check
	semopChecked(semID, &WaitProtectTerminate, 1);			semopChecked(semID, &WaitProtectTerminate, 1);
	if( *terminateFlagp == 1 ) {					if( *terminateFlagp == 1 ) {
		printf("CCCCCCC %8lu CCCCCCC   A cow has been |			printf("CCCCCCC %8d CCCCCCC   A cow has been 
		semopChecked(semID, &SignalProtectTerminate, 			semopChecked(semID, &SignalProtectTerminate, 
							      >			kill(localpid, SIGKILL);
		return;								return;
	} else {							} else {
		semopChecked(semID, &SignalProtectTerminate, 			semopChecked(semID, &SignalProtectTerminate, 
		printf("CCCCCCC %8lu CCCCCCC   A cow has been |			printf("CCCCCCC %8d CCCCCCC   A cow has been 
	}								}

	/* have all the cows in group been eaten? */			/* have all the cows in group been eaten? */
	/* if so wake up the dragon */					/* if so wake up the dragon */
	semopChecked(semID, &WaitProtectCowsEaten, 1);			semopChecked(semID, &WaitProtectCowsEaten, 1);
	semopChecked(semID, &SignalCowsEaten, 1);			semopChecked(semID, &SignalCowsEaten, 1);
	*cowsEatenCounterp = *cowsEatenCounterp + 1;			*cowsEatenCounterp = *cowsEatenCounterp + 1;
	if( ( *cowsEatenCounterp >= COWS_IN_GROUP )) {			if( ( *cowsEatenCounterp >= COWS_IN_GROUP )) {
		*cowsEatenCounterp = *cowsEatenCounterp - COW			*cowsEatenCounterp = *cowsEatenCounterp - COW
		for (k=0; k<COWS_IN_GROUP; k++){				for (k=0; k<COWS_IN_GROUP; k++){
			semopChecked(semID, &WaitCowsEaten, 1				semopChecked(semID, &WaitCowsEaten, 1
		}								}
		printf("CCCCCCC %8lu CCCCCCC   The last cow h |			printf("CCCCCCC %8d CCCCCCC   The last cow ha
		semopChecked(semID, &SignalProtectCowsEaten, 			semopChecked(semID, &SignalProtectCowsEaten, 
		semopChecked(semID, &SignalDragonEating, 1);			semopChecked(semID, &SignalDragonEating, 1);
	}								}
	else								else
	{								{
		semopChecked(semID, &SignalProtectCowsEaten, 			semopChecked(semID, &SignalProtectCowsEaten, 
		printf("CCCCCCC %8lu CCCCCCC   A cow is waiti |			printf("CCCCCCC %8d CCCCCCC   A cow is waitin
	}								}
	semopChecked(semID, &WaitCowsDead, 1);				semopChecked(semID, &WaitCowsDead, 1);

	printf("CCCCCCC %8lu CCCCCCC   cow  dies\n", localThr |		printf("CCCCCCC %8d CCCCCCC   cow  dies\n", localpid)
							      |		kill(localpid, SIGKILL);
	return NULL;					      <
}								}

void *thief(void *startTimeNp)				      |	void thief(float startTimeN)
{								{
	float startTimeN = *(float *)startTimeNp;	      |	    int localpid = getpid();
	unsigned long localThreadID = (unsigned long)pthread_ |	    setpgid(localpid, thiefProcessGID);
    								    
    printf("TTTTTTT %8lu TTTTTTT   A thief arrived outside th |	    printf("TTTTTTT %8d TTTTTTT   A thief arrived outside the
	if( startTimeN > 0) {						if( startTimeN > 0) {
		if( usleep( startTimeN) == -1){					if( usleep( startTimeN) == -1){
			/* exit when usleep interrupted by ki				/* exit when usleep interrupted by ki
			if(errno==EINTR)exit(4);					if(errno==EINTR)exit(4);
		}								}	
	}								}

	// Terminate check						// Terminate check
	semopChecked(semID, &WaitProtectTerminate, 1);			semopChecked(semID, &WaitProtectTerminate, 1);
	if( *terminateFlagp == 1 ) {					if( *terminateFlagp == 1 ) {
		printf("TTTTTTT %8lu TTTTTTT   thief has foun |			printf("TTTTTTT %8d TTTTTTT   thief has found
		semopChecked(semID, &SignalProtectTerminate, 			semopChecked(semID, &SignalProtectTerminate, 
		return NULL;				      |			kill(localpid, SIGKILL);
							      >			return;
	} else {							} else {
		printf("TTTTTTT %8lu TTTTTTT   thief has foun |			printf("TTTTTTT %8d TTTTTTT   thief has found
		semopChecked(semID, &SignalProtectTerminate, 			semopChecked(semID, &SignalProtectTerminate, 
	}								}

	semopChecked(semID, &WaitProtectThiefCount, 1);			semopChecked(semID, &WaitProtectThiefCount, 1);
	*thiefCounterp = *thiefCounterp + 1;				*thiefCounterp = *thiefCounterp + 1;
	semopChecked(semID, &SignalProtectThiefCount, 1);		semopChecked(semID, &SignalProtectThiefCount, 1);
	printf("TTTTTTT %8lu TTTTTTT   thief is under smaug's |		printf("TTTTTTT %8d TTTTTTT   thief is under smaug's 
	printf("TTTTTTT %8lu TTTTTTT   thief wakes smaug\n",  |		printf("TTTTTTT %8d TTTTTTT   thief wakes smaug\n", l
	semopChecked(semID, &SignalDragonSleeping, 1);			semopChecked(semID, &SignalDragonSleeping, 1);
	semopChecked(semID, &WaitThievesWaiting, 1);			semopChecked(semID, &WaitThievesWaiting, 1);
	// Another terminate check incase this thief ends the |		printf("TTTTTTT %8d TTTTTTT   thief enters smaug's ca
	semopChecked(semID, &WaitProtectTerminate, 1);	      |		printf("TTTTTTT %8d TTTTTTT   thief plays with smaug\
	if( *terminateFlagp == 1 ) {			      <
		printf("TTTTTTT %8lu TTTTTTT   thief enters s <
		semopChecked(semID, &SignalProtectTerminate,  <
		return NULL;				      <
	} else {					      <
		printf("TTTTTTT %8lu TTTTTTT   thief enters s <
		printf("TTTTTTT %8lu TTTTTTT   thief plays wi <
		semopChecked(semID, &SignalProtectTerminate,  <
	}						      <
	semopChecked(semID, &WaitThiefFinish, 1);			semopChecked(semID, &WaitThiefFinish, 1);
	printf("TTTTTTT %8lu TTTTTTT   thief leaves cave and  |		printf("TTTTTTT %8d TTTTTTT   thief leaves cave and g
							      |		kill(localpid, SIGKILL);
	return NULL;					      <
}								}

void *hunter(void *startTimeNp)				      |	void hunter(float startTimeN)
{								{
	float startTimeN = *(float *)startTimeNp;	      |	    int localpid = getpid();
	unsigned long localThreadID = (unsigned long)pthread_ |	    setpgid(localpid, hunterProcessGID);
    								    
    printf("HHHHHHH %8lu HHHHHHH   A hunter arrived outside t |	    printf("HHHHHHH %8d HHHHHHH   A hunter arrived outside th
	if( startTimeN > 0) {						if( startTimeN > 0) {
		if( usleep( startTimeN) == -1){					if( usleep( startTimeN) == -1){
			/* exit when usleep interrupted by ki				/* exit when usleep interrupted by ki
			if(errno==EINTR)exit(4);					if(errno==EINTR)exit(4);
		}								}	
	}								}

	// Terminate check						// Terminate check
	semopChecked(semID, &WaitProtectTerminate, 1);			semopChecked(semID, &WaitProtectTerminate, 1);
	if( *terminateFlagp == 1 ) {					if( *terminateFlagp == 1 ) {
		printf("HHHHHHH %8lu HHHHHHH   hunter has fou |			printf("HHHHHHH %8d HHHHHHH   hunter has foun
		semopChecked(semID, &SignalProtectTerminate, 			semopChecked(semID, &SignalProtectTerminate, 
		return NULL;				      |			kill(localpid, SIGKILL);
							      >			return;
	} else {							} else {
		printf("HHHHHHH %8lu HHHHHHH   hunter has fou |			printf("HHHHHHH %8d HHHHHHH   hunter has foun
		semopChecked(semID, &SignalProtectTerminate, 			semopChecked(semID, &SignalProtectTerminate, 
	}								}

	semopChecked(semID, &WaitProtectHunterCount, 1);		semopChecked(semID, &WaitProtectHunterCount, 1);
	*hunterCounterp = *hunterCounterp + 1;				*hunterCounterp = *hunterCounterp + 1;
	semopChecked(semID, &SignalProtectHunterCount, 1);		semopChecked(semID, &SignalProtectHunterCount, 1);
	printf("HHHHHHH %8lu HHHHHHH   hunter is under smaug' |		printf("HHHHHHH %8d HHHHHHH   hunter is under smaug's
	printf("HHHHHHH %8lu HHHHHHH   hunter wakes smaug\n", |		printf("HHHHHHH %8d HHHHHHH   hunter wakes smaug\n", 
	semopChecked(semID, &SignalDragonSleeping, 1);			semopChecked(semID, &SignalDragonSleeping, 1);
	semopChecked(semID, &WaitHuntersWaiting, 1);			semopChecked(semID, &WaitHuntersWaiting, 1);
	// Another terminate check incase this hunter ends th |		printf("HHHHHHH %8d HHHHHHH   hunter enters smaug's c
	semopChecked(semID, &WaitProtectTerminate, 1);	      |		printf("HHHHHHH %8d HHHHHHH   hunter fights smaug\n",
	if( *terminateFlagp == 1 ) {			      <
		printf("HHHHHHH %8lu HHHHHHH   hunter enters  <
		semopChecked(semID, &SignalProtectTerminate,  <
		return NULL;				      <
	} else {					      <
		printf("HHHHHHH %8lu HHHHHHH   hunter enters  <
		printf("HHHHHHH %8lu HHHHHHH   hunter fights  <
		semopChecked(semID, &SignalProtectTerminate,  <
	}						      <
	semopChecked(semID, &WaitHunterFinish, 1);			semopChecked(semID, &WaitHunterFinish, 1);
	printf("TTTTTTT %8lu TTTTTTT   hunter leaves cave and |		printf("TTTTTTT %8d TTTTTTT   hunter leaves cave and 
							      |		kill(localpid, SIGKILL);
	return NULL;					      <
}								}


void terminateSimulation() {					void terminateSimulation() {
							      >		pid_t localpgid;
	pid_t localpid;							pid_t localpid;
							      >		int w = 0;
							      >		int status;

	localpid = getpid();						localpid = getpid();
	printf("RELEASESEMAPHORES   Terminating Simulation fr |		printf("RELEASESEMAPHORES   Terminating Simulation fr
							      |		if(sheepProcessGID != (int)localpgid ){
	// Child threads spawned by the main thread will term |			if(killpg(sheepProcessGID, SIGKILL) == -1 && 
	// so not much cleanup to do here		      |				printf("XXTERMINATETERMINATE   SHEEPS
	printf("XXTERMINATETERMINATE   sheep threads terminat |			}
	printf("XXTERMINATETERMINATE   cow threads terminatin |			printf("XXTERMINATETERMINATE   killed sheeps 
	printf("XXTERMINATETERMINATE   hunter threads termina |		}
	printf("XXTERMINATETERMINATE   thief threads terminat |		if(cowProcessGID != (int)localpgid ){
	printf("XXTERMINATETERMINATE   smaug thread terminati |			if(killpg(cowProcessGID, SIGKILL) == -1 && er
							      >				printf("XXTERMINATETERMINATE   COWS N
							      >			}
							      >			printf("XXTERMINATETERMINATE   killed cows \n
							      >		}
							      >		if(hunterProcessGID != (int)localpgid ){
							      >			if(killpg(hunterProcessGID, SIGKILL) == -1 &&
							      >				printf("XXTERMINATETERMINATE   HUNTER
							      >			}
							      >			printf("XXTERMINATETERMINATE   killed hunters
							      >		}
							      >		if(thiefProcessGID != (int)localpgid ){
							      >			if(killpg(thiefProcessGID, SIGKILL) == -1 && 
							      >				printf("XXTERMINATETERMINATE   THIEVE
							      >			}
							      >			printf("XXTERMINATETERMINATE   killed thieves
							      >		}

	// No child processes are created in this threaded ve |		//printf("smaugProcessID: %d  localpgid: %d\n", smaug

							      >		if(smaugProcessID != (int)localpid ) {
							      >			kill(smaugProcessID, SIGKILL);
							      >			printf("XXTERMINATETERMINATE   killed smaug\n
							      >		}
							      >		while( (w = waitpid( -1, &status, WNOHANG)) > 1){
							      >				printf("                           RE
							      >		}
	releaseSemandMem();						releaseSemandMem();
							      <
	printf("GOODBYE from terminate\n");				printf("GOODBYE from terminate\n");
}								}

void releaseSemandMem() 					void releaseSemandMem() 
{								{
	// Semaphore set cannot be freed when there are sleep |		pid_t localpid;
	// We set all semaphores to be nonzero and allow the  |		int w = 0;
	// The maxiumum semaphore value is 32767, so set the  |		int status;
	seminfo.val = 30000;				      <
	semctlChecked(semID, SEM_SHEEPINGROUP, SETVAL, seminf <
	semctlChecked(semID, SEM_SHEEPWAITING, SETVAL, seminf <
	semctlChecked(semID, SEM_SHEEPEATEN, SETVAL, seminfo) <
	semctlChecked(semID, SEM_SHEEPDEAD, SETVAL, seminfo); <
	semctlChecked(semID, SEM_COWSINGROUP, SETVAL, seminfo <
	semctlChecked(semID, SEM_COWSWAITING, SETVAL, seminfo <
	semctlChecked(semID, SEM_COWSEATEN, SETVAL, seminfo); <
	semctlChecked(semID, SEM_COWSDEAD, SETVAL, seminfo);  <
	semctlChecked(semID, SEM_HUNTERSWAITING, SETVAL, semi <
	semctlChecked(semID, SEM_HUNTERFINISH, SETVAL, seminf <
	semctlChecked(semID, SEM_THIEVESWAITING, SETVAL, semi <
	semctlChecked(semID, SEM_THIEFFINISH, SETVAL, seminfo <
	semctlChecked(semID, SEM_DRAGONFIGHTING, SETVAL, semi <
	semctlChecked(semID, SEM_DRAGONSLEEPING, SETVAL, semi <
	semctlChecked(semID, SEM_DRAGONEATING, SETVAL, seminf <

	// Wait for the semaphores, especially for the termin |		localpid = getpid();
	// terminate gracefully and not exit(3) from an inval <
	printf("RELEASERELEASERELEAS   Sleeping for one secon <
	sleep(1);					      <
							      <
	int semaphoreDeletionRet = semctl(semID, 0, IPC_RMID, <
	if(semaphoreDeletionRet != 0) {			      <
		printf("RELEASERELEASERELEAS   Catastrophic e <
	} else {					      <
		printf("RELEASERELEASERELEAS   Semaphore set  <
	}						      <

							      >		//should check return values for clean termination
							      >		semctl(semID, 0, IPC_RMID, seminfo);

							      >
							      >		// wait for the semaphores 
							      >		usleep(4000);
							      >		// arg1 is -1 to wait for all child processes
							      >		while( (w = waitpid( -1, &status, WNOHANG)) > 1){
							      >			printf("                           REAPED pro
							      >		}
							      >		printf("\n");
	if(shmdt(terminateFlagp)==-1) {					if(shmdt(terminateFlagp)==-1) {
		printf("RELEASERELEASERELEAS   terminateFlagp			printf("RELEASERELEASERELEAS   terminateFlagp
	}								}
	else{								else{
		printf("RELEASERELEASERELEAS   terminateFlagp			printf("RELEASERELEASERELEAS   terminateFlagp
	}								}
	if( shmctl(terminateFlag, IPC_RMID, NULL ))			if( shmctl(terminateFlag, IPC_RMID, NULL ))
	{								{
		// this will dereferrence the null pointer wh			// this will dereferrence the null pointer wh
		printf("RELEASERELEASERELEAS   terminateFlag 			printf("RELEASERELEASERELEAS   terminateFlag 
	}								}
	else{								else{
		printf("RELEASERELEASERELEAS   terminateFlag 			printf("RELEASERELEASERELEAS   terminateFlag 
	}								}
	// SHEEP MEMORY							// SHEEP MEMORY
	if( shmdt(sheepMealFlagp)==-1)					if( shmdt(sheepMealFlagp)==-1)
	{								{
		printf("RELEASERELEASERELEAS   sheepMealFlagp			printf("RELEASERELEASERELEAS   sheepMealFlagp
	}								}
	else{								else{
		printf("RELEASERELEASERELEAS   sheepMealFlagp			printf("RELEASERELEASERELEAS   sheepMealFlagp
	}								}
	if( shmctl(sheepMealFlag, IPC_RMID, NULL ))			if( shmctl(sheepMealFlag, IPC_RMID, NULL ))
	{								{
		printf("RELEASERELEASERELEAS   sheepMealFlag 			printf("RELEASERELEASERELEAS   sheepMealFlag 
	}								}
	else{								else{
		printf("RELEASERELEASERELEAS   sheepMealFlag 			printf("RELEASERELEASERELEAS   sheepMealFlag 
	}								}
	if( shmdt(sheepCounterp)==-1)					if( shmdt(sheepCounterp)==-1)
	{								{
		printf("RELEASERELEASERELEAS   sheepCounterp 			printf("RELEASERELEASERELEAS   sheepCounterp 
	}								}
	else{								else{
		printf("RELEASERELEASERELEAS   sheepCounterp 			printf("RELEASERELEASERELEAS   sheepCounterp 
	}								}
	if( shmctl(sheepCounter, IPC_RMID, NULL ))			if( shmctl(sheepCounter, IPC_RMID, NULL ))
	{								{
		printf("RELEASERELEASERELEAS   sheepCounter m			printf("RELEASERELEASERELEAS   sheepCounter m
	}								}
	else{								else{
		printf("RELEASERELEASERELEAS   sheepCounter m			printf("RELEASERELEASERELEAS   sheepCounter m
	}								}
	if( shmdt(sheepEatenCounterp)==-1)				if( shmdt(sheepEatenCounterp)==-1)
	{								{
		printf("RELEASERELEASERELEAS   sheepEatenCoun			printf("RELEASERELEASERELEAS   sheepEatenCoun
	}								}
	else{								else{
		printf("RELEASERELEASERELEAS   sheepEatenCoun			printf("RELEASERELEASERELEAS   sheepEatenCoun
	}								}
	if( shmctl(sheepEatenCounter, IPC_RMID, NULL ))			if( shmctl(sheepEatenCounter, IPC_RMID, NULL ))
	{								{
		printf("RELEASERELEASERELEAS   sheepEatenCoun			printf("RELEASERELEASERELEAS   sheepEatenCoun
	}								}
	else{								else{
		printf("RELEASERELEASERELEAS   sheepEatenCoun			printf("RELEASERELEASERELEAS   sheepEatenCoun
	}								}
	// COW MEMORY							// COW MEMORY
	if( shmdt(cowMealFlagP)==-1)					if( shmdt(cowMealFlagP)==-1)
	{								{
		printf("RELEASERELEASERELEAS   cowMealFlagP m			printf("RELEASERELEASERELEAS   cowMealFlagP m
	}								}
	else{								else{
		printf("RELEASERELEASERELEAS   cowMealFlagP m			printf("RELEASERELEASERELEAS   cowMealFlagP m
	}								}
	if( shmctl(cowMealFlag, IPC_RMID, NULL ))			if( shmctl(cowMealFlag, IPC_RMID, NULL ))
	{								{
		printf("RELEASERELEASERELEAS   cowMealFlag sh			printf("RELEASERELEASERELEAS   cowMealFlag sh
	}								}
	else{								else{
		printf("RELEASERELEASERELEAS   cowMealFlag sh			printf("RELEASERELEASERELEAS   cowMealFlag sh
	}								}
	if( shmdt(cowCounterp)==-1)					if( shmdt(cowCounterp)==-1)
	{								{
		printf("RELEASERELEASERELEAS   cowCounterp me			printf("RELEASERELEASERELEAS   cowCounterp me
	}								}
	else{								else{
		printf("RELEASERELEASERELEAS   cowCounterp me			printf("RELEASERELEASERELEAS   cowCounterp me
	}								}
	if( shmctl(cowCounter, IPC_RMID, NULL ))			if( shmctl(cowCounter, IPC_RMID, NULL ))
	{								{
		printf("RELEASERELEASERELEAS   cowCounter mem			printf("RELEASERELEASERELEAS   cowCounter mem
	}								}
	else{								else{
		printf("RELEASERELEASERELEAS   cowCounter mem			printf("RELEASERELEASERELEAS   cowCounter mem
	}								}
	if( shmdt(cowsEatenCounterp)==-1)				if( shmdt(cowsEatenCounterp)==-1)
	{								{
		printf("RELEASERELEASERELEAS   cowsEatenCount			printf("RELEASERELEASERELEAS   cowsEatenCount
	}								}
	else{								else{
		printf("RELEASERELEASERELEAS   cowsEatenCount			printf("RELEASERELEASERELEAS   cowsEatenCount
	}								}
	if( shmctl(cowsEatenCounter, IPC_RMID, NULL ))			if( shmctl(cowsEatenCounter, IPC_RMID, NULL ))
	{								{
		printf("RELEASERELEASERELEAS   cowsEatenCount			printf("RELEASERELEASERELEAS   cowsEatenCount
	}								}
	else{								else{
		printf("RELEASERELEASERELEAS   cowsEatenCount			printf("RELEASERELEASERELEAS   cowsEatenCount
	}								}
	// HUNTER MEMORY						// HUNTER MEMORY
	if( shmdt(hunterCounterp)==-1)					if( shmdt(hunterCounterp)==-1)
	{								{
		printf("RELEASERELEASERELEAS   hunterCounterp			printf("RELEASERELEASERELEAS   hunterCounterp
	}								}
	else{								else{
		printf("RELEASERELEASERELEAS   hunterCounterp			printf("RELEASERELEASERELEAS   hunterCounterp
	}								}
	if( shmctl(hunterCounter, IPC_RMID, NULL ))			if( shmctl(hunterCounter, IPC_RMID, NULL ))
	{								{
		printf("RELEASERELEASERELEAS   hunterCounter 			printf("RELEASERELEASERELEAS   hunterCounter 
	}								}
	else{								else{
		printf("RELEASERELEASERELEAS   hunterCounter 			printf("RELEASERELEASERELEAS   hunterCounter 
	}								}
	// THIEF MEMORY							// THIEF MEMORY
	if( shmdt(thiefCounterp)==-1)					if( shmdt(thiefCounterp)==-1)
	{								{
		printf("RELEASERELEASERELEAS   thiefCounterp 			printf("RELEASERELEASERELEAS   thiefCounterp 
	}								}
	else{								else{
		printf("RELEASERELEASERELEAS   thiefCounterp 			printf("RELEASERELEASERELEAS   thiefCounterp 
	}								}
	if( shmctl(thiefCounter, IPC_RMID, NULL ))			if( shmctl(thiefCounter, IPC_RMID, NULL ))
	{								{
		printf("RELEASERELEASERELEAS   thiefCounter m			printf("RELEASERELEASERELEAS   thiefCounter m
	}								}
	else{								else{
		printf("RELEASERELEASERELEAS   thiefCounter m			printf("RELEASERELEASERELEAS   thiefCounter m
	}								}
}								}

void semctlChecked(int semaphoreID, int semNum, int flag, uni	void semctlChecked(int semaphoreID, int semNum, int flag, uni
	/* wrapper that checks if the semaphore control reque		/* wrapper that checks if the semaphore control reque
	/* successfully. If it has not the entire simulation 		/* successfully. If it has not the entire simulation 

	if (semctl(semaphoreID, semNum, flag,  seminfo) == -1		if (semctl(semaphoreID, semNum, flag,  seminfo) == -1
		if(errno != EIDRM) {						if(errno != EIDRM) {
			printf("semaphore control failed: sim				printf("semaphore control failed: sim
			printf("errno %8d \n",errno );					printf("errno %8d \n",errno );
			*terminateFlagp = 1;						*terminateFlagp = 1;
			releaseSemandMem();						releaseSemandMem();
			exit(2);							exit(2);
		}								}
		else {								else {
			exit(3);							exit(3);
		}								}
	}								}
}								}

void semopChecked(int semaphoreID, struct sembuf *operation, 	void semopChecked(int semaphoreID, struct sembuf *operation, 
{								{
	/* wrapper that checks if the semaphore operation req		/* wrapper that checks if the semaphore operation req
	/* successfully. If it has not the entire simulation 		/* successfully. If it has not the entire simulation 
							      <
	// If we have been told to terminate, then just retur <
	// operation below would likely cause an error; relea <
	// execution elsewhere and the semaphore set would so <
	// Same reasoning on why we will not use a mutex here <
	if(*terminateFlagp == 1)			      <
		return;					      <
							      <
	if (semop(semaphoreID, operation, something) == -1 ) 		if (semop(semaphoreID, operation, something) == -1 ) 
		if(errno != EIDRM) {						if(errno != EIDRM) {
			printf("semaphore operation failed: s				printf("semaphore operation failed: s
			*terminateFlagp = 1;						*terminateFlagp = 1;
			releaseSemandMem();						releaseSemandMem();
			exit(2);							exit(2);
		}								}
		else {								else {
			exit(3);							exit(3);
		}								}
	}								}
}								}


double timeChange( const struct timeval startTime )		double timeChange( const struct timeval startTime )
{								{
	struct timeval nowTime;						struct timeval nowTime;
	double elapsedTime;						double elapsedTime;

	gettimeofday(&nowTime,NULL);					gettimeofday(&nowTime,NULL);
	elapsedTime = (nowTime.tv_sec - startTime.tv_sec)*100		elapsedTime = (nowTime.tv_sec - startTime.tv_sec)*100
	elapsedTime +=  (nowTime.tv_usec - startTime.tv_usec)		elapsedTime +=  (nowTime.tv_usec - startTime.tv_usec)
	return elapsedTime;						return elapsedTime;

}								}

int getInputFor(char *prompt);					int getInputFor(char *prompt);

int main() {							int main() {
	initialize();							initialize();
	printf("Main threadid: %lu\n", (unsigned long)pthread |
	printf("1s (1 second) is 1000000us (1e6 microseconds)		printf("1s (1 second) is 1000000us (1e6 microseconds)
	const int seed = getInputFor("the seed");			const int seed = getInputFor("the seed");
	const int maximumSheepInterval = getInputFor("maximum		const int maximumSheepInterval = getInputFor("maximum
	const int maximumCowInterval = getInputFor("maximumCo		const int maximumCowInterval = getInputFor("maximumCo
	const int maximumHunterInterval = getInputFor("maximu		const int maximumHunterInterval = getInputFor("maximu
	const int maximumThiefInterval = getInputFor("maximum		const int maximumThiefInterval = getInputFor("maximum
	const int smaugWinProb = getInputFor("smaugWinProb (0		const int smaugWinProb = getInputFor("smaugWinProb (0

	double sheepTimer = 0;						double sheepTimer = 0;
	double cowTimer = 0;						double cowTimer = 0;
	double hunterTimer = 0;						double hunterTimer = 0;
	double thiefTimer = 0;						double thiefTimer = 0;

	srand(seed);							srand(seed);
	parentProcessID = getpid();					parentProcessID = getpid();
							      >		// we do not know smaugpid yet
							      >		smaugProcessID = -1; 
							      >		sheepProcessGID = parentProcessID - 1;
							      >		cowProcessGID = parentProcessID - 2;
							      >		hunterProcessGID = parentProcessID - 3;
							      >		thiefProcessGID = parentProcessID - 4;

	pthread_t smaugThread;				      |		pid_t childPID = fork();
	if(pthread_create(&smaugThread, NULL, smaug, &smaugWi |
		printf("error creating thread!\n");	      |		if(childPID < 0) {
		terminateSimulation();			      |			printf("FORK FAILED\n");
		return 1;							return 1;
	}						      |		} else if(childPID == 0) {
	pthread_detach(smaugThread);			      |			smaug(smaugWinProb);
							      >			return 0;
							      >		} 
							      >
							      >		// smaugpid is now known to callee from the above for
							      >		smaugProcessID = childPID;
										
	gettimeofday(&startTime, NULL);					gettimeofday(&startTime, NULL);
							      >		int zombieTick = 0;
	while(*terminateFlagp == 0) {					while(*terminateFlagp == 0) {
							      >			zombieTick++;
		double simDuration = timeChange(startTime);			double simDuration = timeChange(startTime);

		if(sheepTimer - simDuration <= 0) {				if(sheepTimer - simDuration <= 0) {
			sheepTimer = simDuration + (rand() % 				sheepTimer = simDuration + (rand() % 
			printf("SHEEP CREATED! next sheep at:				printf("SHEEP CREATED! next sheep at:
			float sleepTime = (rand() % maximumSh |				int childPID = fork();
			pthread_t sheepThread;		      |				if(childPID == 0) {
			if(pthread_create(&sheepThread, NULL, |					sheep((rand() % maximumSheepI
				// We have ran out of memory/ |					return 0;
				// abort and terminate.	      <
				printf("Error creating sheep  <
				terminateSimulation();	      <
				return 1;		      <
			}								}
			// To free up resources, we would nee <
			// However, we would not be returning <
			pthread_detach(sheepThread);	      <
		}								}

		if(cowTimer - simDuration <= 0) {				if(cowTimer - simDuration <= 0) {
			cowTimer = simDuration + (rand() % ma				cowTimer = simDuration + (rand() % ma
			printf("COW CREATED! next cow at: %f\				printf("COW CREATED! next cow at: %f\
			float cowTime = (rand() % maximumCowI |				int childPID = fork();
			pthread_t cowThread;		      |				if(childPID == 0) {
			if(pthread_create(&cowThread, NULL, c |					cow((rand() % maximumCowInter
				printf("Error creating cow th |					return 0;
				terminateSimulation();	      <
				return 1;		      <
			}								}
			pthread_detach(cowThread);	      <
		}								}

		if(thiefTimer - simDuration <= 0) {				if(thiefTimer - simDuration <= 0) {
			thiefTimer = simDuration + (rand() % 				thiefTimer = simDuration + (rand() % 
			printf("THIEF CREATED! next thief at:				printf("THIEF CREATED! next thief at:
			float thiefTime = (rand() % maximumTh |				int childPID = fork();
			pthread_t thiefThread;		      |				if(childPID == 0) {
			if(pthread_create(&thiefThread, NULL, |					thief((rand() % maximumThiefI
				printf("Error creating thief  |					return 0;
				terminateSimulation();	      <
				return 1;		      <
			}								}
			pthread_detach(thiefThread);	      <
		}								}

		if(hunterTimer - simDuration <= 0) {				if(hunterTimer - simDuration <= 0) {
			hunterTimer = simDuration + (rand() %				hunterTimer = simDuration + (rand() %
			printf("HUNTER CREATED! next hunter a				printf("HUNTER CREATED! next hunter a
			float hunterTime = (rand() % maximumH |				int childPID = fork();
			pthread_t hunterThread;		      |				if(childPID == 0) {
			if(pthread_create(&hunterThread, NULL |					hunter((rand() % maximumHunte
				printf("Error creating hunter |					return 0;
				terminateSimulation();	      |				}
				return 1;		      |			}
							      >
							      >			// Purge all zombies every 10 iteratinos
							      >			if(zombieTick % 10 == 0) {
							      >				zombieTick -= 10;
							      >				// arg1 is -1 to wait for all child p
							      >				int w = 0; int status = 0;
							      >				while( (w = waitpid( -1, &status, WNO
							      >					printf("                     
			}								}
			pthread_detach(hunterThread);	      |			}
		} 					      <
	}								}
									
							      >		//	printf("testing values: %d\n", maximumsheepin
							      >
	terminateSimulation();						terminateSimulation();
	return 0;							return 0;
}								}

int getInputFor(char *prompt) {					int getInputFor(char *prompt) {
	printf("Enter the value for %s: ", prompt);			printf("Enter the value for %s: ", prompt);
	int input = 0;							int input = 0;
	scanf("%d", &input);						scanf("%d", &input);
	return input;							return input;
}								}

]0;steven@ansible: ~/Dropbox/school/cmpt300/ass3steven@ansible:~/Dropbox/school/cmpt300/ass3$ sdiff smaugThread.c smaugProcess.c "[K| less
[?1049h[?1h=#include <errno.h>                                              #include <errno.h> 
#include <wait.h>                                               #include <wait.h> 
#include <stdlib.h>                                             #include <stdlib.h> 
#include <stdio.h>                                              #include <stdio.h>
#include <unistd.h>                                             #include <unistd.h>
#include <curses.h>                                             #include <curses.h>
#include <time.h>                                               #include <time.h>
#include <signal.h>                                             #include <signal.h>
#include <sys/types.h>                                          #include <sys/types.h>
#include <sys/ipc.h>                                            #include <sys/ipc.h>
#include <sys/sem.h>                                            #include <sys/sem.h>
#include <sys/shm.h>                                            #include <sys/shm.h>
#include <sys/time.h>                                           #include <sys/time.h>
#include <sys/resource.h>                                       #include <sys/resource.h> 


/* Define semaphores to be placed in a single semaphore set *   /* Define semaphores to be placed in a single sem aphore set *
/* Numbers indicate index in semaphore set for named semaphor   /* Numbers indicate index in semaphore set for na med semaphor
#define SEM_COWSINGROUP 0                                       #define SEM_COWSINGROUP 0
#define SEM_PCOWSINGROUP 1                                      #define SEM_PCOWSINGROUP 1
#define SEM_SHEEPINGROUP 2                                      #define SEM_SHEEPINGROUP 2
#define SEM_PSHEEPINGROUP 3                                     #define SEM_PSHEEPINGROUP 3
#define SEM_SHEEPWAITING 4                                      #define SEM_SHEEPWAITING 4
#define SEM_COWSWAITING 5                                       #define SEM_COWSWAITING 5
#define SEM_PSHEEPEATEN 6                                       #define SEM_PSHEEPEATEN 6
#define SEM_PCOWSEATEN 7                                        #define SEM_PCOWSEATEN 7
#define SEM_SHEEPEATEN 8                                        #define SEM_SHEEPEATEN 8
#define SEM_COWSEATEN 9                                         #define SEM_COWSEATEN 9
#define SEM_SHEEPDEAD 10                                        #define SEM_SHEEPDEAD 10
#define SEM_COWSDEAD 11                                         #define SEM_COWSDEAD 11
#define SEM_PTERMINATE 12                                       #define SEM_PTERMINATE 12
#define SEM_DRAGONEATING 13                                     #define SEM_DRAGONEATING 13
#define SEM_DRAGONFIGHTING 14                                   #define SEM_DRAGONFIGHTING 14
#define SEM_DRAGONSLEEPING 15                                   #define SEM_DRAGONSLEEPING 15
#define SEM_PCOWMEALFLAG 16                                     #define SEM_PCOWMEALFLAG 16
#define SEM_PSHEEPMEALFLAG 17                                   #define SEM_PSHEEPMEALFLAG 17

#define SEM_PHUNTERCOUNT 18                                     #define SEM_PHUNTERCOUNT 18
#define SEM_HUNTERSWAITING 19                                   #define SEM_HUNTERSWAITING 19
#define SEM_HUNTERFINISH 20                                     #define SEM_HUNTERFINISH 20

#define SEM_PTHIEFCOUNT 21                                      #define SEM_PTHIEFCOUNT 21
#define SEM_THIEVESWAITING 22                                   #define SEM_THIEVESWAITING 22
#define SEM_THIEFFINISH 23                                      #define SEM_THIEFFINISH 23

#define MAX_SEMAPHORES 24                                       #define MAX_SEMAPHORES 24

/* System constants used to control simulation termination */   /* System constants used to control simulation te rmination */
#define MAX_SHEEP_EATEN 36                                      #define MAX_SHEEP_EATEN 36 
#define MAX_COWS_EATEN 12                                       #define MAX_COWS_EATEN 12
#define MAX_DEFEATED_HUNTERS 48                                 #define MAX_DEFEATED_HUNTERS 48
#define MAX_DEFEATED_THIEVES 36                                 #define MAX_DEFEATED_THIEVES 36
#define MAX_COWS_CREATED 80                                     #define MAX_COWS_CREATED 80
#define MIN_TREASURE_IN_HOARD 0                                 #define MIN_TREASURE_IN_HOARD 0
#define MAX_TREASURE_IN_HOARD 1000                              #define MAX_TREASURE_IN_HOARD 1000
:[K[H[2J[H[H[2J[H#include <errno.h>                                              #include <errno.h> 
#include <wait.h>                                               #include <wait.h> 
#include <stdlib.h>                                             #include <stdlib.h> 
#include <stdio.h>                                              #include <stdio.h>
#include <unistd.h>                                             #include <unistd.h>
#include <curses.h>                                             #include <curses.h>
#include <time.h>                                               #include <time.h>
#include <signal.h>                                             #include <signal.h>
#include <sys/types.h>                                          #include <sys/types.h>
#include <sys/ipc.h>                                            #include <sys/ipc.h>
#include <sys/sem.h>                                            #include <sys/sem.h>
#include <sys/shm.h>                                            #include <sys/shm.h>
#include <sys/time.h>                                           #include <sys/time.h>
#include <sys/resource.h>                                       #include <sys/resource.h> 


/* Define semaphores to be placed in a single semaphore set *   /* Define semaphores to be placed in a single semaphore set *
/* Numbers indicate index in semaphore set for named semaphor   /* Numbers indicate index in semaphore set for named semaphor
#define SEM_COWSINGROUP 0                                       #define SEM_COWSINGROUP 0
#define SEM_PCOWSINGROUP 1                                      #define SEM_PCOWSINGROUP 1
#define SEM_SHEEPINGROUP 2                                      #define SEM_SHEEPINGROUP 2
#define SEM_PSHEEPINGROUP 3                                     #define SEM_PSHEEPINGROUP 3
#define SEM_SHEEPWAITING 4                                      #define SEM_SHEEPWAITING 4
#define SEM_COWSWAITING 5                                       #define SEM_COWSWAITING 5
#define SEM_PSHEEPEATEN 6                                       #define SEM_PSHEEPEATEN 6
#define SEM_PCOWSEATEN 7                                        #define SEM_PCOWSEATEN 7
#define SEM_SHEEPEATEN 8                                        #define SEM_SHEEPEATEN 8
#define SEM_COWSEATEN 9                                         #define SEM_COWSEATEN 9
#define SEM_SHEEPDEAD 10                                        #define SEM_SHEEPDEAD 10
#define SEM_COWSDEAD 11                                         #define SEM_COWSDEAD 11
#define SEM_PTERMINATE 12                                       #define SEM_PTERMINATE 12
#define SEM_DRAGONEATING 13                                     #define SEM_DRAGONEATING 13
#define SEM_DRAGONFIGHTING 14                                   #define SEM_DRAGONFIGHTING 14
#define SEM_DRAGONSLEEPING 15                                   #define SEM_DRAGONSLEEPING 15
#define SEM_PCOWMEALFLAG 16                                     #define SEM_PCOWMEALFLAG 16
#define SEM_PSHEEPMEALFLAG 17                                   #define SEM_PSHEEPMEALFLAG 17

#define SEM_PHUNTERCOUNT 18                                     #define SEM_PHUNTERCOUNT 18
#define SEM_HUNTERSWAITING 19                                   #define SEM_HUNTERSWAITING 19
#define SEM_HUNTERFINISH 20                                     #define SEM_HUNTERFINISH 20

#define SEM_PTHIEFCOUNT 21                                      #define SEM_PTHIEFCOUNT 21
#define SEM_THIEVESWAITING 22                                   #define SEM_THIEVESWAITING 22
#define SEM_THIEFFINISH 23                                      #define SEM_THIEFFINISH 23

#define MAX_SEMAPHORES 24                                       #define MAX_SEMAPHORES 24

/* System constants used to control simulation termination */   /* System constants used to control simulation termination */
#define MAX_SHEEP_EATEN 36                                      #define MAX_SHEEP_EATEN 36 
#define MAX_COWS_EATEN 12                                       #define MAX_COWS_EATEN 12
#define MAX_DEFEATED_HUNTERS 48                                 #define MAX_DEFEATED_HUNTERS 48
#define MAX_DEFEATED_THIEVES 36                                 #define MAX_DEFEATED_THIEVES 36
#define MAX_COWS_CREATED 80                                     #define MAX_COWS_CREATED 80
#define MIN_TREASURE_IN_HOARD 0                                 #define MIN_TREASURE_IN_HOARD 0
#define MAX_TREASURE_IN_HOARD 1000                              #define MAX_TREASURE_IN_HOARD 1000
#define INITIAL_TREASURE_IN_HOARD 500                           #define INITIAL_TREASURE_IN_HOARD 500

/* Simulation variables */                                      /* Simulation variables */
:[K[K [KESCESC[KOO[KAA[K[K:[K[K[?1l>[?1049l]0;steven@ansible: ~/Dropbox/school/cmpt300/ass3steven@ansible:~/Dropbox/school/cmpt300/ass3$ sdiff smaugThread.c smaugProcess.c | less
[?1049h[?1h=#include <errno.h>                                              #include <errno.h> 
#include <wait.h>                                               #include <wait.h> 
#include <stdlib.h>                                             #include <stdlib.h> 
#include <stdio.h>                                              #include <stdio.h>
#include <unistd.h>                                             #include <unistd.h>
#include <curses.h>                                             #include <curses.h>
#include <time.h>                                               #include <time.h>
#include <signal.h>                                             #include <signal.h>
#include <sys/types.h>                                          #include <sys/types.h>
#include <sys/ipc.h>                                            #include <sys/ipc.h>
#include <sys/sem.h>                                            #include <sys/sem.h>
#include <sys/shm.h>                                            #include <sys/shm.h>
#include <sys/time.h>                                           #include <sys/time.h>
#include <sys/resource.h>                                       #include <sys/resource.h> 


/* Define semaphores to be placed in a single semaphore set *   /* Define semaphores to be placed in a single semaphore set *
/* Numbers indicate index in semaphore set for named semaphor   /* Numbers indicate index in semaphore set for named semaphor
#define SEM_COWSINGROUP 0                                       #define SEM_COWSINGROUP 0
#define SEM_PCOWSINGROUP 1                                      #define SEM_PCOWSINGROUP 1
#define SEM_SHEEPINGROUP 2                                      #define SEM_SHEEPINGROUP 2
#define SEM_PSHEEPINGROUP 3                                     #define SEM_PSHEEPINGROUP 3
#define SEM_SHEEPWAITING 4                                      #define SEM_SHEEPWAITING 4
#define SEM_COWSWAITING 5                                       #define SEM_COWSWAITING 5
#define SEM_PSHEEPEATEN 6                                       #define SEM_PSHEEPEATEN 6
#define SEM_PCOWSEATEN 7                                        #define SEM_PCOWSEATEN 7
#define SEM_SHEEPEATEN 8                                        #define SEM_SHEEPEATEN 8
#define SEM_COWSEATEN 9                                         #define SEM_COWSEATEN 9
#define SEM_SHEEPDEAD 10                                        #define SEM_SHEEPDEAD 10
#define SEM_COWSDEAD 11                                         #define SEM_COWSDEAD 11
#define SEM_PTERMINATE 12                                       #define SEM_PTERMINATE 12
#define SEM_DRAGONEATING 13                                     #define SEM_DRAGONEATING 13
#define SEM_DRAGONFIGHTING 14                                   #define SEM_DRAGONFIGHTING 14
#define SEM_DRAGONSLEEPING 15                                   #define SEM_DRAGONSLEEPING 15
#define SEM_PCOWMEALFLAG 16                                     #define SEM_PCOWMEALFLAG 16
#define SEM_PSHEEPMEALFLAG 17                                   #define SEM_PSHEEPMEALFLAG 17

#define SEM_PHUNTERCOUNT 18                                     #define SEM_PHUNTERCOUNT 18
#define SEM_HUNTERSWAITING 19                                   #define SEM_HUNTERSWAITING 19
#define SEM_HUNTERFINISH 20                                     #define SEM_HUNTERFINISH 20

#define SEM_PTHIEFCOUNT 21                                      #define SEM_PTHIEFCOUNT 21
#define SEM_THIEVESWAITING 22                                   #define SEM_THIEVESWAITING 22
#define SEM_THIEFFINISH 23                                      #define SEM_THIEFFINISH 23

#define MAX_SEMAPHORES 24                                       #define MAX_SEMAPHORES 24

/* System constants used to control simulation termination */   /* System constants used to control simulation termination */
#define MAX_SHEEP_EATEN 36                                      #define MAX_SHEEP_EATEN 36 
#define MAX_COWS_EATEN 12                                       #define MAX_COWS_EATEN 12
#define MAX_DEFEATED_HUNTERS 48                                 #define MAX_DEFEATED_HUNTERS 48
#define MAX_DEFEATED_THIEVES 36                                 #define MAX_DEFEATED_THIEVES 36
#define MAX_COWS_CREATED 80                                     #define MAX_COWS_CREATED 80
#define MIN_TREASURE_IN_HOARD 0                                 #define MIN_TREASURE_IN_HOARD 0
#define MAX_TREASURE_IN_HOARD 1000                              #define MAX_TREASURE_IN_HOARD 1000
#define INITIAL_TREASURE_IN_HOARD 500                           #define INITIAL_TREASURE_IN_HOARD 500

/* Simulation variables */                                      /* Simulation variables */
:[K[K [KESCESC[KOO[KBB[K#define SECONDS_TO_MICROSECONDS 1000000                         #define SECONDS_TO_MICROSECONDS 1000000
:[K[K [KESCESC[KOO[KBB[K// This should be 10 minutes, but that will make the simulati <
:[K[K [KESCESC[KOO[KBB[K// Smaug will nap for 2 seconds, but change to 10*60 = 600 se <
:[K[K [KESCESC[KOO[KBB[K#define SMAUG_NAP_LENGTH_US 2*SECONDS_TO_MICROSECONDS           #define SMAUG_NAP_LENGTH_US 2*SECONDS_TO_MICROSECONDS
:[K[K [KESCESC[KOO[KBB[K#define JEWELS_FROM_HUNTER_WIN 10                               #define JEWELS_FROM_HUNTER_WIN 10
:[K[K [KESCESC[KOO[KBB[K#define JEWELS_FROM_HUNTER_LOSE 5                               #define JEWELS_FROM_HUNTER_LOSE 5
:[K[K [KESCESC[KOO[KBB[K#define JEWELS_FROM_THIEF_WIN 8                                 #define JEWELS_FROM_THIEF_WIN 8
:[K[K [KESCESC[KOO[KBB[K#define JEWELS_FROM_THIEF_LOSE 20                               #define JEWELS_FROM_THIEF_LOSE 20
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K/* System constants to specify size of groups of cows*/         /* System constants to specify size of groups of cows*/
:[K[K [KESCESC[KOO[KBB[K#define SHEEP_IN_GROUP 3                                        #define SHEEP_IN_GROUP 3
:[K[K [KESCESC[KOO[KBB[K#define COWS_IN_GROUP 1                                         #define COWS_IN_GROUP 1
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K/* CREATING YOUR SEMAPHORES */                                  /* CREATING YOUR SEMAPHORES */
:[K[K [KESCESC[KOO[KBB[Kint semID;                                                      int semID; 
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[Kunion semun {                                                   union semun {
:[K[K [KESCESC[KOO[KBB[K        int val;                                                        int val;
:[K[K [KESCESC[KOO[KAA[K[HM/* Numbers indicate index in semaphore set for named semaphor   /* Numbers indicate index in semaphore set for named semaphor
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM/* Define semaphores to be placed in a single semaphore set *   /* Define semaphores to be placed in a single semaphore set *
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM#include <sys/resource.h>                                       #include <sys/resource.h> 
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM#include <sys/time.h>                                           #include <sys/time.h>
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM#include <sys/shm.h>                                            #include <sys/shm.h>
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM#include <sys/sem.h>                                            #include <sys/sem.h>
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM#include <sys/ipc.h>                                            #include <sys/ipc.h>
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM#include <sys/types.h>                                          #include <sys/types.h>
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM#include <signal.h>                                             #include <signal.h>
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM#include <time.h>                                               #include <time.h>
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM#include <curses.h>                                             #include <curses.h>
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM#include <unistd.h>                                             #include <unistd.h>
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM#include <stdio.h>                                              #include <stdio.h>
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM#include <stdlib.h>                                             #include <stdlib.h> 
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM#include <wait.h>                                               #include <wait.h> 
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM#include <errno.h>                                              #include <errno.h> 
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[K:[K[K [KESCESC[KOO[KAA[K[K:[K[K [KESCESC[KOO[KAA[K[K:[K[K [KESCESC[KOO[KAA[K[K:[K[K [KESCESC[KOO[KAA[K[K:[K[K [KESCESC[KOO[KAA[K[K:[K[K [KESCESC[KOO[KAA[K[K:[K[K [KESCESC[KOO[KAA[K[K:[K[K [KESCESC[KOO[KAA[K[K:[K[K [KESCESC[KOO[KAA[K[K:[K[K [KESCESC[KOO[KAA[K[K:[K[K [KESCESC[KOO[KAA[K[K:[K[K [KESCESC[KOO[KAA[K[K:[K[K [KESCESC[KOO[KAA[K[K:[K[K [KESCESC[KOO[KAA[K[K:[K[K [KESCESC[KOO[KAA[K[K:[K[K [KESCESC[KOO[KAA[K[K:[K[K [KESCESC[KOO[KAA[K[K:[K[K [KESCESC[KOO[KAA[K[K:[K[K [KESCESC[KOO[KAA[K[K:[K[K [KESCESC[KOO[KAA[K[K:[K[K [KESCESC[KOO[KAA[K[K:[K[K [KESCESC[KOO[KAA[K[K:[K[K [KESCESC[KOO[KAA[K[K:[K[K [KESCESC[KOO[KAA[K[K:[K[K [KESCESC[KOO[KAA[K[K:[K[K [KESCESC[KOO[KAA[K[K:[K[K [KESCESC[KOO[KAA[K[K:[K[K [KESCESC[KOO[KAA[K[K:[K[K [KESCESC[KOO[KAA[K[K:[K[K [KESCESC[KOO[KAA[K[K:[K[K [KESCESC[KOO[KAA[K[K:[K[K [KESCESC[KOO[KAA[K[K:[K[K [KESCESC[KOO[KAA[K[K:[K[K [KESCESC[KOO[KAA[K[K:[K[K [KESCESC[KOO[KAA[K[K:[K[K [KESCESC[KOO[KBB[K#define SECONDS_TO_MICROSECONDS 1000000                         #define SECONDS_TO_MICROSECONDS 1000000
:[K[K [KESCESC[KOO[KBB[K// This should be 10 minutes, but that will make the simulati <
:[K[K [KESCESC[KOO[KBB[K// Smaug will nap for 2 seconds, but change to 10*60 = 600 se <
:[K[K [KESCESC[KOO[KBB[K#define SMAUG_NAP_LENGTH_US 2*SECONDS_TO_MICROSECONDS           #define SMAUG_NAP_LENGTH_US 2*SECONDS_TO_MICROSECONDS
:[K[K [KESCESC[KOO[KBB[K#define JEWELS_FROM_HUNTER_WIN 10                               #define JEWELS_FROM_HUNTER_WIN 10
:[K[K [KESCESC[KOO[KBB[K#define JEWELS_FROM_HUNTER_LOSE 5                               #define JEWELS_FROM_HUNTER_LOSE 5
:[K[K [KESCESC[KOO[KBB[K#define JEWELS_FROM_THIEF_WIN 8                                 #define JEWELS_FROM_THIEF_WIN 8
:[K[K [KESCESC[KOO[KBB[K#define JEWELS_FROM_THIEF_LOSE 20                               #define JEWELS_FROM_THIEF_LOSE 20
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K/* System constants to specify size of groups of cows*/         /* System constants to specify size of groups of cows*/
:[K[K [KESCESC[KOO[KBB[K#define SHEEP_IN_GROUP 3                                        #define SHEEP_IN_GROUP 3
:[K[K [KESCESC[KOO[KBB[K#define COWS_IN_GROUP 1                                         #define COWS_IN_GROUP 1
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K/* CREATING YOUR SEMAPHORES */                                  /* CREATING YOUR SEMAPHORES */
:[K[K [KESCESC[KOO[KBB[Kint semID;                                                      int semID; 
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[Kunion semun {                                                   union semun {
:[K[K [KESCESC[KOO[KBB[K        int val;                                                        int val;
:[K[K [KESCESC[KOO[KBB[K        struct semid_ds *buf;                                           struct semid_ds *buf;
:[K[K [KESCESC[KOO[KBB[K        ushort *array;                                                  ushort *array;
:[K[K [KESCESC[KOO[KBB[K} seminfo;                                                      } seminfo;
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[Kstruct timeval startTime;                                       struct timeval startTime;
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K/*  Pointers and ids for shared memory segments */              /*  Pointers and ids for shared memory segments */
:[K[K [KESCESC[KOO[KBB[Kint *terminateFlagp = NULL;                                     int *terminateFlagp = NULL;
:[K[K [KESCESC[KOO[KBB[Kint terminateFlag = 0;                                          int terminateFlag = 0;
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[Kint *sheepMealFlagp = NULL;                                     int *sheepMealFlagp = NULL;
:[K[K [KESCESC[KOO[KBB[Kint *sheepCounterp = NULL;                                      int *sheepCounterp = NULL;
:[K[K [KESCESC[KOO[KBB[Kint *sheepEatenCounterp = NULL;                                 int *sheepEatenCounterp = NULL;
:[K[K [KESCESC[KOO[KBB[Kint sheepMealFlag = 0;                                          int sheepMealFlag = 0;
:[K[K [KESCESC[KOO[KBB[Kint sheepCounter = 0;                                           int sheepCounter = 0;
:[K[K [KESCESC[KOO[KBB[Kint sheepEatenCounter = 0;                                      int sheepEatenCounter = 0;
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[Kint *cowMealFlagP = NULL;                                       int *cowMealFlagP = NULL;
:[K[K [KESCESC[KOO[KBB[Kint *cowCounterp = NULL;                                        int *cowCounterp = NULL;
:[K[K [KESCESC[KOO[KBB[Kint *cowsEatenCounterp = NULL;                                  int *cowsEatenCounterp = NULL;
:[K[K [KESCESC[KOO[KBB[Kint cowMealFlag = 0;                                            int cowMealFlag = 0;
:[K[K [KESCESC[KOO[KBB[Kint cowCounter = 0;                                             int cowCounter = 0;
:[K[K [KESCESC[KOO[KBB[Kint cowsEatenCounter = 0;                                       int cowsEatenCounter = 0;
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[Kint *hunterCounterp = NULL;                                     int *hunterCounterp = NULL;
:[K[K [KESCESC[KOO[KBB[Kint hunterCounter = 0;                                          int hunterCounter = 0;
:[K[K [KESCESC[KOO[KBB[Kint *thiefCounterp = NULL;                                      int *thiefCounterp = NULL;
:[K[K [KESCESC[KOO[KBB[Kint thiefCounter = 0;                                           int thiefCounter = 0;
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K/* Main processID for output purposes */                      | /* Group IDs for managing/removing processes */
:[K[K [KESCESC[KOO[KBB[Kint parentProcessID = -1;                                       int parentProcessID = -1;
:[K[K [KESCESC[KOO[KBB[K                                                              > int smaugProcessID = -1;
:[K[K [KESCESC[KOO[KBB[K                                                              > int sheepProcessGID = -1;
:[K[K [KESCESC[KOO[KBB[K                                                              > int cowProcessGID = -1;
:[K[K [KESCESC[KOO[KBB[K                                                              > int hunterProcessGID = -1;
:[K[K [KESCESC[KOO[KBB[K                                                              > int thiefProcessGID = -1;
:[K[K [KESCESC[KOO[KBB[K                                                              >
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K/* Define the semaphore operations for each semaphore */        /* Define the semaphore operations for each semaphore */
:[K[K [KESCESC[KOO[KBB[K/* Arguments of each definition are: */                         /* Arguments of each definition are: */
:[K[K [KESCESC[KOO[KBB[K/* Name of semaphore on which the operation is done */          /* Name of semaphore on which the operation is done */
:[K[K [KESCESC[KOO[KBB[K/* Increment (amount added to the semaphore when operation ex   /* Increment (amount added to the semaphore when operation ex
:[K[K [KESCESC[KOO[KBB[K/* Flag values (block when semaphore <0, enable undo ...)*/     /* Flag values (block when semaphore <0, enable undo ...)*/
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K/*Number in group semaphores*/                                  /*Number in group semaphores*/
:[K[K [KESCESC[KOO[KBB[Kstruct sembuf WaitSheepInGroup={SEM_SHEEPINGROUP, -1, 0};       struct sembuf WaitSheepInGroup={SEM_SHEEPINGROUP, -1, 0};
:[K[K [KESCESC[KOO[KBB[Kstruct sembuf SignalSheepInGroup={SEM_SHEEPINGROUP, 1, 0};      struct sembuf SignalSheepInGroup={SEM_SHEEPINGROUP, 1, 0};
:[K[K [KESCESC[KOO[KBB[Kstruct sembuf WaitCowsInGroup={SEM_COWSINGROUP, -1, 0};         struct sembuf WaitCowsInGroup={SEM_COWSINGROUP, -1, 0};
:[K[K [KESCESC[KOO[KBB[Kstruct sembuf SignalCowsInGroup={SEM_COWSINGROUP, 1, 0};        struct sembuf SignalCowsInGroup={SEM_COWSINGROUP, 1, 0};
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K/*Number in group mutexes*/                                     /*Number in group mutexes*/
:[K[K [KESCESC[KOO[KBB[Kstruct sembuf WaitProtectSheepMealFlag={SEM_PSHEEPMEALFLAG, -   struct sembuf WaitProtectSheepMealFlag={SEM_PSHEEPMEALFLAG, -
:[K[K [KESCESC[KOO[KBB[Kstruct sembuf SignalProtectSheepMealFlag={SEM_PSHEEPMEALFLAG,   struct sembuf SignalProtectSheepMealFlag={SEM_PSHEEPMEALFLAG,
:[K[K [KESCESC[KOO[KBB[Kstruct sembuf WaitProtectSheepInGroup={SEM_PSHEEPINGROUP, -1,   struct sembuf WaitProtectSheepInGroup={SEM_PSHEEPINGROUP, -1,
:[K[K [KESCESC[KOO[KBB[Kstruct sembuf SignalProtectSheepInGroup={SEM_PSHEEPINGROUP, 1   struct sembuf SignalProtectSheepInGroup={SEM_PSHEEPINGROUP, 1
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[Kstruct sembuf WaitProtectCowMealFlag={SEM_PCOWMEALFLAG, -1, 0   struct sembuf WaitProtectCowMealFlag={SEM_PCOWMEALFLAG, -1, 0
:[K[K [KESCESC[KOO[KBB[Kstruct sembuf SignalProtectCowMealFlag={SEM_PCOWMEALFLAG, 1,    struct sembuf SignalProtectCowMealFlag={SEM_PCOWMEALFLAG, 1, 
:[K[K [KESCESC[KOO[KBB[Kstruct sembuf WaitProtectCowsInGroup={SEM_PCOWSINGROUP, -1, 0   struct sembuf WaitProtectCowsInGroup={SEM_PCOWSINGROUP, -1, 0
:[K[K [KESCESC[KOO[KBB[Kstruct sembuf SignalProtectCowsInGroup={SEM_PCOWSINGROUP, 1,    struct sembuf SignalProtectCowsInGroup={SEM_PCOWSINGROUP, 1, 
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[Kstruct sembuf WaitProtectThiefCount={SEM_PTHIEFCOUNT, -1, 0};   struct sembuf WaitProtectThiefCount={SEM_PTHIEFCOUNT, -1, 0};
:[K[K [KESCESC[KOO[KBB[Kstruct sembuf SignalProtectThiefCount={SEM_PTHIEFCOUNT, 1, 0}   struct sembuf SignalProtectThiefCount={SEM_PTHIEFCOUNT, 1, 0}
:[K[K [KESCESC[KOO[KBB[Kstruct sembuf WaitProtectHunterCount={SEM_PHUNTERCOUNT, -1, 0   struct sembuf WaitProtectHunterCount={SEM_PHUNTERCOUNT, -1, 0
:[K[K [KESCESC[KOO[KBB[Kstruct sembuf SignalProtectHunterCount={SEM_PHUNTERCOUNT, 1,    struct sembuf SignalProtectHunterCount={SEM_PHUNTERCOUNT, 1, 
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K/*Number waiting sempahores*/                                   /*Number waiting sempahores*/
:[K[K [KESCESC[KOO[KBB[Kstruct sembuf WaitSheepWaiting={SEM_SHEEPWAITING, -1, 0};       struct sembuf WaitSheepWaiting={SEM_SHEEPWAITING, -1, 0};
:[K[K [KESCESC[KOO[KBB[Kstruct sembuf SignalSheepWaiting={SEM_SHEEPWAITING, 1, 0};      struct sembuf SignalSheepWaiting={SEM_SHEEPWAITING, 1, 0};
:[K[K [KESCESC[KOO[KBB[Kstruct sembuf WaitCowsWaiting={SEM_COWSWAITING, -1, 0};         struct sembuf WaitCowsWaiting={SEM_COWSWAITING, -1, 0};
:[K[K [KESCESC[KOO[KBB[Kstruct sembuf SignalCowsWaiting={SEM_COWSWAITING, 1, 0};        struct sembuf SignalCowsWaiting={SEM_COWSWAITING, 1, 0};
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[Kstruct sembuf WaitHuntersWaiting={SEM_HUNTERSWAITING, -1, 0};   struct sembuf WaitHuntersWaiting={SEM_HUNTERSWAITING, -1, 0};
:[K[K [KESCESC[KOO[KBB[Kstruct sembuf SignalHuntersWaiting={SEM_HUNTERSWAITING, 1, 0}   struct sembuf SignalHuntersWaiting={SEM_HUNTERSWAITING, 1, 0}
:[K[K [KESCESC[KOO[KBB[Kstruct sembuf WaitHunterFinish={SEM_HUNTERFINISH, -1, 0};       struct sembuf WaitHunterFinish={SEM_HUNTERFINISH, -1, 0};
:[K[K [KESCESC[KOO[KBB[Kstruct sembuf SignalHunterFinish={SEM_HUNTERFINISH, 1, 0};      struct sembuf SignalHunterFinish={SEM_HUNTERFINISH, 1, 0};
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[Kstruct sembuf WaitThievesWaiting={SEM_THIEVESWAITING, -1, 0};   struct sembuf WaitThievesWaiting={SEM_THIEVESWAITING, -1, 0};
:[K[K [KESCESC[KOO[KBB[Kstruct sembuf SignalThievesWaiting={SEM_THIEVESWAITING, 1, 0}   struct sembuf SignalThievesWaiting={SEM_THIEVESWAITING, 1, 0}
:[K[K [KESCESC[KOO[KBB[Kstruct sembuf WaitThiefFinish={SEM_THIEFFINISH, -1, 0};         struct sembuf WaitThiefFinish={SEM_THIEFFINISH, -1, 0};
:[K[K [KESCESC[KOO[KBB[Kstruct sembuf SignalThiefFinish={SEM_THIEFFINISH, 1, 0};        struct sembuf SignalThiefFinish={SEM_THIEFFINISH, 1, 0};
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K/*Number eaten or fought semaphores*/                           /*Number eaten or fought semaphores*/
:[K[K [KESCESC[KOO[KBB[Kstruct sembuf WaitSheepEaten={SEM_SHEEPEATEN, -1, 0};           struct sembuf WaitSheepEaten={SEM_SHEEPEATEN, -1, 0};
:[K[K [KESCESC[KOO[KBB[Kstruct sembuf SignalSheepEaten={SEM_SHEEPEATEN, 1, 0};          struct sembuf SignalSheepEaten={SEM_SHEEPEATEN, 1, 0};
:[K[K [KESCESC[KOO[KBB[Kstruct sembuf WaitCowsEaten={SEM_COWSEATEN, -1, 0};             struct sembuf WaitCowsEaten={SEM_COWSEATEN, -1, 0};
:[K[K [KESCESC[KOO[KBB[Kstruct sembuf SignalCowsEaten={SEM_COWSEATEN, 1, 0};            struct sembuf SignalCowsEaten={SEM_COWSEATEN, 1, 0};
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K/*Number eaten or fought mutexes*/                              /*Number eaten or fought mutexes*/
:[K[K [KESCESC[KOO[KBB[Kstruct sembuf WaitProtectSheepEaten={SEM_PSHEEPEATEN, -1, 0};   struct sembuf WaitProtectSheepEaten={SEM_PSHEEPEATEN, -1, 0};
:[K[K [KESCESC[KOO[KBB[Kstruct sembuf SignalProtectSheepEaten={SEM_PSHEEPEATEN, 1, 0}   struct sembuf SignalProtectSheepEaten={SEM_PSHEEPEATEN, 1, 0}
:[K[K [KESCESC[KOO[KBB[Kstruct sembuf WaitProtectCowsEaten={SEM_PCOWSEATEN, -1, 0};     struct sembuf WaitProtectCowsEaten={SEM_PCOWSEATEN, -1, 0};
:[K[K [KESCESC[KOO[KBB[Kstruct sembuf SignalProtectCowsEaten={SEM_PCOWSEATEN, 1, 0};    struct sembuf SignalProtectCowsEaten={SEM_PCOWSEATEN, 1, 0};
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K/*Number Dead semaphores*/                                      /*Number Dead semaphores*/
:[K[K [KESCESC[KOO[KBB[Kstruct sembuf WaitSheepDead={SEM_SHEEPDEAD, -1, 0};             struct sembuf WaitSheepDead={SEM_SHEEPDEAD, -1, 0};
:[K[K [KESCESC[KOO[KBB[Kstruct sembuf SignalSheepDead={SEM_SHEEPDEAD, 1, 0};            struct sembuf SignalSheepDead={SEM_SHEEPDEAD, 1, 0};
:[K[K [KESCESC[KOO[KBB[Kstruct sembuf WaitCowsDead={SEM_COWSDEAD, -1, 0};               struct sembuf WaitCowsDead={SEM_COWSDEAD, -1, 0};
:[K[K [KESCESC[KOO[KBB[Kstruct sembuf SignalCowsDead={SEM_COWSDEAD, 1, 0};              struct sembuf SignalCowsDead={SEM_COWSDEAD, 1, 0};
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K/*Dragon Semaphores*/                                           /*Dragon Semaphores*/
:[K[K [KESCESC[KOO[KBB[Kstruct sembuf WaitDragonEating={SEM_DRAGONEATING, -1, 0};       struct sembuf WaitDragonEating={SEM_DRAGONEATING, -1, 0};
:[K[K [KESCESC[KOO[KBB[Kstruct sembuf SignalDragonEating={SEM_DRAGONEATING, 1, 0};      struct sembuf SignalDragonEating={SEM_DRAGONEATING, 1, 0};
:[K[K [KESCESC[KOO[KBB[Kstruct sembuf WaitDragonFighting={SEM_DRAGONFIGHTING, -1, 0};   struct sembuf WaitDragonFighting={SEM_DRAGONFIGHTING, -1, 0};
:[K[K [KESCESC[KOO[KBB[Kstruct sembuf SignalDragonFighting={SEM_DRAGONFIGHTING, 1, 0}   struct sembuf SignalDragonFighting={SEM_DRAGONFIGHTING, 1, 0}
:[K[K [KESCESC[KOO[KBB[Kstruct sembuf WaitDragonSleeping={SEM_DRAGONSLEEPING, -1, 0};   struct sembuf WaitDragonSleeping={SEM_DRAGONSLEEPING, -1, 0};
:[K[K [KESCESC[KOO[KBB[Kstruct sembuf SignalDragonSleeping={SEM_DRAGONSLEEPING, 1, 0}   struct sembuf SignalDragonSleeping={SEM_DRAGONSLEEPING, 1, 0}
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K/*Termination Mutex*/                                           /*Termination Mutex*/
:[K[K [KESCESC[KOO[KBB[Kstruct sembuf WaitProtectTerminate={SEM_PTERMINATE, -1, 0};     struct sembuf WaitProtectTerminate={SEM_PTERMINATE, -1, 0};
:[K[K [KESCESC[KOO[KBB[Kstruct sembuf SignalProtectTerminate={SEM_PTERMINATE, 1, 0};    struct sembuf SignalProtectTerminate={SEM_PTERMINATE, 1, 0};
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[Kdouble timeChange( struct timeval starttime );                  double timeChange( struct timeval starttime );
:[K[K [KESCESC[KOO[KBB[Kvoid initialize();                                              void initialize();
:[K[K [KESCESC[KOO[KBB[Kvoid terminateSimulation();                                     void terminateSimulation();
:[K[K [KESCESC[KOO[KBB[Kvoid releaseSemandMem();                                        void releaseSemandMem();
:[K[K [KESCESC[KOO[KBB[Kvoid semopChecked(int semaphoreID, struct sembuf *operation,    void semopChecked(int semaphoreID, struct sembuf *operation, 
:[K[K [KESCESC[KOO[KBB[Kvoid semctlChecked(int semaphoreID, int semNum, int flag, uni   void semctlChecked(int semaphoreID, int semNum, int flag, uni
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[Kvoid *smaug(void *smaugWinProbP)                              | void smaug(const int smaugWinProb)
:[K[K [KESCESC[KOO[KBB[K{                                                               {
:[K[K [KESCESC[KOO[KBB[K        const int smaugWinProb = *(int*)smaugWinProbP;        <
:[K[K [KESCESC[KOO[KBB[K        int k;                                                          int k;
:[K[K [KESCESC[KOO[KBB[K        unsigned long localThreadID = (unsigned long)pthread_ |         int localpid;
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K        /* local counters used only for smaug routine */                /* local counters used only for smaug routine */
:[K[K [KESCESC[KOO[KBB[K        int numJewels = INITIAL_TREASURE_IN_HOARD;                      int numJewels = INITIAL_TREASURE_IN_HOARD;
:[K[K [KESCESC[KOO[KBB[K        int sheepEatenTotal = 0;                                        int sheepEatenTotal = 0;
:[K[K [KESCESC[KOO[KBB[K        int cowsEatenTotal = 0;                                         int cowsEatenTotal = 0;
:[K[K [KESCESC[KOO[KBB[K        int thievesDefeatedTotal = 0;                                   int thievesDefeatedTotal = 0;
:[K[K [KESCESC[KOO[KBB[K        int huntersDefeatedTotal = 0;                                   int huntersDefeatedTotal = 0;
:[K[K [KESCESC[KOO[KBB[K        int sleepThisIteration = 1;                                     int sleepThisIteration = 1;
:[K[K [KESCESC[KOO[KBB[K        int terminateNow = 0;                                           int terminateNow = 0;
:[K[K [KESCESC[KOO[KBB[K        /* Initialize random number generator*/                         /* Initialize random number generator*/
:[K[K [KESCESC[KOO[KBB[K        /* Random numbers are used to determine the time betw           /* Random numbers are used to determine the time betw
:[K[K [KESCESC[KOO[KBB[K                                                              |         smaugProcessID = getpid();
:[K[K [KESCESC[KOO[KBB[K        printf("SMAUGSMAUGSMAUGSMAUGSMAU   PTHREADID is %lu \ |         printf("SMAUGSMAUGSMAUGSMAUGSMAU   PID is %d \n", sma
:[K[K [KESCESC[KOO[KBB[K                                                              |         localpid = smaugProcessID;
:[K[K [KESCESC[KOO[KBB[K        while (terminateNow == 0) {                                     while (terminateNow == 0) {             
:[K[K [KESCESC[KOO[KBB[K                // Smaug goes to sleep if nothing happens and                   // Smaug goes to sleep if nothing happens and
:[K[K [KESCESC[KOO[KBB[K                if(sleepThisIteration == 1) {                                   if(sleepThisIteration == 1) {
:[K[K [KESCESC[KOO[KBB[K                        printf("SMAUGSMAUGSMAUGSMAUGSMAU   Sm                           printf("SMAUGSMAUGSMAUGSMAUGSMAU   Sm
:[K[K [KESCESC[KOO[KBB[K                        // We must reset the semaphore to pre                           // We must reset the semaphore to pre
:[K[K [KESCESC[KOO[KBB[K                        seminfo.val = 0;                                                seminfo.val = 0;
:[K[K [KESCESC[KOO[KBB[K                        semctlChecked(semID, SEM_DRAGONSLEEPI                           semctlChecked(semID, SEM_DRAGONSLEEPI
:[K[K [KESCESC[KOO[KBB[K                        semopChecked(semID, &WaitDragonSleepi                           semopChecked(semID, &WaitDragonSleepi
:[K[K [KESCESC[KOO[KBB[K                        printf("SMAUGSMAUGSMAUGSMAUGSMAU   Sm                           printf("SMAUGSMAUGSMAUGSMAUGSMAU   Sm
:[K[K [KESCESC[KOO[KBB[K                        printf("SMAUGSMAUGSMAUGSMAUGSMAU   Sm                           printf("SMAUGSMAUGSMAUGSMAUGSMAU   Sm
:[K[K [KESCESC[KOO[KBB[K                } else {                                                        } else {
:[K[K [KESCESC[KOO[KBB[K                        sleepThisIteration = 1;                                         sleepThisIteration = 1;
:[K[K [KESCESC[KOO[KBB[K                }                                                               }
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K                semopChecked(semID, &WaitProtectThiefCount, 1                   semopChecked(semID, &WaitProtectThiefCount, 1
:[K[K [KESCESC[KOO[KBB[K                semopChecked(semID, &WaitProtectHunterCount,                    semopChecked(semID, &WaitProtectHunterCount, 
:[K[K [KESCESC[KOO[KBB[K                if( *hunterCounterp + *thiefCounterp > 0) {                     if( *hunterCounterp + *thiefCounterp > 0) {
:[K[K [KESCESC[KOO[KBB[K                        while( *hunterCounterp + *thiefCounte                           while( *hunterCounterp + *thiefCounte
:[K[K [KESCESC[KOO[KBB[K                                semopChecked(semID, &SignalPr                                   semopChecked(semID, &SignalPr
:[K[K [KESCESC[KOO[KBB[K                                if(*thiefCounterp > 0) {                                        if(*thiefCounterp > 0) {
:[K[K [KESCESC[KOO[KBB[K                                        *thiefCounterp = *thi                                           *thiefCounterp = *thi
:[K[K [KESCESC[KOO[KBB[K                                        semopChecked(semID, &                                           semopChecked(semID, &
:[K[K [KESCESC[KOO[KBB[K                                        // Wake thief from wa                                           // Wake thief from wa
:[K[K [KESCESC[KOO[KBB[K                                        semopChecked(semID, &                                           semopChecked(semID, &
:[K[K [KESCESC[KOO[KBB[K                                        printf("SMAUGSMAUGSMA                                           printf("SMAUGSMAUGSMA
:[K[K [KESCESC[KOO[KBB[K                                        if( rand() % 100 <= s                                           if( rand() % 100 <= s
:[K[K [KESCESC[KOO[KBB[K                                                thievesDefeat                                                   thievesDefeat
:[K[K [KESCESC[KOO[KBB[K                                                numJewels +=                                                    numJewels += 
:[K[K [KESCESC[KOO[KBB[K                                                printf("SMAUG                                                   printf("SMAUG
:[K[K [KESCESC[KOO[KBB[K                                                printf("SMAUG                                                   printf("SMAUG
:[K[K [KESCESC[KOO[KBB[K                                                if(thievesDef                                                   if(thievesDef
:[K[K [KESCESC[KOO[KBB[K                                                        print                                                           print
:[K[K [KESCESC[KOO[KBB[K                                                        termi                                                           termi
:[K[K [KESCESC[KOO[KBB[K                                                        // Sh <
:[K[K [KESCESC[KOO[KBB[K                                                        *term                                                           *term
:[K[K [KESCESC[KOO[KBB[K                                                        break                                                           break
:[K[K [KESCESC[KOO[KBB[K                                                }                                                               }
:[K[K [KESCESC[KOO[KBB[K                                        } else {                                                        } else {
:[K[K [KESCESC[KOO[KBB[K                                                numJewels -=                                                    numJewels -= 
:[K[K [KESCESC[KOO[KBB[K                                                printf("SMAUG                                                   printf("SMAUG
:[K[K [KESCESC[KOO[KBB[K                                                printf("SMAUG                                                   printf("SMAUG
:[K[K [KESCESC[KOO[KBB[K                                        }                                                               }
:[K[K [KESCESC[KOO[KBB[K                                        if( numJewels < MIN_T                                           if( numJewels < MIN_T
:[K[K [KESCESC[KOO[KBB[K                                                char* conditi                                                   char* conditi
:[K[K [KESCESC[KOO[KBB[K                                                printf("SMAUG                                                   printf("SMAUG
:[K[K [KESCESC[KOO[KBB[K                                                terminateNow                                                    terminateNow 
:[K[K [KESCESC[KOO[KBB[K                                                *terminateFla                                                   *terminateFla
:[K[K [KESCESC[KOO[KBB[K                                                break;                                                          break;
:[K[K [KESCESC[KOO[KBB[K                                        }                                                               }
:[K[K [KESCESC[KOO[KBB[K                                        semopChecked(semID, &                                           semopChecked(semID, &
:[K[K [KESCESC[KOO[KBB[K                                        printf("SMAUGSMAUGSMA |                                         printf("SMAUGSMAUGSMA
:[K[K [KESCESC[KOO[KBB[K                                        // Nap and breath                                               // Nap and breath
:[K[K [KESCESC[KOO[KBB[K                                        printf("SMAUGSMAUGSMA                                           printf("SMAUGSMAUGSMA
:[K[K [KESCESC[KOO[KBB[K                                        usleep(SMAUG_NAP_LENG                                           usleep(SMAUG_NAP_LENG
:[K[K [KESCESC[KOO[KBB[K                                        printf("SMAUGSMAUGSMA                                           printf("SMAUGSMAUGSMA
:[K[K [KESCESC[KOO[KBB[K                                } else {                                                        } else {
:[K[K [KESCESC[KOO[KBB[K                                        semopChecked(semID, &                                           semopChecked(semID, &
:[K[K [KESCESC[KOO[KBB[K                                        semopChecked(semID, &                                           semopChecked(semID, &
:[K[K [KESCESC[KOO[KBB[K                                        if(*hunterCounterp >                                            if(*hunterCounterp > 
:[K[K [KESCESC[KOO[KBB[K                                                *hunterCounte                                                   *hunterCounte
:[K[K [KESCESC[KOO[KBB[K                                                printf("SMAUG                                                   printf("SMAUG
:[K[K [KESCESC[KOO[KBB[K                                                semopChecked(                                                   semopChecked(
:[K[K [KESCESC[KOO[KBB[K                                                // Wake hunte                                                   // Wake hunte
:[K[K [KESCESC[KOO[KBB[K                                                semopChecked(                                                   semopChecked(
:[K[K [KESCESC[KOO[KBB[K                                                printf("SMAUG                                                   printf("SMAUG
:[K[K [KESCESC[KOO[KBB[K                                                if( rand() %                                                    if( rand() % 
:[K[K [KESCESC[KOO[KBB[K                                                        hunte                                                           hunte
:[K[K [KESCESC[KOO[KBB[K                                                        numJe                                                           numJe
:[K[K [KESCESC[KOO[KBB[K                                                        print                                                           print
:[K[K [KESCESC[KOO[KBB[K                                                        print                                                           print
:[K[K [KESCESC[KOO[KBB[K                                                        if(hu                                                           if(hu
:[K[K [KESCESC[KOO[KBB[K                                                                                                                        
:[K[K [KESCESC[KOO[KBB[K                                                                                                                        
:[K[K [KESCESC[KOO[KBB[K                                                                                                                        
:[K[K [KESCESC[KOO[KBB[K                                                                                                                        
:[K[K [KESCESC[KOO[KBB[K                                                        }                                                               }
:[K[K [KESCESC[KOO[KBB[K                                                } else {                                                        } else {
:[K[K [KESCESC[KOO[KBB[K                                                        numJe                                                           numJe
:[K[K [KESCESC[KOO[KBB[K                                                        print                                                           print
:[K[K [KESCESC[KOO[KBB[K                                                        print                                                           print
:[K[K [KESCESC[KOO[KBB[K                                                }                                                               }
:[K[K [KESCESC[KOO[KBB[K                                                if( numJewels                                                   if( numJewels
:[K[K [KESCESC[KOO[KBB[K                                                        char*                                                           char*
:[K[K [KESCESC[KOO[KBB[K                                                        print                                                           print
:[K[K [KESCESC[KOO[KBB[K                                                        termi                                                           termi
:[K[K [KESCESC[KOO[KBB[K                                                        *term                                                           *term
:[K[K [KESCESC[KOO[KBB[K                                                        break                                                           break
:[K[K [KESCESC[KOO[KBB[K                                                }                                                               }
:[K[K [KESCESC[KOO[KBB[K                                                semopChecked(                                                   semopChecked(
:[K[K [KESCESC[KOO[KBB[K                                                printf("SMAUG |                                                 printf("SMAUG
:[K[K [KESCESC[KOO[KBB[K                                                // Nap and br                                                   // Nap and br
:[K[K [KESCESC[KOO[KBB[K                                                printf("SMAUG                                                   printf("SMAUG
:[K[K [KESCESC[KOO[KBB[K                                                usleep(SMAUG_                                                   usleep(SMAUG_
:[K[K [KESCESC[KOO[KBB[K                                                printf("SMAUG                                                   printf("SMAUG
:[K[K [KESCESC[KOO[KBB[K                                        } else {                                                        } else {
:[K[K [KESCESC[KOO[KBB[K                                                semopChecked(                                                   semopChecked(
:[K[K [KESCESC[KOO[KBB[K                                        }                                                               }
:[K[K [KESCESC[KOO[KBB[K                                }                                                               }
:[K[K [KESCESC[KOO[KBB[K                                // Apply protection for next                                    // Apply protection for next 
:[K[K [KESCESC[KOO[KBB[K                                semopChecked(semID, &WaitProt                                   semopChecked(semID, &WaitProt
:[K[K [KESCESC[KOO[KBB[K                                semopChecked(semID, &WaitProt                                   semopChecked(semID, &WaitProt
:[K[K [KESCESC[KOO[KBB[K                        }                                                               }
:[K[K [KESCESC[KOO[KBB[K                        // Release protection                                           // Release protection
:[K[K [KESCESC[KOO[KBB[K                        semopChecked(semID, &SignalProtectHun                           semopChecked(semID, &SignalProtectHun
:[K[K [KESCESC[KOO[KBB[K                        semopChecked(semID, &SignalProtectThi                           semopChecked(semID, &SignalProtectThi
:[K[K [KESCESC[KOO[KBB[K                } else {                                                        } else {
:[K[K [KESCESC[KOO[KBB[K                        // Release protection                                           // Release protection
:[K[K [KESCESC[KOO[KBB[K                        semopChecked(semID, &SignalProtectHun                           semopChecked(semID, &SignalProtectHun
:[K[K [KESCESC[KOO[KBB[K                        semopChecked(semID, &SignalProtectThi                           semopChecked(semID, &SignalProtectThi
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K                        // Check animals                                                // Check animals
:[K[K [KESCESC[KOO[KBB[K                        semopChecked(semID, &WaitProtectCowMe                           semopChecked(semID, &WaitProtectCowMe
:[K[K [KESCESC[KOO[KBB[K                        semopChecked(semID, &WaitProtectSheep                           semopChecked(semID, &WaitProtectSheep
:[K[K [KESCESC[KOO[KBB[K                        // If there's a meal of x cows and y                            // If there's a meal of x cows and y 
:[K[K [KESCESC[KOO[KBB[K                        while( *cowMealFlagP >= 1 && *sheepMe                           while( *cowMealFlagP >= 1 && *sheepMe
:[K[K [KESCESC[KOO[KBB[K                                *sheepMealFlagp = *sheepMealF                                   *sheepMealFlagp = *sheepMealF
:[K[K [KESCESC[KOO[KBB[K                                *cowMealFlagP = *cowMealFlagP                                   *cowMealFlagP = *cowMealFlagP
:[K[K [KESCESC[KOO[KBB[K                                int mealsLeft = *cowMealFlagP                                   int mealsLeft = *cowMealFlagP
:[K[K [KESCESC[KOO[KBB[K                                printf("SMAUGSMAUGSMAUGSMAUGS                                   printf("SMAUGSMAUGSMAUGSMAUGS
:[K[K [KESCESC[KOO[KBB[K                                semopChecked(semID, &SignalPr                                   semopChecked(semID, &SignalPr
:[K[K [KESCESC[KOO[KBB[K                                semopChecked(semID, &SignalPr                                   semopChecked(semID, &SignalPr
:[K[K [KESCESC[KOO[KBB[K                                printf("SMAUGSMAUGSMAUGSMAUGS                                   printf("SMAUGSMAUGSMAUGSMAUGS
:[K[K [KESCESC[KOO[KBB[K                                for( k = 0; k < SHEEP_IN_GROU                                   for( k = 0; k < SHEEP_IN_GROU
:[K[K [KESCESC[KOO[KBB[K                                        semopChecked(semID, &                                           semopChecked(semID, &
:[K[K [KESCESC[KOO[KBB[K                                        printf("SMAUGSMAUGSMA                                           printf("SMAUGSMAUGSMA
:[K[K [KESCESC[KOO[KBB[K                                }                                                               }
:[K[K [KESCESC[KOO[KBB[K                                for( k = 0; k < COWS_IN_GROUP                                   for( k = 0; k < COWS_IN_GROUP
:[K[K [KESCESC[KOO[KBB[K                                        semopChecked(semID, &                                           semopChecked(semID, &
:[K[K [KESCESC[KOO[KBB[K                                        printf("SMAUGSMAUGSMA                                           printf("SMAUGSMAUGSMA
:[K[K [KESCESC[KOO[KBB[K                                }                                                               }
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K                                /*Smaug waits to eat*/                                          /*Smaug waits to eat*/
:[K[K [KESCESC[KOO[KBB[K                                semopChecked(semID, &WaitDrag                                   semopChecked(semID, &WaitDrag
:[K[K [KESCESC[KOO[KBB[K                                for( k = 0; k < SHEEP_IN_GROU                                   for( k = 0; k < SHEEP_IN_GROU
:[K[K [KESCESC[KOO[KBB[K                                        semopChecked(semID, &                                           semopChecked(semID, &
:[K[K [KESCESC[KOO[KBB[K                                        sheepEatenTotal++;                                              sheepEatenTotal++;
:[K[K [KESCESC[KOO[KBB[K                                        printf("SMAUGSMAUGSMA                                           printf("SMAUGSMAUGSMA
:[K[K [KESCESC[KOO[KBB[K                                }                                                               }
:[K[K [KESCESC[KOO[KBB[K                                for( k = 0; k < COWS_IN_GROUP                                   for( k = 0; k < COWS_IN_GROUP
:[K[K [KESCESC[KOO[KBB[K                                        semopChecked(semID, &                                           semopChecked(semID, &
:[K[K [KESCESC[KOO[KBB[K                                        cowsEatenTotal++;                                               cowsEatenTotal++;
:[K[K [KESCESC[KOO[KBB[K                                        printf("SMAUGSMAUGSMA                                           printf("SMAUGSMAUGSMA
:[K[K [KESCESC[KOO[KBB[K                                }                                                               }
:[K[K [KESCESC[KOO[KBB[K                                printf("SMAUGSMAUGSMAUGSMAUGS |                                 printf("SMAUGSMAUGSMAUGSMAUGS
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K                                // Terminate if terminate con                                   // Terminate if terminate con
:[K[K [KESCESC[KOO[KBB[K                                if(sheepEatenTotal >= MAX_SHE                                   if(sheepEatenTotal >= MAX_SHE
:[K[K [KESCESC[KOO[KBB[K                                        printf("SMAUGSMAUGSMA                                           printf("SMAUGSMAUGSMA
:[K[K [KESCESC[KOO[KBB[K                                        terminateNow = 1;                                               terminateNow = 1;
:[K[K [KESCESC[KOO[KBB[K                                        *terminateFlagp= 1;                                             *terminateFlagp= 1;
:[K[K [KESCESC[KOO[KBB[K                                        break;                                                          break; 
:[K[K [KESCESC[KOO[KBB[K                                }                                                               }
:[K[K [KESCESC[KOO[KBB[K                                if(cowsEatenTotal >= MAX_COWS                                   if(cowsEatenTotal >= MAX_COWS
:[K[K [KESCESC[KOO[KBB[K                                        printf("SMAUGSMAUGSMA                                           printf("SMAUGSMAUGSMA
:[K[K [KESCESC[KOO[KBB[K                                        terminateNow = 1;                                               terminateNow = 1;
:[K[K [KESCESC[KOO[KBB[K                                        *terminateFlagp= 1;                                             *terminateFlagp= 1;
:[K[K [KESCESC[KOO[KBB[K                                        break;                                                          break; 
:[K[K [KESCESC[KOO[KBB[K                                }                                                               }
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K                                /* Smaug checks to see if ano                                   /* Smaug checks to see if ano
:[K[K [KESCESC[KOO[KBB[K                                printf("SMAUGSMAUGSMAUGSMAUGS                                   printf("SMAUGSMAUGSMAUGSMAUGS
:[K[K [KESCESC[KOO[KBB[K                                semopChecked(semID, &WaitProt                                   semopChecked(semID, &WaitProt
:[K[K [KESCESC[KOO[KBB[K                                if( *cowMealFlagP > 0  ) {                                      if( *cowMealFlagP > 0  ) {
:[K[K [KESCESC[KOO[KBB[K                                        // Mutex check for sh                                           // Mutex check for sh
:[K[K [KESCESC[KOO[KBB[K                                        semopChecked(semID, &                                           semopChecked(semID, &
:[K[K [KESCESC[KOO[KBB[K                                        if(*sheepMealFlagp >                                            if(*sheepMealFlagp > 
:[K[K [KESCESC[KOO[KBB[K                                                semopChecked(                                                   semopChecked(
:[K[K [KESCESC[KOO[KBB[K                                                semopChecked(                                                   semopChecked(
:[K[K [KESCESC[KOO[KBB[K                                                // Check if t                                                   // Check if t
:[K[K [KESCESC[KOO[KBB[K                                                if( *thiefCou                                                   if( *thiefCou
:[K[K [KESCESC[KOO[KBB[K                                                        semop                                                           semop
:[K[K [KESCESC[KOO[KBB[K                                                        semop                                                           semop
:[K[K [KESCESC[KOO[KBB[K                                                //      semop |                                                         semop
:[K[K [KESCESC[KOO[KBB[K                                                //      semop |                                                         semop
:[K[K [KESCESC[KOO[KBB[K                                                        // Th                                                           // Th
:[K[K [KESCESC[KOO[KBB[K                                                        sleep                                                           sleep
:[K[K [KESCESC[KOO[KBB[K                                                        break                                                           break
:[K[K [KESCESC[KOO[KBB[K                                                } else {                                                        } else {
:[K[K [KESCESC[KOO[KBB[K                                                        semop                                                           semop
:[K[K [KESCESC[KOO[KBB[K                                                        semop                                                           semop
:[K[K [KESCESC[KOO[KBB[K                                                        // No                                                           // No
:[K[K [KESCESC[KOO[KBB[K                                                        print                                                           print
:[K[K [KESCESC[KOO[KBB[K                                                        conti                                                           conti
:[K[K [KESCESC[KOO[KBB[K                                                }                                                               }
:[K[K [KESCESC[KOO[KBB[K                                        } else {                                                        } else {
:[K[K [KESCESC[KOO[KBB[K                                                // Cow and sh |                                                 semopChecked(
:[K[K [KESCESC[KOO[KBB[K                                                //semopChecke |                                                 semopChecked(
:[K[K [KESCESC[KOO[KBB[K                                                //semopChecke <
:[K[K [KESCESC[KOO[KBB[K                                                // Break out                                                    // Break out 
:[K[K [KESCESC[KOO[KBB[K                                                break;                                                          break;
:[K[K [KESCESC[KOO[KBB[K                                        }                                                               }
:[K[K [KESCESC[KOO[KBB[K                                }                                                               }
:[K[K [KESCESC[KOO[KBB[K                                                              >                                 else {
:[K[K [KESCESC[KOO[KBB[K                                                              >                                         semopChecked(semID, &
:[K[K [KESCESC[KOO[KBB[K                                                              >                                         printf("SMAUGSMAUGSMA
:[K[K [KESCESC[KOO[KBB[K                                                              >                                         semopChecked(semID, &
:[K[K [KESCESC[KOO[KBB[K                                                              >                                         printf("SMAUGSMAUGSMA
:[K[K [KESCESC[KOO[KBB[K                                                              >                                         break;
:[K[K [KESCESC[KOO[KBB[K                                                              >                                 }
:[K[K [KESCESC[KOO[KBB[K                                                              >                         } /*else {
:[K[K [KESCESC[KOO[KBB[K                                                              >                                 // Resume execution at beginn
:[K[K [KESCESC[KOO[KBB[K                                                              >                                 semopChecked(semID, &SignalPr
:[K[K [KESCESC[KOO[KBB[K                                semopChecked(semID, &SignalPr                                   semopChecked(semID, &SignalPr
:[K[K [KESCESC[KOO[KBB[K                        }                                     |                                 continue;
:[K[K [KESCESC[KOO[KBB[K                                                              >                         }*/
:[K[K [KESCESC[KOO[KBB[K                        semopChecked(semID, &SignalProtectShe                           semopChecked(semID, &SignalProtectShe
:[K[K [KESCESC[KOO[KBB[K                        semopChecked(semID, &SignalProtectCow                           semopChecked(semID, &SignalProtectCow
:[K[K [KESCESC[KOO[KBB[K                }                                                               }
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        return NULL;                                          <
:[K[K [KESCESC[KOO[KBB[K}                                                               }
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[Kvoid initialize()                                               void initialize()
:[K[K [KESCESC[KOO[KBB[K{                                                               {
:[K[K [KESCESC[KOO[KBB[K        /* Init semaphores */                                           /* Init semaphores */
:[K[K [KESCESC[KOO[KBB[K        semID=semget(IPC_PRIVATE, MAX_SEMAPHORES, 0666 | IPC_           semID=semget(IPC_PRIVATE, MAX_SEMAPHORES, 0666 | IPC_
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K        /* Init to zero, no elements are produced yet */                /* Init to zero, no elements are produced yet */
:[K[K [KESCESC[KOO[KBB[K        seminfo.val=0;                                                  seminfo.val=0;
:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_SHEEPINGROUP, SETVAL, seminf           semctlChecked(semID, SEM_SHEEPINGROUP, SETVAL, seminf
:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_SHEEPWAITING, SETVAL, seminf           semctlChecked(semID, SEM_SHEEPWAITING, SETVAL, seminf
:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_SHEEPEATEN, SETVAL, seminfo)           semctlChecked(semID, SEM_SHEEPEATEN, SETVAL, seminfo)
:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_SHEEPDEAD, SETVAL, seminfo);           semctlChecked(semID, SEM_SHEEPDEAD, SETVAL, seminfo);
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_COWSINGROUP, SETVAL, seminfo           semctlChecked(semID, SEM_COWSINGROUP, SETVAL, seminfo
:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_COWSWAITING, SETVAL, seminfo           semctlChecked(semID, SEM_COWSWAITING, SETVAL, seminfo
:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_COWSEATEN, SETVAL, seminfo);           semctlChecked(semID, SEM_COWSEATEN, SETVAL, seminfo);
:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_COWSDEAD, SETVAL, seminfo);            semctlChecked(semID, SEM_COWSDEAD, SETVAL, seminfo);
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_HUNTERSWAITING, SETVAL, semi           semctlChecked(semID, SEM_HUNTERSWAITING, SETVAL, semi
:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_HUNTERFINISH, SETVAL, seminf           semctlChecked(semID, SEM_HUNTERFINISH, SETVAL, seminf
:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_THIEVESWAITING, SETVAL, semi           semctlChecked(semID, SEM_THIEVESWAITING, SETVAL, semi
:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_THIEFFINISH, SETVAL, seminfo           semctlChecked(semID, SEM_THIEFFINISH, SETVAL, seminfo
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_DRAGONFIGHTING, SETVAL, semi           semctlChecked(semID, SEM_DRAGONFIGHTING, SETVAL, semi
:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_DRAGONSLEEPING, SETVAL, semi           semctlChecked(semID, SEM_DRAGONSLEEPING, SETVAL, semi
:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_DRAGONEATING, SETVAL, seminf           semctlChecked(semID, SEM_DRAGONEATING, SETVAL, seminf
:[K[K [KESCESC[KOO[KBB[K        printf("!!INIT!!INIT!!INIT!!  semaphores initiialized           printf("!!INIT!!INIT!!INIT!!  semaphores initiialized
:[K[K [KESCESC[KOO[KBB[K                                                                        
:[K[K [KESCESC[KOO[KBB[K        /* Init Mutex to one */                                         /* Init Mutex to one */
:[K[K [KESCESC[KOO[KBB[K        seminfo.val=1;                                                  seminfo.val=1;
:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_PTERMINATE, SETVAL, seminfo)           semctlChecked(semID, SEM_PTERMINATE, SETVAL, seminfo)
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_PSHEEPMEALFLAG, SETVAL, semi           semctlChecked(semID, SEM_PSHEEPMEALFLAG, SETVAL, semi
:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_PSHEEPINGROUP, SETVAL, semin           semctlChecked(semID, SEM_PSHEEPINGROUP, SETVAL, semin
:[K[K [KESCESC[KOO[KAA[K[HM                                                break;                                                          break;
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM                                                // Break out                                                    // Break out 
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM                                                //semopChecke <
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM                                                //semopChecke |                                                 semopChecked(
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM                                                // Cow and sh |                                                 semopChecked(
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM                                        } else {                                                        } else {
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM                                                }                                                               }
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM                                                        conti                                                           conti
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM                                                        print                                                           print
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM                                                        // No                                                           // No
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM                                                        semop                                                           semop
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM                                                        semop                                                           semop
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM                                                } else {                                                        } else {
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM                                                        break                                                           break
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM                                                        sleep                                                           sleep
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM                                                        // Th                                                           // Th
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM                                                //      semop |                                                         semop
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM                                                //      semop |                                                         semop
[59;1H[K:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_COWSDEAD, SETVAL, seminfo);            semctlChecked(semID, SEM_COWSDEAD, SETVAL, seminfo);
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_HUNTERSWAITING, SETVAL, semi           semctlChecked(semID, SEM_HUNTERSWAITING, SETVAL, semi
:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_HUNTERFINISH, SETVAL, seminf           semctlChecked(semID, SEM_HUNTERFINISH, SETVAL, seminf
:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_THIEVESWAITING, SETVAL, semi           semctlChecked(semID, SEM_THIEVESWAITING, SETVAL, semi
:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_THIEFFINISH, SETVAL, seminfo           semctlChecked(semID, SEM_THIEFFINISH, SETVAL, seminfo
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_DRAGONFIGHTING, SETVAL, semi           semctlChecked(semID, SEM_DRAGONFIGHTING, SETVAL, semi
:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_DRAGONSLEEPING, SETVAL, semi           semctlChecked(semID, SEM_DRAGONSLEEPING, SETVAL, semi
:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_DRAGONEATING, SETVAL, seminf           semctlChecked(semID, SEM_DRAGONEATING, SETVAL, seminf
:[K[K [KESCESC[KOO[KBB[K        printf("!!INIT!!INIT!!INIT!!  semaphores initiialized           printf("!!INIT!!INIT!!INIT!!  semaphores initiialized
:[K[K [KESCESC[KOO[KBB[K                                                                        
:[K[K [KESCESC[KOO[KBB[K        /* Init Mutex to one */                                         /* Init Mutex to one */
:[K[K [KESCESC[KOO[KBB[K        seminfo.val=1;                                                  seminfo.val=1;
:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_PTERMINATE, SETVAL, seminfo)           semctlChecked(semID, SEM_PTERMINATE, SETVAL, seminfo)
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_PSHEEPMEALFLAG, SETVAL, semi           semctlChecked(semID, SEM_PSHEEPMEALFLAG, SETVAL, semi
:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_PSHEEPINGROUP, SETVAL, semin           semctlChecked(semID, SEM_PSHEEPINGROUP, SETVAL, semin
:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_PSHEEPEATEN, SETVAL, seminfo           semctlChecked(semID, SEM_PSHEEPEATEN, SETVAL, seminfo
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_PCOWMEALFLAG, SETVAL, seminf           semctlChecked(semID, SEM_PCOWMEALFLAG, SETVAL, seminf
:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_PCOWSINGROUP, SETVAL, seminf           semctlChecked(semID, SEM_PCOWSINGROUP, SETVAL, seminf
:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_PCOWSEATEN, SETVAL, seminfo)           semctlChecked(semID, SEM_PCOWSEATEN, SETVAL, seminfo)
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_PTHIEFCOUNT, SETVAL, seminfo           semctlChecked(semID, SEM_PTHIEFCOUNT, SETVAL, seminfo
:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_PHUNTERCOUNT, SETVAL, seminf           semctlChecked(semID, SEM_PHUNTERCOUNT, SETVAL, seminf
:[K[K [KESCESC[KOO[KBB[K        printf("!!INIT!!INIT!!INIT!!  mutexes initiialized\n"           printf("!!INIT!!INIT!!INIT!!  mutexes initiialized\n"
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K        /* Now we create and attach  the segments of shared m           /* Now we create and attach  the segments of shared m
:[K[K [KESCESC[KOO[KBB[K        if ((terminateFlag = shmget(IPC_PRIVATE, sizeof(int),           if ((terminateFlag = shmget(IPC_PRIVATE, sizeof(int),
:[K[K [KESCESC[KOO[KBB[K                printf("!!INIT!!INIT!!INIT!!  shm not created                   printf("!!INIT!!INIT!!INIT!!  shm not created
:[K[K [KESCESC[KOO[KBB[K                exit(1);                                                        exit(1);
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        else {                                                          else {
:[K[K [KESCESC[KOO[KBB[K                printf("!!INIT!!INIT!!INIT!!  shm created for                   printf("!!INIT!!INIT!!INIT!!  shm created for
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        if ((cowMealFlag = shmget(IPC_PRIVATE, sizeof(int), I           if ((cowMealFlag = shmget(IPC_PRIVATE, sizeof(int), I
:[K[K [KESCESC[KOO[KBB[K                printf("!!INIT!!INIT!!INIT!!  shm not created                   printf("!!INIT!!INIT!!INIT!!  shm not created
:[K[K [KESCESC[KOO[KBB[K                exit(1);                                                        exit(1);
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        else {                                                          else {
:[K[K [KESCESC[KOO[KBB[K                printf("!!INIT!!INIT!!INIT!!  shm created for                   printf("!!INIT!!INIT!!INIT!!  shm created for
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        if ((cowCounter = shmget(IPC_PRIVATE, sizeof(int), IP           if ((cowCounter = shmget(IPC_PRIVATE, sizeof(int), IP
:[K[K [KESCESC[KOO[KBB[K                printf("!!INIT!!INIT!!INIT!!  shm not created                   printf("!!INIT!!INIT!!INIT!!  shm not created
:[K[K [KESCESC[KOO[KBB[K                exit(1);                                                        exit(1);
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        else {                                                          else {
:[K[K [KESCESC[KOO[KBB[K                printf("!!INIT!!INIT!!INIT!!  shm created for                   printf("!!INIT!!INIT!!INIT!!  shm created for
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        if ((cowsEatenCounter = shmget(IPC_PRIVATE, sizeof(in           if ((cowsEatenCounter = shmget(IPC_PRIVATE, sizeof(in
:[K[K [KESCESC[KOO[KBB[K                printf("!!INIT!!INIT!!INIT!!  shm not created                   printf("!!INIT!!INIT!!INIT!!  shm not created
:[K[K [KESCESC[KOO[KBB[K                exit(1);                                                        exit(1);
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        else {                                                          else {
:[K[K [KESCESC[KOO[KBB[K                printf("!!INIT!!INIT!!INIT!!  shm created for                   printf("!!INIT!!INIT!!INIT!!  shm created for
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        if ((sheepMealFlag = shmget(IPC_PRIVATE, sizeof(int),           if ((sheepMealFlag = shmget(IPC_PRIVATE, sizeof(int),
:[K[K [KESCESC[KOO[KBB[K                printf("!!INIT!!INIT!!INIT!!  shm not created                   printf("!!INIT!!INIT!!INIT!!  shm not created
:[K[K [KESCESC[KOO[KBB[K                exit(1);                                                        exit(1);
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        else {                                                          else {
:[K[K [KESCESC[KOO[KBB[K                printf("!!INIT!!INIT!!INIT!!  shm created for                   printf("!!INIT!!INIT!!INIT!!  shm created for
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        if ((sheepCounter = shmget(IPC_PRIVATE, sizeof(int),            if ((sheepCounter = shmget(IPC_PRIVATE, sizeof(int), 
:[K[K [KESCESC[KOO[KBB[K                printf("!!INIT!!INIT!!INIT!!  shm not created                   printf("!!INIT!!INIT!!INIT!!  shm not created
:[K[K [KESCESC[KOO[KBB[K                exit(1);                                                        exit(1);
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        else {                                                          else {
:[K[K [KESCESC[KOO[KBB[K                printf("!!INIT!!INIT!!INIT!!  shm created for                   printf("!!INIT!!INIT!!INIT!!  shm created for
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        if ((sheepEatenCounter = shmget(IPC_PRIVATE, sizeof(i           if ((sheepEatenCounter = shmget(IPC_PRIVATE, sizeof(i
:[K[K [KESCESC[KOO[KBB[K                printf("!!INIT!!INIT!!INIT!!  shm not created                   printf("!!INIT!!INIT!!INIT!!  shm not created
:[K[K [KESCESC[KOO[KBB[K                exit(1);                                                        exit(1);
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        else {                                                          else {
:[K[K [KESCESC[KOO[KBB[K                printf("!!INIT!!INIT!!INIT!!  shm created for                   printf("!!INIT!!INIT!!INIT!!  shm created for
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        // hunter                                                       // hunter
:[K[K [KESCESC[KOO[KBB[K        if ((hunterCounter = shmget(IPC_PRIVATE, sizeof(int),           if ((hunterCounter = shmget(IPC_PRIVATE, sizeof(int),
:[K[K [KESCESC[KOO[KBB[K                printf("!!INIT!!INIT!!INIT!!  shm not created                   printf("!!INIT!!INIT!!INIT!!  shm not created
:[K[K [KESCESC[KOO[KBB[K                exit(1);                                                        exit(1);
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        else {                                                          else {
:[K[K [KESCESC[KOO[KBB[K                printf("!!INIT!!INIT!!INIT!!  shm created for                   printf("!!INIT!!INIT!!INIT!!  shm created for
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        if ((thiefCounter = shmget(IPC_PRIVATE, sizeof(int),            if ((thiefCounter = shmget(IPC_PRIVATE, sizeof(int), 
:[K[K [KESCESC[KOO[KBB[K                printf("!!INIT!!INIT!!INIT!!  shm not created                   printf("!!INIT!!INIT!!INIT!!  shm not created
:[K[K [KESCESC[KOO[KBB[K                exit(1);                                                        exit(1);
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        else {                                                          else {
:[K[K [KESCESC[KOO[KBB[K                printf("!!INIT!!INIT!!INIT!!  shm created for                   printf("!!INIT!!INIT!!INIT!!  shm created for
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K        /* Now we attach the segment to our data space.  */             /* Now we attach the segment to our data space.  */
:[K[K [KESCESC[KOO[KBB[K        if ((terminateFlagp = shmat(terminateFlag, NULL, 0))            if ((terminateFlagp = shmat(terminateFlag, NULL, 0)) 
:[K[K [KESCESC[KOO[KBB[K                printf("!!INIT!!INIT!!INIT!!  shm not attache                   printf("!!INIT!!INIT!!INIT!!  shm not attache
:[K[K [KESCESC[KOO[KBB[K                exit(1);                                                        exit(1);
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        else {                                                          else {
:[K[K [KESCESC[KOO[KBB[K                printf("!!INIT!!INIT!!INIT!!  shm attached fo                   printf("!!INIT!!INIT!!INIT!!  shm attached fo
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        if ((cowMealFlagP = shmat(cowMealFlag, NULL, 0)) == (           if ((cowMealFlagP = shmat(cowMealFlag, NULL, 0)) == (
:[K[K [KESCESC[KOO[KBB[K                printf("!!INIT!!INIT!!INIT!!  shm not attache                   printf("!!INIT!!INIT!!INIT!!  shm not attache
:[K[K [KESCESC[KOO[KBB[K                exit(1);                                                        exit(1);
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        else {                                                          else {
:[K[K [KESCESC[KOO[KBB[K                printf("!!INIT!!INIT!!INIT!!  shm attached fo                   printf("!!INIT!!INIT!!INIT!!  shm attached fo
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        if ((cowCounterp = shmat(cowCounter, NULL, 0)) == (in           if ((cowCounterp = shmat(cowCounter, NULL, 0)) == (in
:[K[K [KESCESC[KOO[KBB[K                printf("!!INIT!!INIT!!INIT!!  shm not attache                   printf("!!INIT!!INIT!!INIT!!  shm not attache
:[K[K [KESCESC[KOO[KBB[K                exit(1);                                                        exit(1);
:[K[K [KESCESC[KOO[KBB[K        } else {                                                        } else {
:[K[K [KESCESC[KOO[KBB[K                printf("!!INIT!!INIT!!INIT!!  shm attached fo                   printf("!!INIT!!INIT!!INIT!!  shm attached fo
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        if ((cowsEatenCounterp = shmat(cowsEatenCounter, NULL           if ((cowsEatenCounterp = shmat(cowsEatenCounter, NULL
:[K[K [KESCESC[KOO[KBB[K                printf("!!INIT!!INIT!!INIT!!  shm not attache                   printf("!!INIT!!INIT!!INIT!!  shm not attache
:[K[K [KESCESC[KOO[KBB[K                exit(1);                                                        exit(1);
:[K[K [KESCESC[KOO[KBB[K        } else {                                                        } else {
:[K[K [KESCESC[KOO[KBB[K                printf("!!INIT!!INIT!!INIT!!  shm attached fo                   printf("!!INIT!!INIT!!INIT!!  shm attached fo
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        if ((sheepMealFlagp = shmat(sheepMealFlag, NULL, 0))            if ((sheepMealFlagp = shmat(sheepMealFlag, NULL, 0)) 
:[K[K [KESCESC[KOO[KBB[K                printf("!!INIT!!INIT!!INIT!!  shm not attache                   printf("!!INIT!!INIT!!INIT!!  shm not attache
:[K[K [KESCESC[KOO[KBB[K                exit(1);                                                        exit(1);
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        else {                                                          else {
:[K[K [KESCESC[KOO[KBB[K                printf("!!INIT!!INIT!!INIT!!  shm attached fo                   printf("!!INIT!!INIT!!INIT!!  shm attached fo
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        if ((sheepCounterp = shmat(sheepCounter, NULL, 0)) ==           if ((sheepCounterp = shmat(sheepCounter, NULL, 0)) ==
:[K[K [KESCESC[KOO[KBB[K                printf("!!INIT!!INIT!!INIT!!  shm not attache                   printf("!!INIT!!INIT!!INIT!!  shm not attache
:[K[K [KESCESC[KOO[KBB[K                exit(1);                                                        exit(1);
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        else {                                                          else {
:[K[K [KESCESC[KOO[KBB[K                printf("!!INIT!!INIT!!INIT!!  shm attached fo                   printf("!!INIT!!INIT!!INIT!!  shm attached fo
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        if ((sheepEatenCounterp = shmat(sheepEatenCounter, NU           if ((sheepEatenCounterp = shmat(sheepEatenCounter, NU
:[K[K [KESCESC[KOO[KBB[K                printf("!!INIT!!INIT!!INIT!!  shm not attache                   printf("!!INIT!!INIT!!INIT!!  shm not attache
:[K[K [KESCESC[KOO[KBB[K                exit(1);                                                        exit(1);
:[K[K [KESCESC[KOO[KBB[K        } else {                                                        } else {
:[K[K [KESCESC[KOO[KBB[K                printf("!!INIT!!INIT!!INIT!!  shm attached fo                   printf("!!INIT!!INIT!!INIT!!  shm attached fo
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        // hunter                                                       // hunter
:[K[K [KESCESC[KOO[KBB[K        if ((hunterCounterp = shmat(hunterCounter, NULL, 0))            if ((hunterCounterp = shmat(hunterCounter, NULL, 0)) 
:[K[K [KESCESC[KOO[KBB[K                printf("!!INIT!!INIT!!INIT!!  shm not attache                   printf("!!INIT!!INIT!!INIT!!  shm not attache
:[K[K [KESCESC[KOO[KBB[K                exit(1);                                                        exit(1);
:[K[K [KESCESC[KOO[KBB[K        } else {                                                        } else {
:[K[K [KESCESC[KOO[KBB[K                printf("!!INIT!!INIT!!INIT!!  shm attached fo                   printf("!!INIT!!INIT!!INIT!!  shm attached fo
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        if ((thiefCounterp = shmat(thiefCounter, NULL, 0)) ==           if ((thiefCounterp = shmat(thiefCounter, NULL, 0)) ==
:[K[K [KESCESC[KOO[KBB[K                printf("!!INIT!!INIT!!INIT!!  shm not attache                   printf("!!INIT!!INIT!!INIT!!  shm not attache
:[K[K [KESCESC[KOO[KBB[K                exit(1);                                                        exit(1);
:[K[K [KESCESC[KOO[KBB[K        } else {                                                        } else {
:[K[K [KESCESC[KOO[KBB[K                printf("!!INIT!!INIT!!INIT!!  shm attached fo                   printf("!!INIT!!INIT!!INIT!!  shm attached fo
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K        printf("!!INIT!!INIT!!INIT!!   initialize end\n");              printf("!!INIT!!INIT!!INIT!!   initialize end\n");
:[K[K [KESCESC[KOO[KBB[K}                                                               }
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[Kvoid *sheep(void *startTimeNp)                                | void sheep(float startTimeN)
:[K[K [KESCESC[KOO[KBB[K{                                                               {
:[K[K [KESCESC[KOO[KBB[K        // Cast void* to float*, then dereference float* to g |         int localpid;
:[K[K [KESCESC[KOO[KBB[K        float startTimeN = *(float *)startTimeNp;             <
:[K[K [KESCESC[KOO[KBB[K        // Cast thread id to unsigned long since sometimes th <
:[K[K [KESCESC[KOO[KBB[K        unsigned long localThreadID = (unsigned long)pthread_ <
:[K[K [KESCESC[KOO[KBB[K        int k;                                                          int k;
:[K[K [KESCESC[KOO[KBB[K                                                              >         localpid = getpid();
:[K[K [KESCESC[KOO[KBB[K                                                              >
:[K[K [KESCESC[KOO[KBB[K                                                              >         setpgid(localpid, sheepProcessGID);
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K        /* graze */                                                     /* graze */
:[K[K [KESCESC[KOO[KBB[K        printf("SSSSSSS %8lu SSSSSSS   A sheep is born\n", lo |         printf("SSSSSSS %8d SSSSSSS   A sheep is born\n", loc
:[K[K [KESCESC[KOO[KBB[K        if( startTimeN > 0) {                                           if( startTimeN > 0) {
:[K[K [KESCESC[KOO[KBB[K                if( usleep( startTimeN) == -1){                                 if( usleep( startTimeN) == -1){
:[K[K [KESCESC[KOO[KBB[K                        /* exit when usleep interrupted by ki                           /* exit when usleep interrupted by ki
:[K[K [KESCESC[KOO[KBB[K                        if(errno==EINTR)exit(4);                                        if(errno==EINTR)exit(4);
:[K[K [KESCESC[KOO[KBB[K                }                                                               }       
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        printf("SSSSSSS %8lu SSSSSSS   sheep grazes for %f ms |         printf("SSSSSSS %8d SSSSSSS   sheep grazes for %f ms\
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K        /* does this sheep complete a group of SHEEP_IN_GROUP           /* does this sheep complete a group of SHEEP_IN_GROUP
:[K[K [KESCESC[KOO[KBB[K        /* if so wake up the dragon */                                  /* if so wake up the dragon */
:[K[K [KESCESC[KOO[KBB[K        semopChecked(semID, &WaitProtectSheepInGroup, 1);               semopChecked(semID, &WaitProtectSheepInGroup, 1);
:[K[K [KESCESC[KOO[KBB[K        semopChecked(semID, &SignalSheepInGroup, 1);                    semopChecked(semID, &SignalSheepInGroup, 1);
:[K[K [KESCESC[KOO[KBB[K        *sheepCounterp = *sheepCounterp + 1;                            *sheepCounterp = *sheepCounterp + 1;
:[K[K [KESCESC[KOO[KBB[K        printf("SSSSSSS %8lu SSSSSSS   %d  sheeps have been e |         printf("SSSSSSS %8d SSSSSSS   %d  sheeps have been en
:[K[K [KESCESC[KOO[KBB[K        if( ( *sheepCounterp  >= SHEEP_IN_GROUP )) {                    if( ( *sheepCounterp  >= SHEEP_IN_GROUP )) {
:[K[K [KESCESC[KOO[KBB[K                *sheepCounterp = *sheepCounterp - SHEEP_IN_GR                   *sheepCounterp = *sheepCounterp - SHEEP_IN_GR
:[K[K [KESCESC[KOO[KBB[K                semopChecked(semID, &SignalProtectSheepInGrou                   semopChecked(semID, &SignalProtectSheepInGrou
:[K[K [KESCESC[KOO[KBB[K                for (k=0; k<SHEEP_IN_GROUP; k++){                               for (k=0; k<SHEEP_IN_GROUP; k++){
:[K[K [KESCESC[KOO[KBB[K                        semopChecked(semID, &WaitSheepInGroup                           semopChecked(semID, &WaitSheepInGroup
:[K[K [KESCESC[KOO[KBB[K                }                                                               }
:[K[K [KESCESC[KOO[KBB[K                printf("SSSSSSS %8lu SSSSSSS   The last sheep |                 printf("SSSSSSS %8d SSSSSSS   The last sheep 
:[K[K [KESCESC[KOO[KBB[K                semopChecked(semID, &WaitProtectSheepMealFlag                   semopChecked(semID, &WaitProtectSheepMealFlag
:[K[K [KESCESC[KOO[KBB[K                *sheepMealFlagp = *sheepMealFlagp + 1;                          *sheepMealFlagp = *sheepMealFlagp + 1;
:[K[K [KESCESC[KOO[KBB[K                printf("SSSSSSS %8lu SSSSSSS   signal sheep m |                 printf("SSSSSSS %8d SSSSSSS   signal sheep me
:[K[K [KESCESC[KOO[KBB[K                semopChecked(semID, &SignalProtectSheepMealFl                   semopChecked(semID, &SignalProtectSheepMealFl
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K                semopChecked(semID, &WaitProtectCowMealFlag,                    semopChecked(semID, &WaitProtectCowMealFlag, 
:[K[K [KESCESC[KOO[KBB[K                if( *cowMealFlagP >= 1 ) {                                      if( *cowMealFlagP >= 1 ) {
:[K[K [KESCESC[KOO[KBB[K                        semopChecked(semID, &SignalDragonSlee                           semopChecked(semID, &SignalDragonSlee
:[K[K [KESCESC[KOO[KBB[K                        printf("SSSSSSS %8lu SSSSSSS   last s |                         printf("SSSSSSS %8d SSSSSSS   last sh
:[K[K [KESCESC[KOO[KBB[K                }                                                               }
:[K[K [KESCESC[KOO[KBB[K                semopChecked(semID, &SignalProtectCowMealFlag                   semopChecked(semID, &SignalProtectCowMealFlag
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        else                                                            else
:[K[K [KESCESC[KOO[KBB[K        {                                                               {
:[K[K [KESCESC[KOO[KBB[K                semopChecked(semID, &SignalProtectSheepInGrou                   semopChecked(semID, &SignalProtectSheepInGrou
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K        semopChecked(semID, &WaitSheepWaiting, 1);                      semopChecked(semID, &WaitSheepWaiting, 1);
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K        // Terminate check                                              // Terminate check
:[K[K [KESCESC[KOO[KBB[K        semopChecked(semID, &WaitProtectTerminate, 1);                  semopChecked(semID, &WaitProtectTerminate, 1);
:[K[K [KESCESC[KOO[KBB[K        if( *terminateFlagp == 1 ) {                                    if( *terminateFlagp == 1 ) {
:[K[K [KESCESC[KOO[KBB[K                printf("SSSSSSS %8lu SSSSSSS   A sheep has be |                 printf("SSSSSSS %8d SSSSSSS   A sheep has bee
:[K[K [KESCESC[KOO[KBB[K                semopChecked(semID, &SignalProtectTerminate,                    semopChecked(semID, &SignalProtectTerminate, 
:[K[K [KESCESC[KOO[KBB[K                                                              >                 kill(localpid, SIGKILL);
:[K[K [KESCESC[KOO[KBB[K                return;                                                         return;
:[K[K [KESCESC[KOO[KBB[K        } else {                                                        } else {
:[K[K [KESCESC[KOO[KBB[K                semopChecked(semID, &SignalProtectTerminate,                    semopChecked(semID, &SignalProtectTerminate, 
:[K[K [KESCESC[KOO[KBB[K                printf("SSSSSSS %8lu SSSSSSS   A sheep has be |                 printf("SSSSSSS %8d SSSSSSS   A sheep has bee
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K        /* have all the sheeps in group been eaten? */                  /* have all the sheeps in group been eaten? */
:[K[K [KESCESC[KOO[KBB[K        /* if so wake up the dragon */                                  /* if so wake up the dragon */
:[K[K [KESCESC[KOO[KBB[K        semopChecked(semID, &WaitProtectSheepEaten, 1);                 semopChecked(semID, &WaitProtectSheepEaten, 1);
:[K[K [KESCESC[KOO[KBB[K        semopChecked(semID, &SignalSheepEaten, 1);                      semopChecked(semID, &SignalSheepEaten, 1);
:[K[K [KESCESC[KOO[KBB[K        *sheepEatenCounterp = *sheepEatenCounterp + 1;                  *sheepEatenCounterp = *sheepEatenCounterp + 1;
:[K[K [KESCESC[KOO[KBB[K        if( ( *sheepEatenCounterp >= SHEEP_IN_GROUP )) {                if( ( *sheepEatenCounterp >= SHEEP_IN_GROUP )) {
:[K[K [KESCESC[KOO[KBB[K                *sheepEatenCounterp = *sheepEatenCounterp - S                   *sheepEatenCounterp = *sheepEatenCounterp - S
:[K[K [KESCESC[KOO[KBB[K                for (k=0; k<SHEEP_IN_GROUP; k++){                               for (k=0; k<SHEEP_IN_GROUP; k++){
:[K[K [KESCESC[KOO[KBB[K                        semopChecked(semID, &WaitSheepEaten,                            semopChecked(semID, &WaitSheepEaten, 
:[K[K [KESCESC[KOO[KBB[K                }                                                               }
:[K[K [KESCESC[KOO[KBB[K                printf("SSSSSSS %8lu SSSSSSS   The last sheep |                 printf("SSSSSSS %8d SSSSSSS   The last sheep 
:[K[K [KESCESC[KOO[KBB[K                semopChecked(semID, &SignalProtectSheepEaten,                   semopChecked(semID, &SignalProtectSheepEaten,
:[K[K [KESCESC[KOO[KBB[K                semopChecked(semID, &SignalDragonEating, 1);                    semopChecked(semID, &SignalDragonEating, 1);
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        else                                                            else
:[K[K [KESCESC[KOO[KBB[K        {                                                               {
:[K[K [KESCESC[KOO[KBB[K                semopChecked(semID, &SignalProtectSheepEaten,                   semopChecked(semID, &SignalProtectSheepEaten,
:[K[K [KESCESC[KOO[KBB[K                printf("SSSSSSS %8lu SSSSSSS   A sheep is wai |                 printf("SSSSSSS %8d SSSSSSS   A sheep is wait
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K        semopChecked(semID, &WaitSheepDead, 1);                         semopChecked(semID, &WaitSheepDead, 1);
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K        printf("SSSSSSS %8lu SSSSSSS   sheep  dies\n", localT |         printf("SSSSSSS %8d SSSSSSS   sheep  dies\n", localpi
:[K[K [KESCESC[KOO[KBB[K        return NULL;                                          |         kill(localpid, SIGKILL);
:[K[K [KESCESC[KOO[KBB[K}                                                               }
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[Kvoid *cow(void *startTimeNp)                                  | void cow(float startTimeN)
:[K[K [KESCESC[KOO[KBB[K{                                                               {
:[K[K [KESCESC[KOO[KBB[K        float startTimeN = *(float *)startTimeNp;             |         int localpid;
:[K[K [KESCESC[KOO[KBB[K        unsigned long localThreadID = (unsigned long)pthread_ <
:[K[K [KESCESC[KOO[KBB[K        int k;                                                          int k;
:[K[K [KESCESC[KOO[KBB[K                                                              >         localpid = getpid();
:[K[K [KESCESC[KOO[KBB[K                                                              >
:[K[K [KESCESC[KOO[KBB[K                                                              >         setpgid(localpid, cowProcessGID);
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K        /* graze */                                                     /* graze */
:[K[K [KESCESC[KOO[KBB[K        printf("CCCCCCC %8lu CCCCCCC   A cow is born\n", loca |         printf("CCCCCCC %8d CCCCCCC   A cow is born\n", local
:[K[K [KESCESC[KOO[KBB[K        if( startTimeN > 0) {                                           if( startTimeN > 0) {
:[K[K [KESCESC[KOO[KBB[K                if( usleep( startTimeN) == -1){                                 if( usleep( startTimeN) == -1){
:[K[K [KESCESC[KOO[KBB[K                        /* exit when usleep interrupted by ki                           /* exit when usleep interrupted by ki
:[K[K [KESCESC[KOO[KBB[K                        if(errno==EINTR)exit(4);                                        if(errno==EINTR)exit(4);
:[K[K [KESCESC[KOO[KBB[K                }                                                               }       
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        printf("CCCCCCC %8lu CCCCCCC   cow grazes for %f ms\n |         printf("CCCCCCC %8d CCCCCCC   cow grazes for %f ms\n"
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K        /* does this cow complete a group of COWS_IN_GROUP? *           /* does this cow complete a group of COWS_IN_GROUP? *
:[K[K [KESCESC[KOO[KBB[K        /* if so wake up the dragon */                                  /* if so wake up the dragon */
:[K[K [KESCESC[KOO[KBB[K        semopChecked(semID, &WaitProtectCowsInGroup, 1);                semopChecked(semID, &WaitProtectCowsInGroup, 1);
:[K[K [KESCESC[KOO[KBB[K        semopChecked(semID, &SignalCowsInGroup, 1);                     semopChecked(semID, &SignalCowsInGroup, 1);
:[K[K [KESCESC[KOO[KBB[K        *cowCounterp = *cowCounterp + 1;                                *cowCounterp = *cowCounterp + 1;
:[K[K [KESCESC[KOO[KBB[K        printf("CCCCCCC %8lu CCCCCCC   %d  cow has been encha |         printf("CCCCCCC %8d CCCCCCC   %d  cow has been enchan
:[K[K [KESCESC[KOO[KBB[K        if( ( *cowCounterp  >= COWS_IN_GROUP )) {                       if( ( *cowCounterp  >= COWS_IN_GROUP )) {
:[K[K [KESCESC[KOO[KBB[K                *cowCounterp = *cowCounterp - COWS_IN_GROUP;                    *cowCounterp = *cowCounterp - COWS_IN_GROUP;
:[K[K [KESCESC[KOO[KBB[K                semopChecked(semID, &SignalProtectCowsInGroup                   semopChecked(semID, &SignalProtectCowsInGroup
:[K[K [KESCESC[KOO[KBB[K                for (k=0; k<COWS_IN_GROUP; k++){                                for (k=0; k<COWS_IN_GROUP; k++){
:[K[K [KESCESC[KOO[KBB[K                        semopChecked(semID, &WaitCowsInGroup,                           semopChecked(semID, &WaitCowsInGroup,
:[K[K [KESCESC[KOO[KBB[K                }                                                               }
:[K[K [KESCESC[KOO[KBB[K                printf("CCCCCCC %8lu CCCCCCC   The last cow i |                 printf("CCCCCCC %8d CCCCCCC   The last cow is
:[K[K [KESCESC[KOO[KBB[K                semopChecked(semID, &WaitProtectCowMealFlag,                    semopChecked(semID, &WaitProtectCowMealFlag, 
:[K[K [KESCESC[KOO[KBB[K                *cowMealFlagP = *cowMealFlagP + 1;                              *cowMealFlagP = *cowMealFlagP + 1;
:[K[K [KESCESC[KOO[KBB[K                printf("CCCCCCC %8lu CCCCCCC   signal cow mea |                 printf("CCCCCCC %8d CCCCCCC   signal cow meal
:[K[K [KESCESC[KOO[KBB[K                semopChecked(semID, &SignalProtectCowMealFlag                   semopChecked(semID, &SignalProtectCowMealFlag
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K                semopChecked(semID, &WaitProtectSheepMealFlag                   semopChecked(semID, &WaitProtectSheepMealFlag
:[K[K [KESCESC[KOO[KBB[K                if( *sheepMealFlagp >= 1 ) {                                    if( *sheepMealFlagp >= 1 ) {
:[K[K [KESCESC[KOO[KBB[K                        semopChecked(semID, &SignalDragonSlee                           semopChecked(semID, &SignalDragonSlee
:[K[K [KESCESC[KOO[KBB[K                        printf("CCCCCCC %8lu CCCCCCC   last c |                         printf("CCCCCCC %8d CCCCCCC   last co
:[K[K [KESCESC[KOO[KBB[K                }                                                               }       
:[K[K [KESCESC[KOO[KBB[K                semopChecked(semID, &SignalProtectSheepMealFl                   semopChecked(semID, &SignalProtectSheepMealFl
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        else                                                            else
:[K[K [KESCESC[KOO[KBB[K        {                                                               {
:[K[K [KESCESC[KOO[KBB[K                semopChecked(semID, &SignalProtectCowsInGroup                   semopChecked(semID, &SignalProtectCowsInGroup
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K        semopChecked(semID, &WaitCowsWaiting, 1);                       semopChecked(semID, &WaitCowsWaiting, 1);
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K        // Terminate check                                              // Terminate check
:[K[K [KESCESC[KOO[KBB[K        semopChecked(semID, &WaitProtectTerminate, 1);                  semopChecked(semID, &WaitProtectTerminate, 1);
:[K[K [KESCESC[KOO[KBB[K        if( *terminateFlagp == 1 ) {                                    if( *terminateFlagp == 1 ) {
:[K[K [KESCESC[KOO[KBB[K                printf("CCCCCCC %8lu CCCCCCC   A cow has been |                 printf("CCCCCCC %8d CCCCCCC   A cow has been 
:[K[K [KESCESC[KOO[KBB[K                semopChecked(semID, &SignalProtectTerminate,                    semopChecked(semID, &SignalProtectTerminate, 
:[K[K [KESCESC[KOO[KBB[K                                                              >                 kill(localpid, SIGKILL);
:[K[K [KESCESC[KOO[KBB[K                return;                                                         return;
:[K[K [KESCESC[KOO[KBB[K        } else {                                                        } else {
:[K[K [KESCESC[KOO[KBB[K                semopChecked(semID, &SignalProtectTerminate,                    semopChecked(semID, &SignalProtectTerminate, 
:[K[K [KESCESC[KOO[KBB[K                printf("CCCCCCC %8lu CCCCCCC   A cow has been |                 printf("CCCCCCC %8d CCCCCCC   A cow has been 
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K        /* have all the cows in group been eaten? */                    /* have all the cows in group been eaten? */
:[K[K [KESCESC[KOO[KBB[K        /* if so wake up the dragon */                                  /* if so wake up the dragon */
:[K[K [KESCESC[KOO[KBB[K        semopChecked(semID, &WaitProtectCowsEaten, 1);                  semopChecked(semID, &WaitProtectCowsEaten, 1);
:[K[K [KESCESC[KOO[KBB[K        semopChecked(semID, &SignalCowsEaten, 1);                       semopChecked(semID, &SignalCowsEaten, 1);
:[K[K [KESCESC[KOO[KBB[K        *cowsEatenCounterp = *cowsEatenCounterp + 1;                    *cowsEatenCounterp = *cowsEatenCounterp + 1;
:[K[K [KESCESC[KOO[KBB[K        if( ( *cowsEatenCounterp >= COWS_IN_GROUP )) {                  if( ( *cowsEatenCounterp >= COWS_IN_GROUP )) {
:[K[K [KESCESC[KOO[KBB[K                *cowsEatenCounterp = *cowsEatenCounterp - COW                   *cowsEatenCounterp = *cowsEatenCounterp - COW
:[K[K [KESCESC[KOO[KBB[K                for (k=0; k<COWS_IN_GROUP; k++){                                for (k=0; k<COWS_IN_GROUP; k++){
:[K[K [KESCESC[KOO[KBB[K                        semopChecked(semID, &WaitCowsEaten, 1                           semopChecked(semID, &WaitCowsEaten, 1
:[K[K [KESCESC[KOO[KBB[K                }                                                               }
:[K[K [KESCESC[KOO[KBB[K                printf("CCCCCCC %8lu CCCCCCC   The last cow h |                 printf("CCCCCCC %8d CCCCCCC   The last cow ha
:[K[K [KESCESC[KOO[KBB[K                semopChecked(semID, &SignalProtectCowsEaten,                    semopChecked(semID, &SignalProtectCowsEaten, 
:[K[K [KESCESC[KOO[KBB[K                semopChecked(semID, &SignalDragonEating, 1);                    semopChecked(semID, &SignalDragonEating, 1);
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        else                                                            else
:[K[K [KESCESC[KOO[KBB[K        {                                                               {
:[K[K [KESCESC[KOO[KBB[K                semopChecked(semID, &SignalProtectCowsEaten,                    semopChecked(semID, &SignalProtectCowsEaten, 
:[K[K [KESCESC[KOO[KBB[K                printf("CCCCCCC %8lu CCCCCCC   A cow is waiti |                 printf("CCCCCCC %8d CCCCCCC   A cow is waitin
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        semopChecked(semID, &WaitCowsDead, 1);                          semopChecked(semID, &WaitCowsDead, 1);
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K        printf("CCCCCCC %8lu CCCCCCC   cow  dies\n", localThr |         printf("CCCCCCC %8d CCCCCCC   cow  dies\n", localpid)
:[K[K [KESCESC[KOO[KBB[K                                                              |         kill(localpid, SIGKILL);
:[K[K [KESCESC[KOO[KBB[K        return NULL;                                          <
:[K[K [KESCESC[KOO[KBB[K}                                                               }
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[Kvoid *thief(void *startTimeNp)                                | void thief(float startTimeN)
:[K[K [KESCESC[KOO[KBB[K{                                                               {
:[K[K [KESCESC[KOO[KBB[K        float startTimeN = *(float *)startTimeNp;             |     int localpid = getpid();
:[K[K [KESCESC[KOO[KBB[K        unsigned long localThreadID = (unsigned long)pthread_ |     setpgid(localpid, thiefProcessGID);
:[K[K [KESCESC[KOO[KBB[K                                                                    
:[K[K [KESCESC[KOO[KBB[K    printf("TTTTTTT %8lu TTTTTTT   A thief arrived outside th |     printf("TTTTTTT %8d TTTTTTT   A thief arrived outside the
:[K[K [KESCESC[KOO[KBB[K        if( startTimeN > 0) {                                           if( startTimeN > 0) {
:[K[K [KESCESC[KOO[KBB[K                if( usleep( startTimeN) == -1){                                 if( usleep( startTimeN) == -1){
:[K[K [KESCESC[KOO[KBB[K                        /* exit when usleep interrupted by ki                           /* exit when usleep interrupted by ki
:[K[K [KESCESC[KOO[KBB[K                        if(errno==EINTR)exit(4);                                        if(errno==EINTR)exit(4);
:[K[K [KESCESC[KOO[KBB[K                }                                                               }       
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K        // Terminate check                                              // Terminate check
:[K[K [KESCESC[KOO[KBB[K        semopChecked(semID, &WaitProtectTerminate, 1);                  semopChecked(semID, &WaitProtectTerminate, 1);
:[K[K [KESCESC[KOO[KBB[K        if( *terminateFlagp == 1 ) {                                    if( *terminateFlagp == 1 ) {
:[K[K [KESCESC[KOO[KBB[K                printf("TTTTTTT %8lu TTTTTTT   thief has foun |                 printf("TTTTTTT %8d TTTTTTT   thief has found
:[K[K [KESCESC[KOO[KBB[K                semopChecked(semID, &SignalProtectTerminate,                    semopChecked(semID, &SignalProtectTerminate, 
:[K[K [KESCESC[KOO[KBB[K                return NULL;                                  |                 kill(localpid, SIGKILL);
:[K[K [KESCESC[KOO[KBB[K                                                              >                 return;
:[K[K [KESCESC[KOO[KBB[K        } else {                                                        } else {
:[K[K [KESCESC[KOO[KBB[K                printf("TTTTTTT %8lu TTTTTTT   thief has foun |                 printf("TTTTTTT %8d TTTTTTT   thief has found
:[K[K [KESCESC[KOO[KBB[K                semopChecked(semID, &SignalProtectTerminate,                    semopChecked(semID, &SignalProtectTerminate, 
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K        semopChecked(semID, &WaitProtectThiefCount, 1);                 semopChecked(semID, &WaitProtectThiefCount, 1);
:[K[K [KESCESC[KOO[KBB[K        *thiefCounterp = *thiefCounterp + 1;                            *thiefCounterp = *thiefCounterp + 1;
:[K[K [KESCESC[KOO[KBB[K        semopChecked(semID, &SignalProtectThiefCount, 1);               semopChecked(semID, &SignalProtectThiefCount, 1);
:[K[K [KESCESC[KOO[KBB[K        printf("TTTTTTT %8lu TTTTTTT   thief is under smaug's |         printf("TTTTTTT %8d TTTTTTT   thief is under smaug's 
:[K[K [KESCESC[KOO[KBB[K        printf("TTTTTTT %8lu TTTTTTT   thief wakes smaug\n",  |         printf("TTTTTTT %8d TTTTTTT   thief wakes smaug\n", l
:[K[K [KESCESC[KOO[KBB[K        semopChecked(semID, &SignalDragonSleeping, 1);                  semopChecked(semID, &SignalDragonSleeping, 1);
:[K[K [KESCESC[KOO[KBB[K        semopChecked(semID, &WaitThievesWaiting, 1);                    semopChecked(semID, &WaitThievesWaiting, 1);
:[K[K [KESCESC[KOO[KBB[K        // Another terminate check incase this thief ends the |         printf("TTTTTTT %8d TTTTTTT   thief enters smaug's ca
:[K[K [KESCESC[KOO[KBB[K        semopChecked(semID, &WaitProtectTerminate, 1);        |         printf("TTTTTTT %8d TTTTTTT   thief plays with smaug\
:[K[K [KESCESC[KOO[KBB[K        if( *terminateFlagp == 1 ) {                          <
:[K[K [KESCESC[KOO[KBB[K                printf("TTTTTTT %8lu TTTTTTT   thief enters s <
:[K[K [KESCESC[KOO[KBB[K                semopChecked(semID, &SignalProtectTerminate,  <
:[K[K [KESCESC[KOO[KBB[K                return NULL;                                  <
:[K[K [KESCESC[KOO[KBB[K        } else {                                              <
:[K[K [KESCESC[KOO[KBB[K                printf("TTTTTTT %8lu TTTTTTT   thief enters s <
:[K[K [KESCESC[KOO[KBB[K                printf("TTTTTTT %8lu TTTTTTT   thief plays wi <
:[K[K [KESCESC[KOO[KBB[K                semopChecked(semID, &SignalProtectTerminate,  <
:[K[K [KESCESC[KOO[KBB[K        }                                                     <
:[K[K [KESCESC[KOO[KBB[K        semopChecked(semID, &WaitThiefFinish, 1);                       semopChecked(semID, &WaitThiefFinish, 1);
:[K[K [KESCESC[KOO[KBB[K        printf("TTTTTTT %8lu TTTTTTT   thief leaves cave and  |         printf("TTTTTTT %8d TTTTTTT   thief leaves cave and g
:[K[K [KESCESC[KOO[KBB[K                                                              |         kill(localpid, SIGKILL);
:[K[K [KESCESC[KOO[KBB[K        return NULL;                                          <
:[K[K [KESCESC[KOO[KBB[K}                                                               }
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[Kvoid *hunter(void *startTimeNp)                               | void hunter(float startTimeN)
:[K[K [KESCESC[KOO[KBB[K{                                                               {
:[K[K [KESCESC[KOO[KBB[K        float startTimeN = *(float *)startTimeNp;             |     int localpid = getpid();
:[K[K [KESCESC[KOO[KBB[K        unsigned long localThreadID = (unsigned long)pthread_ |     setpgid(localpid, hunterProcessGID);
:[K[K [KESCESC[KOO[KBB[K                                                                    
:[K[K [KESCESC[KOO[KBB[K    printf("HHHHHHH %8lu HHHHHHH   A hunter arrived outside t |     printf("HHHHHHH %8d HHHHHHH   A hunter arrived outside th
:[K[K [KESCESC[KOO[KBB[K        if( startTimeN > 0) {                                           if( startTimeN > 0) {
:[K[K [KESCESC[KOO[KBB[K                if( usleep( startTimeN) == -1){                                 if( usleep( startTimeN) == -1){
:[K[K [KESCESC[KOO[KBB[K                        /* exit when usleep interrupted by ki                           /* exit when usleep interrupted by ki
:[K[K [KESCESC[KOO[KBB[K                        if(errno==EINTR)exit(4);                                        if(errno==EINTR)exit(4);
:[K[K [KESCESC[KOO[KBB[K                }                                                               }       
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K        // Terminate check                                              // Terminate check
:[K[K [KESCESC[KOO[KBB[K        semopChecked(semID, &WaitProtectTerminate, 1);                  semopChecked(semID, &WaitProtectTerminate, 1);
:[K[K [KESCESC[KOO[KBB[K        if( *terminateFlagp == 1 ) {                                    if( *terminateFlagp == 1 ) {
:[K[K [KESCESC[KOO[KBB[K                printf("HHHHHHH %8lu HHHHHHH   hunter has fou |                 printf("HHHHHHH %8d HHHHHHH   hunter has foun
:[K[K [KESCESC[KOO[KBB[K                semopChecked(semID, &SignalProtectTerminate,                    semopChecked(semID, &SignalProtectTerminate, 
:[K[K [KESCESC[KOO[KBB[K                return NULL;                                  |                 kill(localpid, SIGKILL);
:[K[K [KESCESC[KOO[KBB[K                                                              >                 return;
:[K[K [KESCESC[KOO[KBB[K        } else {                                                        } else {
:[K[K [KESCESC[KOO[KBB[K                printf("HHHHHHH %8lu HHHHHHH   hunter has fou |                 printf("HHHHHHH %8d HHHHHHH   hunter has foun
:[K[K [KESCESC[KOO[KBB[K                semopChecked(semID, &SignalProtectTerminate,                    semopChecked(semID, &SignalProtectTerminate, 
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K        semopChecked(semID, &WaitProtectHunterCount, 1);                semopChecked(semID, &WaitProtectHunterCount, 1);
:[K[K [KESCESC[KOO[KBB[K        *hunterCounterp = *hunterCounterp + 1;                          *hunterCounterp = *hunterCounterp + 1;
:[K[K [KESCESC[KOO[KBB[K        semopChecked(semID, &SignalProtectHunterCount, 1);              semopChecked(semID, &SignalProtectHunterCount, 1);
:[K[K [KESCESC[KOO[KBB[K        printf("HHHHHHH %8lu HHHHHHH   hunter is under smaug' |         printf("HHHHHHH %8d HHHHHHH   hunter is under smaug's
:[K[K [KESCESC[KOO[KBB[K        printf("HHHHHHH %8lu HHHHHHH   hunter wakes smaug\n", |         printf("HHHHHHH %8d HHHHHHH   hunter wakes smaug\n", 
:[K[K [KESCESC[KOO[KBB[K        semopChecked(semID, &SignalDragonSleeping, 1);                  semopChecked(semID, &SignalDragonSleeping, 1);
:[K[K [KESCESC[KOO[KBB[K        semopChecked(semID, &WaitHuntersWaiting, 1);                    semopChecked(semID, &WaitHuntersWaiting, 1);
:[K[K [KESCESC[KOO[KBB[K        // Another terminate check incase this hunter ends th |         printf("HHHHHHH %8d HHHHHHH   hunter enters smaug's c
:[K[K [KESCESC[KOO[KBB[K        semopChecked(semID, &WaitProtectTerminate, 1);        |         printf("HHHHHHH %8d HHHHHHH   hunter fights smaug\n",
:[K[K [KESCESC[KOO[KBB[K        if( *terminateFlagp == 1 ) {                          <
:[K[K [KESCESC[KOO[KBB[K                printf("HHHHHHH %8lu HHHHHHH   hunter enters  <
:[K[K [KESCESC[KOO[KBB[K                semopChecked(semID, &SignalProtectTerminate,  <
:[K[K [KESCESC[KOO[KBB[K                return NULL;                                  <
:[K[K [KESCESC[KOO[KBB[K        } else {                                              <
:[K[K [KESCESC[KOO[KBB[K                printf("HHHHHHH %8lu HHHHHHH   hunter enters  <
:[K[K [KESCESC[KOO[KBB[K                printf("HHHHHHH %8lu HHHHHHH   hunter fights  <
:[K[K [KESCESC[KOO[KBB[K                semopChecked(semID, &SignalProtectTerminate,  <
:[K[K [KESCESC[KOO[KBB[K        }                                                     <
:[K[K [KESCESC[KOO[KBB[K        semopChecked(semID, &WaitHunterFinish, 1);                      semopChecked(semID, &WaitHunterFinish, 1);
:[K[K [KESCESC[KOO[KBB[K        printf("TTTTTTT %8lu TTTTTTT   hunter leaves cave and |         printf("TTTTTTT %8d TTTTTTT   hunter leaves cave and 
:[K[K [KESCESC[KOO[KBB[K                                                              |         kill(localpid, SIGKILL);
:[K[K [KESCESC[KOO[KBB[K        return NULL;                                          <
:[K[K [KESCESC[KOO[KBB[K}                                                               }
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[Kvoid terminateSimulation() {                                    void terminateSimulation() {
:[K[K [KESCESC[KOO[KBB[K                                                              >         pid_t localpgid;
:[K[K [KESCESC[KOO[KBB[K        pid_t localpid;                                                 pid_t localpid;
:[K[K [KESCESC[KOO[KBB[K                                                              >         int w = 0;
:[K[K [KESCESC[KOO[KBB[K                                                              >         int status;
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K        localpid = getpid();                                            localpid = getpid();
:[K[K [KESCESC[KOO[KBB[K        printf("RELEASESEMAPHORES   Terminating Simulation fr |         printf("RELEASESEMAPHORES   Terminating Simulation fr
:[K[K [KESCESC[KOO[KBB[K                                                              |         if(sheepProcessGID != (int)localpgid ){
:[K[K [KESCESC[KOO[KBB[K        // Child threads spawned by the main thread will term |                 if(killpg(sheepProcessGID, SIGKILL) == -1 && 
:[K[K [KESCESC[KOO[KBB[K        // so not much cleanup to do here                     |                         printf("XXTERMINATETERMINATE   SHEEPS
:[K[K [KESCESC[KOO[KBB[K        printf("XXTERMINATETERMINATE   sheep threads terminat |                 }
:[K[K [KESCESC[KOO[KBB[K        printf("XXTERMINATETERMINATE   cow threads terminatin |                 printf("XXTERMINATETERMINATE   killed sheeps 
:[K[K [KESCESC[KOO[KBB[K        printf("XXTERMINATETERMINATE   hunter threads termina |         }
:[K[K [KESCESC[KOO[KBB[K        printf("XXTERMINATETERMINATE   thief threads terminat |         if(cowProcessGID != (int)localpgid ){
:[K[K [KESCESC[KOO[KBB[K        printf("XXTERMINATETERMINATE   smaug thread terminati |                 if(killpg(cowProcessGID, SIGKILL) == -1 && er
:[K[K [KESCESC[KOO[KBB[K                                                              >                         printf("XXTERMINATETERMINATE   COWS N
:[K[K [KESCESC[KOO[KBB[K                                                              >                 }
:[K[K [KESCESC[KOO[KBB[K                                                              >                 printf("XXTERMINATETERMINATE   killed cows \n
:[K[K [KESCESC[KOO[KBB[K                                                              >         }
:[K[K [KESCESC[KOO[KBB[K                                                              >         if(hunterProcessGID != (int)localpgid ){
:[K[K [KESCESC[KOO[KBB[K                                                              >                 if(killpg(hunterProcessGID, SIGKILL) == -1 &&
:[K[K [KESCESC[KOO[KBB[K                                                              >                         printf("XXTERMINATETERMINATE   HUNTER
:[K[K [KESCESC[KOO[KBB[K                                                              >                 }
:[K[K [KESCESC[KOO[KBB[K                                                              >                 printf("XXTERMINATETERMINATE   killed hunters
:[K[K [KESCESC[KOO[KBB[K                                                              >         }
:[K[K [KESCESC[KOO[KBB[K                                                              >         if(thiefProcessGID != (int)localpgid ){
:[K[K [KESCESC[KOO[KBB[K                                                              >                 if(killpg(thiefProcessGID, SIGKILL) == -1 && 
:[K[K [KESCESC[KOO[KBB[K                                                              >                         printf("XXTERMINATETERMINATE   THIEVE
:[K[K [KESCESC[KOO[KBB[K                                                              >                 }
:[K[K [KESCESC[KOO[KBB[K                                                              >                 printf("XXTERMINATETERMINATE   killed thieves
:[K[K [KESCESC[KOO[KBB[K                                                              >         }
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K        // No child processes are created in this threaded ve |         //printf("smaugProcessID: %d  localpgid: %d\n", smaug
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K                                                              >         if(smaugProcessID != (int)localpid ) {
:[K[K [KESCESC[KOO[KBB[K                                                              >                 kill(smaugProcessID, SIGKILL);
:[K[K [KESCESC[KOO[KBB[K                                                              >                 printf("XXTERMINATETERMINATE   killed smaug\n
:[K[K [KESCESC[KOO[KBB[K                                                              >         }
:[K[K [KESCESC[KOO[KBB[K                                                              >         while( (w = waitpid( -1, &status, WNOHANG)) > 1){
:[K[K [KESCESC[KOO[KBB[K                                                              >                         printf("                           RE
:[K[K [KESCESC[KOO[KBB[K                                                              >         }
:[K[K [KESCESC[KOO[KBB[K        releaseSemandMem();                                             releaseSemandMem();
:[K[K [KESCESC[KOO[KBB[K                                                              <
:[K[K [KESCESC[KOO[KBB[K        printf("GOODBYE from terminate\n");                             printf("GOODBYE from terminate\n");
:[K[K [KESCESC[KOO[KBB[K}                                                               }
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[Kvoid releaseSemandMem()                                         void releaseSemandMem() 
:[K[K [KESCESC[KOO[KBB[K{                                                               {
:[K[K [KESCESC[KOO[KBB[K        // Semaphore set cannot be freed when there are sleep |         pid_t localpid;
:[K[K [KESCESC[KOO[KBB[K        // We set all semaphores to be nonzero and allow the  |         int w = 0;
:[K[K [KESCESC[KOO[KBB[K        // The maxiumum semaphore value is 32767, so set the  |         int status;
:[K[K [KESCESC[KOO[KBB[K        seminfo.val = 30000;                                  <
:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_SHEEPINGROUP, SETVAL, seminf <
:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_SHEEPWAITING, SETVAL, seminf <
:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_SHEEPEATEN, SETVAL, seminfo) <
:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_SHEEPDEAD, SETVAL, seminfo); <
:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_COWSINGROUP, SETVAL, seminfo <
:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_COWSWAITING, SETVAL, seminfo <
:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_COWSEATEN, SETVAL, seminfo); <
:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_COWSDEAD, SETVAL, seminfo);  <
:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_HUNTERSWAITING, SETVAL, semi <
:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_HUNTERFINISH, SETVAL, seminf <
:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_THIEVESWAITING, SETVAL, semi <
:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_THIEFFINISH, SETVAL, seminfo <
:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_DRAGONFIGHTING, SETVAL, semi <
:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_DRAGONSLEEPING, SETVAL, semi <
:[K[K [KESCESC[KOO[KBB[K        semctlChecked(semID, SEM_DRAGONEATING, SETVAL, seminf <
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K        // Wait for the semaphores, especially for the termin |         localpid = getpid();
:[K[K [KESCESC[KOO[KBB[K        // terminate gracefully and not exit(3) from an inval <
:[K[K [KESCESC[KOO[KBB[K        printf("RELEASERELEASERELEAS   Sleeping for one secon <
:[K[K [KESCESC[KOO[KBB[K        sleep(1);                                             <
:[K[K [KESCESC[KOO[KBB[K                                                              <
:[K[K [KESCESC[KOO[KBB[K        int semaphoreDeletionRet = semctl(semID, 0, IPC_RMID, <
:[K[K [KESCESC[KOO[KBB[K        if(semaphoreDeletionRet != 0) {                       <
:[K[K [KESCESC[KOO[KBB[K                printf("RELEASERELEASERELEAS   Catastrophic e <
:[K[K [KESCESC[KOO[KBB[K        } else {                                              <
:[K[K [KESCESC[KOO[KBB[K                printf("RELEASERELEASERELEAS   Semaphore set  <
:[K[K [KESCESC[KOO[KBB[K        }                                                     <
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K                                                              >         //should check return values for clean termination
:[K[K [KESCESC[KOO[KBB[K                                                              >         semctl(semID, 0, IPC_RMID, seminfo);
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K                                                              >
:[K[K [KESCESC[KOO[KBB[K                                                              >         // wait for the semaphores 
:[K[K [KESCESC[KOO[KBB[K                                                              >         usleep(4000);
:[K[K [KESCESC[KOO[KBB[K                                                              >         // arg1 is -1 to wait for all child processes
:[K[K [KESCESC[KOO[KBB[K                                                              >         while( (w = waitpid( -1, &status, WNOHANG)) > 1){
:[K[K [KESCESC[KOO[KBB[K                                                              >                 printf("                           REAPED pro
:[K[K [KESCESC[KOO[KBB[K                                                              >         }
:[K[K [KESCESC[KOO[KBB[K                                                              >         printf("\n");
:[K[K [KESCESC[KOO[KBB[K        if(shmdt(terminateFlagp)==-1) {                                 if(shmdt(terminateFlagp)==-1) {
:[K[K [KESCESC[KOO[KBB[K                printf("RELEASERELEASERELEAS   terminateFlagp                   printf("RELEASERELEASERELEAS   terminateFlagp
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        else{                                                           else{
:[K[K [KESCESC[KOO[KBB[K                printf("RELEASERELEASERELEAS   terminateFlagp                   printf("RELEASERELEASERELEAS   terminateFlagp
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        if( shmctl(terminateFlag, IPC_RMID, NULL ))                     if( shmctl(terminateFlag, IPC_RMID, NULL ))
:[K[K [KESCESC[KOO[KBB[K        {                                                               {
:[K[K [KESCESC[KOO[KBB[K                // this will dereferrence the null pointer wh                   // this will dereferrence the null pointer wh
:[K[K [KESCESC[KOO[KBB[K                printf("RELEASERELEASERELEAS   terminateFlag                    printf("RELEASERELEASERELEAS   terminateFlag 
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        else{                                                           else{
:[K[K [KESCESC[KOO[KBB[K                printf("RELEASERELEASERELEAS   terminateFlag                    printf("RELEASERELEASERELEAS   terminateFlag 
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        // SHEEP MEMORY                                                 // SHEEP MEMORY
:[K[K [KESCESC[KOO[KBB[K        if( shmdt(sheepMealFlagp)==-1)                                  if( shmdt(sheepMealFlagp)==-1)
:[K[K [KESCESC[KOO[KBB[K        {                                                               {
:[K[K [KESCESC[KOO[KBB[K                printf("RELEASERELEASERELEAS   sheepMealFlagp                   printf("RELEASERELEASERELEAS   sheepMealFlagp
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        else{                                                           else{
:[K[K [KESCESC[KOO[KBB[K                printf("RELEASERELEASERELEAS   sheepMealFlagp                   printf("RELEASERELEASERELEAS   sheepMealFlagp
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        if( shmctl(sheepMealFlag, IPC_RMID, NULL ))                     if( shmctl(sheepMealFlag, IPC_RMID, NULL ))
:[K[K [KESCESC[KOO[KBB[K        {                                                               {
:[K[K [KESCESC[KOO[KBB[K                printf("RELEASERELEASERELEAS   sheepMealFlag                    printf("RELEASERELEASERELEAS   sheepMealFlag 
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KAA[K[HM        semctlChecked(semID, SEM_COWSEATEN, SETVAL, seminfo); <
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM        semctlChecked(semID, SEM_COWSWAITING, SETVAL, seminfo <
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM        semctlChecked(semID, SEM_COWSINGROUP, SETVAL, seminfo <
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM        semctlChecked(semID, SEM_SHEEPDEAD, SETVAL, seminfo); <
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM        semctlChecked(semID, SEM_SHEEPEATEN, SETVAL, seminfo) <
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM        semctlChecked(semID, SEM_SHEEPWAITING, SETVAL, seminf <
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM        semctlChecked(semID, SEM_SHEEPINGROUP, SETVAL, seminf <
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM        seminfo.val = 30000;                                  <
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM        // The maxiumum semaphore value is 32767, so set the  |         int status;
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM        // We set all semaphores to be nonzero and allow the  |         int w = 0;
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM        // Semaphore set cannot be freed when there are sleep |         pid_t localpid;
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM{                                                               {
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HMvoid releaseSemandMem()                                         void releaseSemandMem() 
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM}                                                               }
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM        printf("GOODBYE from terminate\n");                             printf("GOODBYE from terminate\n");
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM                                                              <
[59;1H[K:[K[K [KESCESC[KOO[KAA[K[HM        releaseSemandMem();                                             releaseSemandMem();
[59;1H[K:[K[K [KESCESC[KOO[KBB[K                // this will dereferrence the null pointer wh                   // this will dereferrence the null pointer wh
:[K[K [KESCESC[KOO[KBB[K                printf("RELEASERELEASERELEAS   terminateFlag                    printf("RELEASERELEASERELEAS   terminateFlag 
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        else{                                                           else{
:[K[K [KESCESC[KOO[KBB[K                printf("RELEASERELEASERELEAS   terminateFlag                    printf("RELEASERELEASERELEAS   terminateFlag 
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        // SHEEP MEMORY                                                 // SHEEP MEMORY
:[K[K [KESCESC[KOO[KBB[K        if( shmdt(sheepMealFlagp)==-1)                                  if( shmdt(sheepMealFlagp)==-1)
:[K[K [KESCESC[KOO[KBB[K        {                                                               {
:[K[K [KESCESC[KOO[KBB[K                printf("RELEASERELEASERELEAS   sheepMealFlagp                   printf("RELEASERELEASERELEAS   sheepMealFlagp
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        else{                                                           else{
:[K[K [KESCESC[KOO[KBB[K                printf("RELEASERELEASERELEAS   sheepMealFlagp                   printf("RELEASERELEASERELEAS   sheepMealFlagp
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        if( shmctl(sheepMealFlag, IPC_RMID, NULL ))                     if( shmctl(sheepMealFlag, IPC_RMID, NULL ))
:[K[K [KESCESC[KOO[KBB[K        {                                                               {
:[K[K [KESCESC[KOO[KBB[K                printf("RELEASERELEASERELEAS   sheepMealFlag                    printf("RELEASERELEASERELEAS   sheepMealFlag 
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        else{                                                           else{
:[K[K [KESCESC[KOO[KBB[K                printf("RELEASERELEASERELEAS   sheepMealFlag                    printf("RELEASERELEASERELEAS   sheepMealFlag 
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        if( shmdt(sheepCounterp)==-1)                                   if( shmdt(sheepCounterp)==-1)
:[K[K [KESCESC[KOO[KBB[K        {                                                               {
:[K[K [KESCESC[KOO[KBB[K                printf("RELEASERELEASERELEAS   sheepCounterp                    printf("RELEASERELEASERELEAS   sheepCounterp 
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        else{                                                           else{
:[K[K [KESCESC[KOO[KBB[K                printf("RELEASERELEASERELEAS   sheepCounterp                    printf("RELEASERELEASERELEAS   sheepCounterp 
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        if( shmctl(sheepCounter, IPC_RMID, NULL ))                      if( shmctl(sheepCounter, IPC_RMID, NULL ))
:[K[K [KESCESC[KOO[KBB[K        {                                                               {
:[K[K [KESCESC[KOO[KBB[K                printf("RELEASERELEASERELEAS   sheepCounter m                   printf("RELEASERELEASERELEAS   sheepCounter m
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        else{                                                           else{
:[K[K [KESCESC[KOO[KBB[K                printf("RELEASERELEASERELEAS   sheepCounter m                   printf("RELEASERELEASERELEAS   sheepCounter m
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        if( shmdt(sheepEatenCounterp)==-1)                              if( shmdt(sheepEatenCounterp)==-1)
:[K[K [KESCESC[KOO[KBB[K        {                                                               {
:[K[K [KESCESC[KOO[KBB[K                printf("RELEASERELEASERELEAS   sheepEatenCoun                   printf("RELEASERELEASERELEAS   sheepEatenCoun
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        else{                                                           else{
:[K[K [KESCESC[KOO[KBB[K                printf("RELEASERELEASERELEAS   sheepEatenCoun                   printf("RELEASERELEASERELEAS   sheepEatenCoun
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        if( shmctl(sheepEatenCounter, IPC_RMID, NULL ))                 if( shmctl(sheepEatenCounter, IPC_RMID, NULL ))
:[K[K [KESCESC[KOO[KBB[K        {                                                               {
:[K[K [KESCESC[KOO[KBB[K                printf("RELEASERELEASERELEAS   sheepEatenCoun                   printf("RELEASERELEASERELEAS   sheepEatenCoun
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        else{                                                           else{
:[K[K [KESCESC[KOO[KBB[K                printf("RELEASERELEASERELEAS   sheepEatenCoun                   printf("RELEASERELEASERELEAS   sheepEatenCoun
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        // COW MEMORY                                                   // COW MEMORY
:[K[K [KESCESC[KOO[KBB[K        if( shmdt(cowMealFlagP)==-1)                                    if( shmdt(cowMealFlagP)==-1)
:[K[K [KESCESC[KOO[KBB[K        {                                                               {
:[K[K [KESCESC[KOO[KBB[K                printf("RELEASERELEASERELEAS   cowMealFlagP m                   printf("RELEASERELEASERELEAS   cowMealFlagP m
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        else{                                                           else{
:[K[K [KESCESC[KOO[KBB[K                printf("RELEASERELEASERELEAS   cowMealFlagP m                   printf("RELEASERELEASERELEAS   cowMealFlagP m
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        if( shmctl(cowMealFlag, IPC_RMID, NULL ))                       if( shmctl(cowMealFlag, IPC_RMID, NULL ))
:[K[K [KESCESC[KOO[KBB[K        {                                                               {
:[K[K [KESCESC[KOO[KBB[K                printf("RELEASERELEASERELEAS   cowMealFlag sh                   printf("RELEASERELEASERELEAS   cowMealFlag sh
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        else{                                                           else{
:[K[K [KESCESC[KOO[KBB[K                printf("RELEASERELEASERELEAS   cowMealFlag sh                   printf("RELEASERELEASERELEAS   cowMealFlag sh
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        if( shmdt(cowCounterp)==-1)                                     if( shmdt(cowCounterp)==-1)
:[K[K [KESCESC[KOO[KBB[K        {                                                               {
:[K[K [KESCESC[KOO[KBB[K                printf("RELEASERELEASERELEAS   cowCounterp me                   printf("RELEASERELEASERELEAS   cowCounterp me
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        else{                                                           else{
:[K[K [KESCESC[KOO[KBB[K                printf("RELEASERELEASERELEAS   cowCounterp me                   printf("RELEASERELEASERELEAS   cowCounterp me
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        if( shmctl(cowCounter, IPC_RMID, NULL ))                        if( shmctl(cowCounter, IPC_RMID, NULL ))
:[K[K [KESCESC[KOO[KBB[K        {                                                               {
:[K[K [KESCESC[KOO[KBB[K                printf("RELEASERELEASERELEAS   cowCounter mem                   printf("RELEASERELEASERELEAS   cowCounter mem
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        else{                                                           else{
:[K[K [KESCESC[KOO[KBB[K                printf("RELEASERELEASERELEAS   cowCounter mem                   printf("RELEASERELEASERELEAS   cowCounter mem
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        if( shmdt(cowsEatenCounterp)==-1)                               if( shmdt(cowsEatenCounterp)==-1)
:[K[K [KESCESC[KOO[KBB[K        {                                                               {
:[K[K [KESCESC[KOO[KBB[K                printf("RELEASERELEASERELEAS   cowsEatenCount                   printf("RELEASERELEASERELEAS   cowsEatenCount
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        else{                                                           else{
:[K[K [KESCESC[KOO[KBB[K                printf("RELEASERELEASERELEAS   cowsEatenCount                   printf("RELEASERELEASERELEAS   cowsEatenCount
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        if( shmctl(cowsEatenCounter, IPC_RMID, NULL ))                  if( shmctl(cowsEatenCounter, IPC_RMID, NULL ))
:[K[K [KESCESC[KOO[KBB[K        {                                                               {
:[K[K [KESCESC[KOO[KBB[K                printf("RELEASERELEASERELEAS   cowsEatenCount                   printf("RELEASERELEASERELEAS   cowsEatenCount
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        else{                                                           else{
:[K[K [KESCESC[KOO[KBB[K                printf("RELEASERELEASERELEAS   cowsEatenCount                   printf("RELEASERELEASERELEAS   cowsEatenCount
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        // HUNTER MEMORY                                                // HUNTER MEMORY
:[K[K [KESCESC[KOO[KBB[K        if( shmdt(hunterCounterp)==-1)                                  if( shmdt(hunterCounterp)==-1)
:[K[K [KESCESC[KOO[KBB[K        {                                                               {
:[K[K [KESCESC[KOO[KBB[K                printf("RELEASERELEASERELEAS   hunterCounterp                   printf("RELEASERELEASERELEAS   hunterCounterp
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        else{                                                           else{
:[K[K [KESCESC[KOO[KBB[K                printf("RELEASERELEASERELEAS   hunterCounterp                   printf("RELEASERELEASERELEAS   hunterCounterp
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        if( shmctl(hunterCounter, IPC_RMID, NULL ))                     if( shmctl(hunterCounter, IPC_RMID, NULL ))
:[K[K [KESCESC[KOO[KBB[K        {                                                               {
:[K[K [KESCESC[KOO[KBB[K                printf("RELEASERELEASERELEAS   hunterCounter                    printf("RELEASERELEASERELEAS   hunterCounter 
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        else{                                                           else{
:[K[K [KESCESC[KOO[KBB[K                printf("RELEASERELEASERELEAS   hunterCounter                    printf("RELEASERELEASERELEAS   hunterCounter 
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        // THIEF MEMORY                                                 // THIEF MEMORY
:[K[K [KESCESC[KOO[KBB[K        if( shmdt(thiefCounterp)==-1)                                   if( shmdt(thiefCounterp)==-1)
:[K[K [KESCESC[KOO[KBB[K        {                                                               {
:[K[K [KESCESC[KOO[KBB[K                printf("RELEASERELEASERELEAS   thiefCounterp                    printf("RELEASERELEASERELEAS   thiefCounterp 
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        else{                                                           else{
:[K[K [KESCESC[KOO[KBB[K                printf("RELEASERELEASERELEAS   thiefCounterp                    printf("RELEASERELEASERELEAS   thiefCounterp 
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        if( shmctl(thiefCounter, IPC_RMID, NULL ))                      if( shmctl(thiefCounter, IPC_RMID, NULL ))
:[K[K [KESCESC[KOO[KBB[K        {                                                               {
:[K[K [KESCESC[KOO[KBB[K                printf("RELEASERELEASERELEAS   thiefCounter m                   printf("RELEASERELEASERELEAS   thiefCounter m
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K        else{                                                           else{
:[K[K [KESCESC[KOO[KBB[K                printf("RELEASERELEASERELEAS   thiefCounter m                   printf("RELEASERELEASERELEAS   thiefCounter m
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K}                                                               }
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[Kvoid semctlChecked(int semaphoreID, int semNum, int flag, uni   void semctlChecked(int semaphoreID, int semNum, int flag, uni
:[K[K [KESCESC[KOO[KBB[K        /* wrapper that checks if the semaphore control reque           /* wrapper that checks if the semaphore control reque
:[K[K [KESCESC[KOO[KBB[K        /* successfully. If it has not the entire simulation            /* successfully. If it has not the entire simulation 
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K        if (semctl(semaphoreID, semNum, flag,  seminfo) == -1           if (semctl(semaphoreID, semNum, flag,  seminfo) == -1
:[K[K [KESCESC[KOO[KBB[K                if(errno != EIDRM) {                                            if(errno != EIDRM) {
:[K[K [KESCESC[KOO[KBB[K                        printf("semaphore control failed: sim                           printf("semaphore control failed: sim
:[K[K [KESCESC[KOO[KBB[K                        printf("errno %8d \n",errno );                                  printf("errno %8d \n",errno );
:[K[K [KESCESC[KOO[KBB[K                        *terminateFlagp = 1;                                            *terminateFlagp = 1;
:[K[K [KESCESC[KOO[KBB[K                        releaseSemandMem();                                             releaseSemandMem();
:[K[K [KESCESC[KOO[KBB[K                        exit(2);                                                        exit(2);
:[K[K [KESCESC[KOO[KBB[K                }                                                               }
:[K[K [KESCESC[KOO[KBB[K                else {                                                          else {
:[K[K [KESCESC[KOO[KBB[K                        exit(3);                                                        exit(3);
:[K[K [KESCESC[KOO[KBB[K                }                                                               }
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K}                                                               }
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[Kvoid semopChecked(int semaphoreID, struct sembuf *operation,    void semopChecked(int semaphoreID, struct sembuf *operation, 
:[K[K [KESCESC[KOO[KBB[K{                                                               {
:[K[K [KESCESC[KOO[KBB[K        /* wrapper that checks if the semaphore operation req           /* wrapper that checks if the semaphore operation req
:[K[K [KESCESC[KOO[KBB[K        /* successfully. If it has not the entire simulation            /* successfully. If it has not the entire simulation 
:[K[K [KESCESC[KOO[KBB[K                                                              <
:[K[K [KESCESC[KOO[KBB[K        // If we have been told to terminate, then just retur <
:[K[K [KESCESC[KOO[KBB[K        // operation below would likely cause an error; relea <
:[K[K [KESCESC[KOO[KBB[K        // execution elsewhere and the semaphore set would so <
:[K[K [KESCESC[KOO[KBB[K        // Same reasoning on why we will not use a mutex here <
:[K[K [KESCESC[KOO[KBB[K        if(*terminateFlagp == 1)                              <
:[K[K [KESCESC[KOO[KBB[K                return;                                       <
:[K[K [KESCESC[KOO[KBB[K                                                              <
:[K[K [KESCESC[KOO[KBB[K        if (semop(semaphoreID, operation, something) == -1 )            if (semop(semaphoreID, operation, something) == -1 ) 
:[K[K [KESCESC[KOO[KBB[K                if(errno != EIDRM) {                                            if(errno != EIDRM) {
:[K[K [KESCESC[KOO[KBB[K                        printf("semaphore operation failed: s                           printf("semaphore operation failed: s
:[K[K [KESCESC[KOO[KBB[K                        *terminateFlagp = 1;                                            *terminateFlagp = 1;
:[K[K [KESCESC[KOO[KBB[K                        releaseSemandMem();                                             releaseSemandMem();
:[K[K [KESCESC[KOO[KBB[K                        exit(2);                                                        exit(2);
:[K[K [KESCESC[KOO[KBB[K                }                                                               }
:[K[K [KESCESC[KOO[KBB[K                else {                                                          else {
:[K[K [KESCESC[KOO[KBB[K                        exit(3);                                                        exit(3);
:[K[K [KESCESC[KOO[KBB[K                }                                                               }
:[K[K [KESCESC[KOO[KBB[K        }                                                               }
:[K[K [KESCESC[KOO[KBB[K}                                                               }
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[Kdouble timeChange( const struct timeval startTime )             double timeChange( const struct timeval startTime )
:[K[K [KESCESC[KOO[KBB[K{                                                               {
:[K[K [KESCESC[KOO[KBB[K        struct timeval nowTime;                                         struct timeval nowTime;
:[K[K [KESCESC[KOO[KBB[K        double elapsedTime;                                             double elapsedTime;
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K        gettimeofday(&nowTime,NULL);                                    gettimeofday(&nowTime,NULL);
:[K[K [KESCESC[KOO[KBB[K        elapsedTime = (nowTime.tv_sec - startTime.tv_sec)*100           elapsedTime = (nowTime.tv_sec - startTime.tv_sec)*100
:[K[K [KESCESC[KOO[KBB[K        elapsedTime +=  (nowTime.tv_usec - startTime.tv_usec)           elapsedTime +=  (nowTime.tv_usec - startTime.tv_usec)
:[K[K [KESCESC[KOO[KBB[K        return elapsedTime;                                             return elapsedTime;
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K}                                                               }
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[Kint getInputFor(char *prompt);                                  int getInputFor(char *prompt);
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[Kint main() {                                                    int main() {
:[K[K [KESCESC[KOO[KBB[K        initialize();                                                   initialize();
:[K[K [KESCESC[KOO[KBB[K        printf("Main threadid: %lu\n", (unsigned long)pthread |
:[K[K [KESCESC[KOO[KBB[K        printf("1s (1 second) is 1000000us (1e6 microseconds)           printf("1s (1 second) is 1000000us (1e6 microseconds)
:[K[K [KESCESC[KOO[KBB[K        const int seed = getInputFor("the seed");                       const int seed = getInputFor("the seed");
:[K[K [KESCESC[KOO[KBB[K        const int maximumSheepInterval = getInputFor("maximum           const int maximumSheepInterval = getInputFor("maximum
:[K[K [KESCESC[KOO[KBB[K        const int maximumCowInterval = getInputFor("maximumCo           const int maximumCowInterval = getInputFor("maximumCo
:[K[K [KESCESC[KOO[KBB[K        const int maximumHunterInterval = getInputFor("maximu           const int maximumHunterInterval = getInputFor("maximu
:[K[K [KESCESC[KOO[KBB[K        const int maximumThiefInterval = getInputFor("maximum           const int maximumThiefInterval = getInputFor("maximum
:[K[K [KESCESC[KOO[KBB[K        const int smaugWinProb = getInputFor("smaugWinProb (0           const int smaugWinProb = getInputFor("smaugWinProb (0
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K        double sheepTimer = 0;                                          double sheepTimer = 0;
:[K[K [KESCESC[KOO[KBB[K        double cowTimer = 0;                                            double cowTimer = 0;
:[K[K [KESCESC[KOO[KBB[K        double hunterTimer = 0;                                         double hunterTimer = 0;
:[K[K [KESCESC[KOO[KBB[K        double thiefTimer = 0;                                          double thiefTimer = 0;
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K        srand(seed);                                                    srand(seed);
:[K[K [KESCESC[KOO[KBB[K        parentProcessID = getpid();                                     parentProcessID = getpid();
:[K[K [KESCESC[KOO[KBB[K                                                              >         // we do not know smaugpid yet
:[K[K [KESCESC[KOO[KBB[K                                                              >         smaugProcessID = -1; 
:[K[K [KESCESC[KOO[KBB[K                                                              >         sheepProcessGID = parentProcessID - 1;
:[K[K [KESCESC[KOO[KBB[K                                                              >         cowProcessGID = parentProcessID - 2;
:[K[K [KESCESC[KOO[KBB[K                                                              >         hunterProcessGID = parentProcessID - 3;
:[K[K [KESCESC[KOO[KBB[K                                                              >         thiefProcessGID = parentProcessID - 4;
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K        pthread_t smaugThread;                                |         pid_t childPID = fork();
:[K[K [KESCESC[KOO[KBB[K        if(pthread_create(&smaugThread, NULL, smaug, &smaugWi |
:[K[K [KESCESC[KOO[KBB[K                printf("error creating thread!\n");           |         if(childPID < 0) {
:[K[K [KESCESC[KOO[KBB[K                terminateSimulation();                        |                 printf("FORK FAILED\n");
:[K[K [KESCESC[KOO[KBB[K                return 1;                                                       return 1;
:[K[K [KESCESC[KOO[KBB[K        }                                                     |         } else if(childPID == 0) {
:[K[K [KESCESC[KOO[KBB[K        pthread_detach(smaugThread);                          |                 smaug(smaugWinProb);
:[K[K [KESCESC[KOO[KBB[K                                                              >                 return 0;
:[K[K [KESCESC[KOO[KBB[K                                                              >         } 
:[K[K [KESCESC[KOO[KBB[K                                                              >
:[K[K [KESCESC[KOO[KBB[K                                                              >         // smaugpid is now known to callee from the above for
:[K[K [KESCESC[KOO[KBB[K                                                              >         smaugProcessID = childPID;
:[K[K [KESCESC[KOO[KBB[K                                                                                
:[K[K [KESCESC[KOO[KBB[K        gettimeofday(&startTime, NULL);                                 gettimeofday(&startTime, NULL);
:[K[K [KESCESC[KOO[KBB[K                                                              >         int zombieTick = 0;
:[K[K [KESCESC[KOO[KBB[K        while(*terminateFlagp == 0) {                                   while(*terminateFlagp == 0) {
:[K[K [KESCESC[KOO[KBB[K                                                              >                 zombieTick++;
:[K[K [KESCESC[KOO[KBB[K                double simDuration = timeChange(startTime);                     double simDuration = timeChange(startTime);
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K                if(sheepTimer - simDuration <= 0) {                             if(sheepTimer - simDuration <= 0) {
:[K[K [KESCESC[KOO[KBB[K                        sheepTimer = simDuration + (rand() %                            sheepTimer = simDuration + (rand() % 
:[K[K [KESCESC[KOO[KBB[K                        printf("SHEEP CREATED! next sheep at:                           printf("SHEEP CREATED! next sheep at:
:[K[K [KESCESC[KOO[KBB[K                        float sleepTime = (rand() % maximumSh |                         int childPID = fork();
:[K[K [KESCESC[KOO[KBB[K                        pthread_t sheepThread;                |                         if(childPID == 0) {
:[K[K [KESCESC[KOO[KBB[K                        if(pthread_create(&sheepThread, NULL, |                                 sheep((rand() % maximumSheepI
:[K[K [KESCESC[KOO[KBB[K                                // We have ran out of memory/ |                                 return 0;
:[K[K [KESCESC[KOO[KBB[K                                // abort and terminate.       <
:[K[K [KESCESC[KOO[KBB[K                                printf("Error creating sheep  <
:[K[K [KESCESC[KOO[KBB[K                                terminateSimulation();        <
:[K[K [KESCESC[KOO[KBB[K                                return 1;                     <
:[K[K [KESCESC[KOO[KBB[K                        }                                                               }
:[K[K [KESCESC[KOO[KBB[K                        // To free up resources, we would nee <
:[K[K [KESCESC[KOO[KBB[K                        // However, we would not be returning <
:[K[K [KESCESC[KOO[KBB[K                        pthread_detach(sheepThread);          <
:[K[K [KESCESC[KOO[KBB[K                }                                                               }
:[K[K [KESCESC[KOO[KBB[K
:[K[K [KESCESC[KOO[KBB[K                if(cowTimer - simDuration <= 0) {                               if(cowTimer - simDuration <= 0) {
:[K[K [KESCESC[KOO[KBB[K                        cowTimer = simDuration + (rand() % ma                           cowTimer = simDuration + (rand() % ma
:[K[K [KESCESC[KOO[KBB[K                        printf("COW CREATED! next cow at: %f\                           printf("COW CREATED! next cow at: %f\
:[K[K[?1l>[?1049l]0;steven@ansible: ~/Dropbox/school/cmpt300/ass3steven@ansible:~/Dropbox/school/cmpt300/ass3$ q[K^vim[K[K[Ksdiff^vimdiff
]0;steven@ansible: ~/Dropbox/school/cmpt300/ass3steven@ansible:~/Dropbox/school/cmpt300/ass3$ vimdiff smaugThread.c smaugProcess.c | less
[?1049h[?1h=Vim: Warning: Output is not to a terminal
[7mESC[27m[?1049h[7mESC[27m[?1h[7mESC[27m=[7mESC[27m[1;59r[7mESC[27m[?12;25h[7mESC[27m[?12l[7mESC[27m[?25h[7mESC[27m[27m[7mESC[27m[m[7mESC[27m[H[7mESC[27m[2J[7mESC[27m[?25l[7mESC[27m[59;1HE325: ATTENTION[7m^M[27m
Found a swap file by the name ".smaugThread.c.swp"[7m^M[27m
[7mESC[27m[10Cowned by: steven   dated: Sun Jul 20 01:19:56 2014[7m^M[27m
[7mESC[27m[9Cfile name: ~steven/Dropbox/school/cmpt300/ass3/smaugThread.c[7m^M[27m
[7mESC[27m[10Cmodified: no[7m^M[27m
[7mESC[27m[9Cuser name: steven   host name: ansible[7m^M[27m
[7mESC[27m[8Cprocess ID: 18153 (still running)[7m^M[27m
While opening file "smaugThread.c"[7m^M[27m
[7mESC[27m[13Cdated: Sun Jul 20 01:08:30 2014[7m^M[27m

(1) Another program may be editing the same file.  If this is the case,[7m^M[27m
    be careful not to end up with two different instances of the same[7m^M[27m
    file when making changes.  Quit, or continue with caution.[7m^M[27m
(2) An edit session for this file crashed.[7m^M[27m
    If this is the case, use ":recover" or "vim -r smaugThread.c"[7m^M[27m
    to recover the changes (see ":help recovery").[7m^M[27m
    If you did this already, delete the swap file ".smaugThread.c.swp"[7m^M[27m
    to avoid this message.[7m^M[27m

Swap file ".smaugThread.c.swp" already exists![7m^M[27m
[O]pen Read-Only, (E)dit anyway, (R)ecover, (Q)uit, (A)bort:[7mESC[27m[?12l[7mESC[27m[?25h[7mESC[27m[59;1H[7mESC[27m[K[7mESC[27m[59;1H
[7mESC[27m[?25lE325: ATTENTION[7m^M[27m
Found a swap file by the name ".smaugProcess.c.swp"[7m^M[27m
[7mESC[27m[10Cowned by: steven   dated: Sun Jul 20 01:25:42 2014[7m^M[27m
[7mESC[27m[9Cfile name: ~steven/Dropbox/school/cmpt300/ass3/smaugProcess.c[7m^M[27m
[7mESC[27m[10Cmodified: no[7m^M[27m
[7mESC[27m[9Cuser name: steven   host name: ansible[7m^M[27m
[7mESC[27m[8Cprocess ID: 18153 (still running)[7m^M[27m
While opening file "smaugProcess.c"[7m^M[27m
[7mESC[27m[13Cdated: Sun Jul 20 01:25:38 2014[7m^M[27m

(1) Another program may be editing the same file.  If this is the case,[7m^M[27m
    be careful not to end up with two different instances of the same[7m^M[27m
    file when making changes.  Quit, or continue with caution.[7m^M[27m
(2) An edit session for this file crashed.[7m^M[27